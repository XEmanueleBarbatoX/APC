
Gemini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009900  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001174  08009ae0  08009ae0  0000aae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac54  0800ac54  0000c1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ac54  0800ac54  0000bc54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac5c  0800ac5c  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac5c  0800ac5c  0000bc5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac60  0800ac60  0000bc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800ac64  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000834  200001e8  0800ae4c  0000c1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a1c  0800ae4c  0000ca1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013dcd  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d96  00000000  00000000  0001ffe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00022d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c44  00000000  00000000  00023d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271db  00000000  00000000  000249bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a0f  00000000  00000000  0004bb97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0076  00000000  00000000  000605a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015061c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005290  00000000  00000000  00150660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001558f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009ac8 	.word	0x08009ac8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	08009ac8 	.word	0x08009ac8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <LM75A_WriteByte>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Routine per scrivere un byte
static HAL_StatusTypeDef LM75A_WriteByte(uint8_t reg, uint8_t data) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af04      	add	r7, sp, #16
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	460a      	mov	r2, r1
 8000f2e:	71fb      	strb	r3, [r7, #7]
 8000f30:	4613      	mov	r3, r2
 8000f32:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(
 8000f34:	2390      	movs	r3, #144	@ 0x90
 8000f36:	4619      	mov	r1, r3
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	2364      	movs	r3, #100	@ 0x64
 8000f3e:	9302      	str	r3, [sp, #8]
 8000f40:	2301      	movs	r3, #1
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	1dbb      	adds	r3, r7, #6
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	4804      	ldr	r0, [pc, #16]	@ (8000f5c <LM75A_WriteByte+0x38>)
 8000f4c:	f002 f93c 	bl	80031c8 <HAL_I2C_Mem_Write>
 8000f50:	4603      	mov	r3, r0
        I2C_MEMADD_SIZE_8BIT,
        &data,
        1,
        100  /* timeout ms */
    );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000204 	.word	0x20000204

08000f60 <LM75A_WriteWord>:

// Routine per scrivere due byte
static HAL_StatusTypeDef LM75A_WriteWord(uint8_t reg, uint16_t value) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af04      	add	r7, sp, #16
 8000f66:	4603      	mov	r3, r0
 8000f68:	460a      	mov	r2, r1
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[2];
    buf[0] = (value >> 8) & 0xFF;  // MSB
 8000f70:	88bb      	ldrh	r3, [r7, #4]
 8000f72:	0a1b      	lsrs	r3, r3, #8
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	733b      	strb	r3, [r7, #12]
    buf[1] = value & 0xFF;         // LSB (“don’t care” bits = 0)
 8000f7a:	88bb      	ldrh	r3, [r7, #4]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Mem_Write(
 8000f80:	2390      	movs	r3, #144	@ 0x90
 8000f82:	4619      	mov	r1, r3
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	2364      	movs	r3, #100	@ 0x64
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2301      	movs	r3, #1
 8000f98:	4803      	ldr	r0, [pc, #12]	@ (8000fa8 <LM75A_WriteWord+0x48>)
 8000f9a:	f002 f915 	bl	80031c8 <HAL_I2C_Mem_Write>
 8000f9e:	4603      	mov	r3, r0
        I2C_MEMADD_SIZE_8BIT,
        buf,
        2,
        100
    );
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000204 	.word	0x20000204

08000fac <LM75A_Init>:

// Routine di configurazione LM75A
void LM75A_Init(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
         *    OS_COMP_INT = 1 (interrupt)  → B1=1
         *    SHUTDOWN    = 0 (normal)     → B0=0
         *    byte = 0b0001_0110 = 0x16
    */

	ret = LM75A_WriteByte(REG_CONF, 0x16);
 8000fb2:	2116      	movs	r1, #22
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f7ff ffb5 	bl	8000f24 <LM75A_WriteByte>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK) { Error_Handler(); }
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <LM75A_Init+0x1c>
 8000fc4:	f000 fbc8 	bl	8001758 <Error_Handler>

    /* 2) TOS = 35°C ⇒ 35/0.5 = 70 = 0x46 */
    /*    value register = 0x46 << 8 = 0x4600 */

	// Temperatura per prova: 32 °C / 0.5 °C = 64  → 0x40
	uint16_t temp_max = LM75A_TEMP_TO_REG(30.0f);
 8000fc8:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8000fcc:	80bb      	strh	r3, [r7, #4]
    ret = LM75A_WriteWord(REG_TOS, temp_max);
 8000fce:	88bb      	ldrh	r3, [r7, #4]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	f7ff ffc4 	bl	8000f60 <LM75A_WriteWord>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) { Error_Handler(); }
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <LM75A_Init+0x3a>
 8000fe2:	f000 fbb9 	bl	8001758 <Error_Handler>

    /* 3) THYST = 30°C ⇒ 30/0.5 = 60 = 0x3C ⇒ 0x3C00 */
    uint16_t temp_min = LM75A_TEMP_TO_REG(28.0f);
 8000fe6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000fea:	807b      	strh	r3, [r7, #2]
    ret = LM75A_WriteWord(REG_THYST, temp_min);
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	2002      	movs	r0, #2
 8000ff2:	f7ff ffb5 	bl	8000f60 <LM75A_WriteWord>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) { Error_Handler(); }
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <LM75A_Init+0x58>
 8001000:	f000 fbaa 	bl	8001758 <Error_Handler>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_UART_RxCpltCallback>:
        }
    }
}*/

// Ridefinizione Callback di ricezione UART (interrupt)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
    // if (huart->Instance == USART1 && system_state == STATE_WAIT_RESPONSE) {
	// if (huart->Instance == USART1) {
	if (huart->Instance == USART1) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a08      	ldr	r2, [pc, #32]	@ (800103c <HAL_UART_RxCpltCallback+0x30>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d10a      	bne.n	8001034 <HAL_UART_RxCpltCallback+0x28>
        // terminatore stringa
        //rxBuf[8] = '\0';
        system_state = STATE_RESPONSE_RECEIVED;
 800101e:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <HAL_UART_RxCpltCallback+0x34>)
 8001020:	2202      	movs	r2, #2
 8001022:	701a      	strb	r2, [r3, #0]
        rx_data_ready = 1;
 8001024:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <HAL_UART_RxCpltCallback+0x38>)
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]

        // Preparazione USART prossima ricezione
        HAL_UART_Receive_IT(&huart1, rxBuf, 8);
 800102a:	2208      	movs	r2, #8
 800102c:	4906      	ldr	r1, [pc, #24]	@ (8001048 <HAL_UART_RxCpltCallback+0x3c>)
 800102e:	4807      	ldr	r0, [pc, #28]	@ (800104c <HAL_UART_RxCpltCallback+0x40>)
 8001030:	f003 fe7e 	bl	8004d30 <HAL_UART_Receive_IT>
    }
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40013800 	.word	0x40013800
 8001040:	200004a8 	.word	0x200004a8
 8001044:	20000000 	.word	0x20000000
 8001048:	200004ac 	.word	0x200004ac
 800104c:	20000380 	.word	0x20000380

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0a2      	sub	sp, #136	@ 0x88
 8001054:	af02      	add	r7, sp, #8
  float temp_c;
  uint8_t msg[32];
  int len;
  uint8_t data_read[2];
  char temp_s[10];
  int cont = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	67fb      	str	r3, [r7, #124]	@ 0x7c
  float soglia = 30.0f;
 800105a:	4bb1      	ldr	r3, [pc, #708]	@ (8001320 <main+0x2d0>)
 800105c:	67bb      	str	r3, [r7, #120]	@ 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105e:	f001 f9ad 	bl	80023bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001062:	f000 f977 	bl	8001354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001066:	f000 fb2f 	bl	80016c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800106a:	f000 f9bf 	bl	80013ec <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800106e:	f000 fadf 	bl	8001630 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001072:	f000 fa91 	bl	8001598 <MX_USART1_UART_Init>
  MX_UART5_Init();
 8001076:	f000 fa43 	bl	8001500 <MX_UART5_Init>
  MX_LPUART1_UART_Init();
 800107a:	f000 f9f7 	bl	800146c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2101      	movs	r1, #1
 8001082:	2025      	movs	r0, #37	@ 0x25
 8001084:	f001 fb07 	bl	8002696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001088:	2025      	movs	r0, #37	@ 0x25
 800108a:	f001 fb1e 	bl	80026ca <HAL_NVIC_EnableIRQ>

  // Preparazione USART
  // __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
  HAL_UART_Receive_IT(&huart1, rxBuf, 8);
 800108e:	2208      	movs	r2, #8
 8001090:	49a4      	ldr	r1, [pc, #656]	@ (8001324 <main+0x2d4>)
 8001092:	48a5      	ldr	r0, [pc, #660]	@ (8001328 <main+0x2d8>)
 8001094:	f003 fe4c 	bl	8004d30 <HAL_UART_Receive_IT>
  LM75A_Init();
 8001098:	f7ff ff88 	bl	8000fac <LM75A_Init>
  ssd1306_Init();
 800109c:	f000 fe9c 	bl	8001dd8 <ssd1306_Init>

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f001 f8c3 	bl	800222c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80010a6:	2101      	movs	r1, #1
 80010a8:	2000      	movs	r0, #0
 80010aa:	f001 f8f5 	bl	8002298 <BSP_PB_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Transmit(&huart1, (uint8_t*)alarmMsg, 9, HAL_MAX_DELAY);

	  if (rx_data_ready == 1){
 80010ae:	4b9f      	ldr	r3, [pc, #636]	@ (800132c <main+0x2dc>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d10a      	bne.n	80010ce <main+0x7e>

		  rx_data_ready = 0;
 80010b8:	4b9c      	ldr	r3, [pc, #624]	@ (800132c <main+0x2dc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]

		  if (system_state == STATE_WAIT_RESPONSE){
 80010be:	4b9c      	ldr	r3, [pc, #624]	@ (8001330 <main+0x2e0>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d102      	bne.n	80010ce <main+0x7e>
			  system_state = STATE_RESPONSE_RECEIVED;
 80010c8:	4b99      	ldr	r3, [pc, #612]	@ (8001330 <main+0x2e0>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  switch(system_state) {
 80010ce:	4b98      	ldr	r3, [pc, #608]	@ (8001330 <main+0x2e0>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	f200 811e 	bhi.w	8001316 <main+0x2c6>
 80010da:	a201      	add	r2, pc, #4	@ (adr r2, 80010e0 <main+0x90>)
 80010dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e0:	080010f1 	.word	0x080010f1
 80010e4:	0800121f 	.word	0x0800121f
 80010e8:	080012c9 	.word	0x080012c9
 80010ec:	080012fb 	.word	0x080012fb

	              case STATE_NORMAL: {
	                  // Modalità normale: leggo e stampo la temperatura
	                  uint8_t cmd = REG_TEMP;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	                  if (HAL_I2C_Master_Transmit(&hi2c1, LM75A, &cmd, 1, HAL_MAX_DELAY) == HAL_OK) {
 80010f6:	2390      	movs	r3, #144	@ 0x90
 80010f8:	4619      	mov	r1, r3
 80010fa:	f107 022b 	add.w	r2, r7, #43	@ 0x2b
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	488b      	ldr	r0, [pc, #556]	@ (8001334 <main+0x2e4>)
 8001108:	f001 fe50 	bl	8002dac <HAL_I2C_Master_Transmit>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	f040 8081 	bne.w	8001216 <main+0x1c6>
	                      uint8_t data[2];
	                      if (HAL_I2C_Master_Receive(&hi2c1, LM75A, data, 2, HAL_MAX_DELAY) == HAL_OK) {
 8001114:	2390      	movs	r3, #144	@ 0x90
 8001116:	4619      	mov	r1, r3
 8001118:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2302      	movs	r3, #2
 8001124:	4883      	ldr	r0, [pc, #524]	@ (8001334 <main+0x2e4>)
 8001126:	f001 ff59 	bl	8002fdc <HAL_I2C_Master_Receive>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d172      	bne.n	8001216 <main+0x1c6>
	                          int16_t raw = ((int16_t)data[0] << 8) | data[1];
 8001130:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001134:	b21b      	sxth	r3, r3
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	b21a      	sxth	r2, r3
 800113a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	                          raw >>= 5;
 8001146:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800114a:	115b      	asrs	r3, r3, #5
 800114c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	                          float temp = raw * 0.125f;
 8001150:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115c:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8001160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001164:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	                          char temp_s[16];
	                          snprintf(temp_s, sizeof(temp_s), "T: %.2f C", temp);
 8001168:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800116a:	f7ff fa15 	bl	8000598 <__aeabi_f2d>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	f107 0018 	add.w	r0, r7, #24
 8001176:	e9cd 2300 	strd	r2, r3, [sp]
 800117a:	4a6f      	ldr	r2, [pc, #444]	@ (8001338 <main+0x2e8>)
 800117c:	2110      	movs	r1, #16
 800117e:	f006 fb5b 	bl	8007838 <sniprintf>

	                          ssd1306_Fill(Black);
 8001182:	2000      	movs	r0, #0
 8001184:	f000 fe92 	bl	8001eac <ssd1306_Fill>
	                          ssd1306_SetCursor(2, 2);
 8001188:	2102      	movs	r1, #2
 800118a:	2002      	movs	r0, #2
 800118c:	f000 ffda 	bl	8002144 <ssd1306_SetCursor>
	                          ssd1306_WriteString("Temperatura corrente:", Font_6x8, White);
 8001190:	4b6a      	ldr	r3, [pc, #424]	@ (800133c <main+0x2ec>)
 8001192:	2201      	movs	r2, #1
 8001194:	9200      	str	r2, [sp, #0]
 8001196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001198:	4869      	ldr	r0, [pc, #420]	@ (8001340 <main+0x2f0>)
 800119a:	f000 ffad 	bl	80020f8 <ssd1306_WriteString>
	                          ssd1306_SetCursor(2, 20);
 800119e:	2114      	movs	r1, #20
 80011a0:	2002      	movs	r0, #2
 80011a2:	f000 ffcf 	bl	8002144 <ssd1306_SetCursor>
	                          ssd1306_WriteString(temp_s, Font_7x10, Black);
 80011a6:	4b67      	ldr	r3, [pc, #412]	@ (8001344 <main+0x2f4>)
 80011a8:	f107 0018 	add.w	r0, r7, #24
 80011ac:	2200      	movs	r2, #0
 80011ae:	9200      	str	r2, [sp, #0]
 80011b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b2:	f000 ffa1 	bl	80020f8 <ssd1306_WriteString>
	                          ssd1306_UpdateScreen();
 80011b6:	f000 fe91 	bl	8001edc <ssd1306_UpdateScreen>

	                          if (temp > soglia){
 80011ba:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80011be:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80011c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ca:	dd22      	ble.n	8001212 <main+0x1c2>
	                        	  cont ++;
 80011cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80011ce:	3301      	adds	r3, #1
 80011d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
	                        	  if (cont == 4){
 80011d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d11e      	bne.n	8001216 <main+0x1c6>
	                        		  cont = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	67fb      	str	r3, [r7, #124]	@ 0x7c
	                        		  // Invio l'allarme e lo stampo
									  // const char alarmMsg[] = "ALLARME Fratm\r\n";



	                        		  HAL_UART_Transmit(&huart1, (uint8_t*)alarmMsg, 8, HAL_MAX_DELAY);
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
 80011e0:	2208      	movs	r2, #8
 80011e2:	4959      	ldr	r1, [pc, #356]	@ (8001348 <main+0x2f8>)
 80011e4:	4850      	ldr	r0, [pc, #320]	@ (8001328 <main+0x2d8>)
 80011e6:	f003 fd15 	bl	8004c14 <HAL_UART_Transmit>

									  ssd1306_Fill(Black);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 fe5e 	bl	8001eac <ssd1306_Fill>
									  ssd1306_SetCursor(2, 20);
 80011f0:	2114      	movs	r1, #20
 80011f2:	2002      	movs	r0, #2
 80011f4:	f000 ffa6 	bl	8002144 <ssd1306_SetCursor>
									  ssd1306_WriteString("ALLARME INCENDIO", Font_7x10, White);
 80011f8:	4b52      	ldr	r3, [pc, #328]	@ (8001344 <main+0x2f4>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	9200      	str	r2, [sp, #0]
 80011fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001200:	4852      	ldr	r0, [pc, #328]	@ (800134c <main+0x2fc>)
 8001202:	f000 ff79 	bl	80020f8 <ssd1306_WriteString>
									  ssd1306_UpdateScreen();
 8001206:	f000 fe69 	bl	8001edc <ssd1306_UpdateScreen>

									  // passo a stato di attesa risposta
									  system_state = STATE_WAIT_RESPONSE;
 800120a:	4b49      	ldr	r3, [pc, #292]	@ (8001330 <main+0x2e0>)
 800120c:	2201      	movs	r2, #1
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	e001      	b.n	8001216 <main+0x1c6>
	                        	  }
	                          }
	                          else{
	                        	  cont = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	67fb      	str	r3, [r7, #124]	@ 0x7c
	                          }
	                      }
	                  }
	                  HAL_Delay(100);
 8001216:	2064      	movs	r0, #100	@ 0x64
 8001218:	f001 f940 	bl	800249c <HAL_Delay>
	                  break;
 800121c:	e07e      	b.n	800131c <main+0x2cc>
	  	  	  	  */


	              case STATE_WAIT_RESPONSE: {

	                  uint8_t cmd = REG_TEMP;
 800121e:	2300      	movs	r3, #0
 8001220:	75fb      	strb	r3, [r7, #23]
					  if (HAL_I2C_Master_Transmit(&hi2c1, LM75A, &cmd, 1, HAL_MAX_DELAY) == HAL_OK) {
 8001222:	2390      	movs	r3, #144	@ 0x90
 8001224:	4619      	mov	r1, r3
 8001226:	f107 0217 	add.w	r2, r7, #23
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2301      	movs	r3, #1
 8001232:	4840      	ldr	r0, [pc, #256]	@ (8001334 <main+0x2e4>)
 8001234:	f001 fdba 	bl	8002dac <HAL_I2C_Master_Transmit>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d140      	bne.n	80012c0 <main+0x270>
						  uint8_t data[2];
						  if (HAL_I2C_Master_Receive(&hi2c1, LM75A, data, 2, HAL_MAX_DELAY) == HAL_OK) {
 800123e:	2390      	movs	r3, #144	@ 0x90
 8001240:	4619      	mov	r1, r3
 8001242:	f107 0214 	add.w	r2, r7, #20
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2302      	movs	r3, #2
 800124e:	4839      	ldr	r0, [pc, #228]	@ (8001334 <main+0x2e4>)
 8001250:	f001 fec4 	bl	8002fdc <HAL_I2C_Master_Receive>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d132      	bne.n	80012c0 <main+0x270>
							  int16_t raw = ((int16_t)data[0] << 8) | data[1];
 800125a:	7d3b      	ldrb	r3, [r7, #20]
 800125c:	b21b      	sxth	r3, r3
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	7d7b      	ldrb	r3, [r7, #21]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
							  raw >>= 5;
 800126c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 8001270:	115b      	asrs	r3, r3, #5
 8001272:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
							  float temp = raw * 0.125f;
 8001276:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001282:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8001286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800128a:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
							  char temp_s[16];
							  snprintf(temp_s, sizeof(temp_s), "T: %.2f C", temp);
 800128e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001290:	f7ff f982 	bl	8000598 <__aeabi_f2d>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	1d38      	adds	r0, r7, #4
 800129a:	e9cd 2300 	strd	r2, r3, [sp]
 800129e:	4a26      	ldr	r2, [pc, #152]	@ (8001338 <main+0x2e8>)
 80012a0:	2110      	movs	r1, #16
 80012a2:	f006 fac9 	bl	8007838 <sniprintf>

							  ssd1306_SetCursor(40, 45);
 80012a6:	212d      	movs	r1, #45	@ 0x2d
 80012a8:	2028      	movs	r0, #40	@ 0x28
 80012aa:	f000 ff4b 	bl	8002144 <ssd1306_SetCursor>
							  ssd1306_WriteString(temp_s, Font_7x10, Black);
 80012ae:	4b25      	ldr	r3, [pc, #148]	@ (8001344 <main+0x2f4>)
 80012b0:	1d38      	adds	r0, r7, #4
 80012b2:	2200      	movs	r2, #0
 80012b4:	9200      	str	r2, [sp, #0]
 80012b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b8:	f000 ff1e 	bl	80020f8 <ssd1306_WriteString>
							  ssd1306_UpdateScreen();
 80012bc:	f000 fe0e 	bl	8001edc <ssd1306_UpdateScreen>

						  }
					  }
					  HAL_Delay(100);
 80012c0:	2064      	movs	r0, #100	@ 0x64
 80012c2:	f001 f8eb 	bl	800249c <HAL_Delay>
					  break;
 80012c6:	e029      	b.n	800131c <main+0x2cc>
	              }

	              case STATE_RESPONSE_RECEIVED: {
	                  // Appena arriva la risposta UART (gestita in RxCpltCallback)
	                  ssd1306_Fill(Black);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f000 fdef 	bl	8001eac <ssd1306_Fill>
	                  ssd1306_SetCursor(2, 12);
 80012ce:	210c      	movs	r1, #12
 80012d0:	2002      	movs	r0, #2
 80012d2:	f000 ff37 	bl	8002144 <ssd1306_SetCursor>
	                  ssd1306_WriteString((char*)rxBuf, Font_6x8, Black);
 80012d6:	4b19      	ldr	r3, [pc, #100]	@ (800133c <main+0x2ec>)
 80012d8:	2200      	movs	r2, #0
 80012da:	9200      	str	r2, [sp, #0]
 80012dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012de:	4811      	ldr	r0, [pc, #68]	@ (8001324 <main+0x2d4>)
 80012e0:	f000 ff0a 	bl	80020f8 <ssd1306_WriteString>
	                  ssd1306_UpdateScreen();
 80012e4:	f000 fdfa 	bl	8001edc <ssd1306_UpdateScreen>

	                  // inizio conteggio 5 secondi
	                  postResponseTick = HAL_GetTick();
 80012e8:	f001 f8cc 	bl	8002484 <HAL_GetTick>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a18      	ldr	r2, [pc, #96]	@ (8001350 <main+0x300>)
 80012f0:	6013      	str	r3, [r2, #0]
	                  system_state = STATE_POST_RESPONSE_WAIT;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <main+0x2e0>)
 80012f4:	2203      	movs	r2, #3
 80012f6:	701a      	strb	r2, [r3, #0]
	                  break;
 80012f8:	e010      	b.n	800131c <main+0x2cc>
	              }

	              case STATE_POST_RESPONSE_WAIT: {
	                  // Aspetto 5 secondi
	                  if ((HAL_GetTick() - postResponseTick) >= 5000) {
 80012fa:	f001 f8c3 	bl	8002484 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <main+0x300>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	f241 3287 	movw	r2, #4999	@ 0x1387
 800130a:	4293      	cmp	r3, r2
 800130c:	d905      	bls.n	800131a <main+0x2ca>
	                      system_state = STATE_NORMAL;
 800130e:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <main+0x2e0>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
	                  }
	                  break;
 8001314:	e001      	b.n	800131a <main+0x2ca>
	              }

	              default: {
	            	  break;
 8001316:	bf00      	nop
 8001318:	e6c9      	b.n	80010ae <main+0x5e>
	                  break;
 800131a:	bf00      	nop
	  if (rx_data_ready == 1){
 800131c:	e6c7      	b.n	80010ae <main+0x5e>
 800131e:	bf00      	nop
 8001320:	41f00000 	.word	0x41f00000
 8001324:	200004ac 	.word	0x200004ac
 8001328:	20000380 	.word	0x20000380
 800132c:	20000000 	.word	0x20000000
 8001330:	200004a8 	.word	0x200004a8
 8001334:	20000204 	.word	0x20000204
 8001338:	08009ae0 	.word	0x08009ae0
 800133c:	0800a898 	.word	0x0800a898
 8001340:	08009aec 	.word	0x08009aec
 8001344:	0800a8a4 	.word	0x0800a8a4
 8001348:	08009b18 	.word	0x08009b18
 800134c:	08009b04 	.word	0x08009b04
 8001350:	200004b4 	.word	0x200004b4

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b094      	sub	sp, #80	@ 0x50
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0318 	add.w	r3, r7, #24
 800135e:	2238      	movs	r2, #56	@ 0x38
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f006 fafb 	bl	800795e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001376:	2000      	movs	r0, #0
 8001378:	f002 fbcc 	bl	8003b14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800137c:	2302      	movs	r3, #2
 800137e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001380:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001386:	2340      	movs	r3, #64	@ 0x40
 8001388:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138a:	2302      	movs	r3, #2
 800138c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800138e:	2302      	movs	r3, #2
 8001390:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001392:	2304      	movs	r3, #4
 8001394:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001396:	2355      	movs	r3, #85	@ 0x55
 8001398:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800139a:	2302      	movs	r3, #2
 800139c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800139e:	2302      	movs	r3, #2
 80013a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013a2:	2302      	movs	r3, #2
 80013a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a6:	f107 0318 	add.w	r3, r7, #24
 80013aa:	4618      	mov	r0, r3
 80013ac:	f002 fc66 	bl	8003c7c <HAL_RCC_OscConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013b6:	f000 f9cf 	bl	8001758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ba:	230f      	movs	r3, #15
 80013bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013be:	2303      	movs	r3, #3
 80013c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2104      	movs	r1, #4
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 ff64 	bl	80042a0 <HAL_RCC_ClockConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013de:	f000 f9bb 	bl	8001758 <Error_Handler>
  }
}
 80013e2:	bf00      	nop
 80013e4:	3750      	adds	r7, #80	@ 0x50
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <MX_I2C1_Init+0x74>)
 80013f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001464 <MX_I2C1_Init+0x78>)
 80013f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 80013f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <MX_I2C1_Init+0x74>)
 80013f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001468 <MX_I2C1_Init+0x7c>)
 80013fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013fc:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <MX_I2C1_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001402:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <MX_I2C1_Init+0x74>)
 8001404:	2201      	movs	r2, #1
 8001406:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001408:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <MX_I2C1_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800140e:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <MX_I2C1_Init+0x74>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001414:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <MX_I2C1_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800141a:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <MX_I2C1_Init+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001420:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <MX_I2C1_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001426:	480e      	ldr	r0, [pc, #56]	@ (8001460 <MX_I2C1_Init+0x74>)
 8001428:	f001 fc24 	bl	8002c74 <HAL_I2C_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001432:	f000 f991 	bl	8001758 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001436:	2100      	movs	r1, #0
 8001438:	4809      	ldr	r0, [pc, #36]	@ (8001460 <MX_I2C1_Init+0x74>)
 800143a:	f002 fad3 	bl	80039e4 <HAL_I2CEx_ConfigAnalogFilter>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001444:	f000 f988 	bl	8001758 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001448:	2100      	movs	r1, #0
 800144a:	4805      	ldr	r0, [pc, #20]	@ (8001460 <MX_I2C1_Init+0x74>)
 800144c:	f002 fb15 	bl	8003a7a <HAL_I2CEx_ConfigDigitalFilter>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001456:	f000 f97f 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000204 	.word	0x20000204
 8001464:	40005400 	.word	0x40005400
 8001468:	40b285c2 	.word	0x40b285c2

0800146c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001470:	4b20      	ldr	r3, [pc, #128]	@ (80014f4 <MX_LPUART1_UART_Init+0x88>)
 8001472:	4a21      	ldr	r2, [pc, #132]	@ (80014f8 <MX_LPUART1_UART_Init+0x8c>)
 8001474:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001476:	4b1f      	ldr	r3, [pc, #124]	@ (80014f4 <MX_LPUART1_UART_Init+0x88>)
 8001478:	4a20      	ldr	r2, [pc, #128]	@ (80014fc <MX_LPUART1_UART_Init+0x90>)
 800147a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800147c:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <MX_LPUART1_UART_Init+0x88>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001482:	4b1c      	ldr	r3, [pc, #112]	@ (80014f4 <MX_LPUART1_UART_Init+0x88>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001488:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <MX_LPUART1_UART_Init+0x88>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800148e:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <MX_LPUART1_UART_Init+0x88>)
 8001490:	220c      	movs	r2, #12
 8001492:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001494:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <MX_LPUART1_UART_Init+0x88>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800149a:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <MX_LPUART1_UART_Init+0x88>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <MX_LPUART1_UART_Init+0x88>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a6:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <MX_LPUART1_UART_Init+0x88>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80014ac:	4811      	ldr	r0, [pc, #68]	@ (80014f4 <MX_LPUART1_UART_Init+0x88>)
 80014ae:	f003 fb61 	bl	8004b74 <HAL_UART_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80014b8:	f000 f94e 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014bc:	2100      	movs	r1, #0
 80014be:	480d      	ldr	r0, [pc, #52]	@ (80014f4 <MX_LPUART1_UART_Init+0x88>)
 80014c0:	f005 fbd7 	bl	8006c72 <HAL_UARTEx_SetTxFifoThreshold>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80014ca:	f000 f945 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ce:	2100      	movs	r1, #0
 80014d0:	4808      	ldr	r0, [pc, #32]	@ (80014f4 <MX_LPUART1_UART_Init+0x88>)
 80014d2:	f005 fc0c 	bl	8006cee <HAL_UARTEx_SetRxFifoThreshold>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80014dc:	f000 f93c 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80014e0:	4804      	ldr	r0, [pc, #16]	@ (80014f4 <MX_LPUART1_UART_Init+0x88>)
 80014e2:	f005 fb8d 	bl	8006c00 <HAL_UARTEx_DisableFifoMode>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80014ec:	f000 f934 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000258 	.word	0x20000258
 80014f8:	40008000 	.word	0x40008000
 80014fc:	00033324 	.word	0x00033324

08001500 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001504:	4b22      	ldr	r3, [pc, #136]	@ (8001590 <MX_UART5_Init+0x90>)
 8001506:	4a23      	ldr	r2, [pc, #140]	@ (8001594 <MX_UART5_Init+0x94>)
 8001508:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800150a:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <MX_UART5_Init+0x90>)
 800150c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001510:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <MX_UART5_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001518:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <MX_UART5_Init+0x90>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800151e:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <MX_UART5_Init+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001524:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <MX_UART5_Init+0x90>)
 8001526:	220c      	movs	r2, #12
 8001528:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152a:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <MX_UART5_Init+0x90>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001530:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <MX_UART5_Init+0x90>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001536:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <MX_UART5_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800153c:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <MX_UART5_Init+0x90>)
 800153e:	2200      	movs	r2, #0
 8001540:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001542:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <MX_UART5_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001548:	4811      	ldr	r0, [pc, #68]	@ (8001590 <MX_UART5_Init+0x90>)
 800154a:	f003 fb13 	bl	8004b74 <HAL_UART_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001554:	f000 f900 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001558:	2100      	movs	r1, #0
 800155a:	480d      	ldr	r0, [pc, #52]	@ (8001590 <MX_UART5_Init+0x90>)
 800155c:	f005 fb89 	bl	8006c72 <HAL_UARTEx_SetTxFifoThreshold>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001566:	f000 f8f7 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156a:	2100      	movs	r1, #0
 800156c:	4808      	ldr	r0, [pc, #32]	@ (8001590 <MX_UART5_Init+0x90>)
 800156e:	f005 fbbe 	bl	8006cee <HAL_UARTEx_SetRxFifoThreshold>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001578:	f000 f8ee 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	@ (8001590 <MX_UART5_Init+0x90>)
 800157e:	f005 fb3f 	bl	8006c00 <HAL_UARTEx_DisableFifoMode>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001588:	f000 f8e6 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200002ec 	.word	0x200002ec
 8001594:	40005000 	.word	0x40005000

08001598 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800159c:	4b22      	ldr	r3, [pc, #136]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 800159e:	4a23      	ldr	r2, [pc, #140]	@ (800162c <MX_USART1_UART_Init+0x94>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015a2:	4b21      	ldr	r3, [pc, #132]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ce:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015da:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015dc:	2200      	movs	r2, #0
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015e0:	4811      	ldr	r0, [pc, #68]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015e2:	f003 fac7 	bl	8004b74 <HAL_UART_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015ec:	f000 f8b4 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f0:	2100      	movs	r1, #0
 80015f2:	480d      	ldr	r0, [pc, #52]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015f4:	f005 fb3d 	bl	8006c72 <HAL_UARTEx_SetTxFifoThreshold>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015fe:	f000 f8ab 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001602:	2100      	movs	r1, #0
 8001604:	4808      	ldr	r0, [pc, #32]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 8001606:	f005 fb72 	bl	8006cee <HAL_UARTEx_SetRxFifoThreshold>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001610:	f000 f8a2 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 8001616:	f005 faf3 	bl	8006c00 <HAL_UARTEx_DisableFifoMode>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001620:	f000 f89a 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000380 	.word	0x20000380
 800162c:	40013800 	.word	0x40013800

08001630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001634:	4b22      	ldr	r3, [pc, #136]	@ (80016c0 <MX_USART2_UART_Init+0x90>)
 8001636:	4a23      	ldr	r2, [pc, #140]	@ (80016c4 <MX_USART2_UART_Init+0x94>)
 8001638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800163a:	4b21      	ldr	r3, [pc, #132]	@ (80016c0 <MX_USART2_UART_Init+0x90>)
 800163c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <MX_USART2_UART_Init+0x90>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <MX_USART2_UART_Init+0x90>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800164e:	4b1c      	ldr	r3, [pc, #112]	@ (80016c0 <MX_USART2_UART_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <MX_USART2_UART_Init+0x90>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <MX_USART2_UART_Init+0x90>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <MX_USART2_UART_Init+0x90>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001666:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <MX_USART2_UART_Init+0x90>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800166c:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <MX_USART2_UART_Init+0x90>)
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001672:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <MX_USART2_UART_Init+0x90>)
 8001674:	2200      	movs	r2, #0
 8001676:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001678:	4811      	ldr	r0, [pc, #68]	@ (80016c0 <MX_USART2_UART_Init+0x90>)
 800167a:	f003 fa7b 	bl	8004b74 <HAL_UART_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001684:	f000 f868 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001688:	2100      	movs	r1, #0
 800168a:	480d      	ldr	r0, [pc, #52]	@ (80016c0 <MX_USART2_UART_Init+0x90>)
 800168c:	f005 faf1 	bl	8006c72 <HAL_UARTEx_SetTxFifoThreshold>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001696:	f000 f85f 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800169a:	2100      	movs	r1, #0
 800169c:	4808      	ldr	r0, [pc, #32]	@ (80016c0 <MX_USART2_UART_Init+0x90>)
 800169e:	f005 fb26 	bl	8006cee <HAL_UARTEx_SetRxFifoThreshold>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016a8:	f000 f856 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016ac:	4804      	ldr	r0, [pc, #16]	@ (80016c0 <MX_USART2_UART_Init+0x90>)
 80016ae:	f005 faa7 	bl	8006c00 <HAL_UARTEx_DisableFifoMode>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80016b8:	f000 f84e 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000414 	.word	0x20000414
 80016c4:	40004400 	.word	0x40004400

080016c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	4b21      	ldr	r3, [pc, #132]	@ (8001754 <MX_GPIO_Init+0x8c>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	4a20      	ldr	r2, [pc, #128]	@ (8001754 <MX_GPIO_Init+0x8c>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016da:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <MX_GPIO_Init+0x8c>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001754 <MX_GPIO_Init+0x8c>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001754 <MX_GPIO_Init+0x8c>)
 80016ec:	f043 0320 	orr.w	r3, r3, #32
 80016f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016f2:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <MX_GPIO_Init+0x8c>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f6:	f003 0320 	and.w	r3, r3, #32
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <MX_GPIO_Init+0x8c>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001702:	4a14      	ldr	r2, [pc, #80]	@ (8001754 <MX_GPIO_Init+0x8c>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800170a:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <MX_GPIO_Init+0x8c>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001716:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <MX_GPIO_Init+0x8c>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	4a0e      	ldr	r2, [pc, #56]	@ (8001754 <MX_GPIO_Init+0x8c>)
 800171c:	f043 0308 	orr.w	r3, r3, #8
 8001720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001722:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <MX_GPIO_Init+0x8c>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <MX_GPIO_Init+0x8c>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001732:	4a08      	ldr	r2, [pc, #32]	@ (8001754 <MX_GPIO_Init+0x8c>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <MX_GPIO_Init+0x8c>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001746:	bf00      	nop
 8001748:	371c      	adds	r7, #28
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <Error_Handler+0x8>

08001764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176a:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <HAL_MspInit+0x44>)
 800176c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800176e:	4a0e      	ldr	r2, [pc, #56]	@ (80017a8 <HAL_MspInit+0x44>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6613      	str	r3, [r2, #96]	@ 0x60
 8001776:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <HAL_MspInit+0x44>)
 8001778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_MspInit+0x44>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001786:	4a08      	ldr	r2, [pc, #32]	@ (80017a8 <HAL_MspInit+0x44>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800178c:	6593      	str	r3, [r2, #88]	@ 0x58
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_MspInit+0x44>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800179a:	f002 fa5f 	bl	8003c5c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000

080017ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b09e      	sub	sp, #120	@ 0x78
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	2254      	movs	r2, #84	@ 0x54
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f006 f8c6 	bl	800795e <memset>
  if(hi2c->Instance==I2C1)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001854 <HAL_I2C_MspInit+0xa8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d136      	bne.n	800184a <HAL_I2C_MspInit+0x9e>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017dc:	2340      	movs	r3, #64	@ 0x40
 80017de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	4618      	mov	r0, r3
 80017ea:	f002 ff75 	bl	80046d8 <HAL_RCCEx_PeriphCLKConfig>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017f4:	f7ff ffb0 	bl	8001758 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f8:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <HAL_I2C_MspInit+0xac>)
 80017fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fc:	4a16      	ldr	r2, [pc, #88]	@ (8001858 <HAL_I2C_MspInit+0xac>)
 80017fe:	f043 0302 	orr.w	r3, r3, #2
 8001802:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001804:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <HAL_I2C_MspInit+0xac>)
 8001806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001810:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001814:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001816:	2312      	movs	r3, #18
 8001818:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001822:	2304      	movs	r3, #4
 8001824:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001826:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800182a:	4619      	mov	r1, r3
 800182c:	480b      	ldr	r0, [pc, #44]	@ (800185c <HAL_I2C_MspInit+0xb0>)
 800182e:	f001 f887 	bl	8002940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <HAL_I2C_MspInit+0xac>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001836:	4a08      	ldr	r2, [pc, #32]	@ (8001858 <HAL_I2C_MspInit+0xac>)
 8001838:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800183c:	6593      	str	r3, [r2, #88]	@ 0x58
 800183e:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_I2C_MspInit+0xac>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001842:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800184a:	bf00      	nop
 800184c:	3778      	adds	r7, #120	@ 0x78
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40005400 	.word	0x40005400
 8001858:	40021000 	.word	0x40021000
 800185c:	48000400 	.word	0x48000400

08001860 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0a6      	sub	sp, #152	@ 0x98
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001878:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800187c:	2254      	movs	r2, #84	@ 0x54
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f006 f86c 	bl	800795e <memset>
  if(huart->Instance==LPUART1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a9d      	ldr	r2, [pc, #628]	@ (8001b00 <HAL_UART_MspInit+0x2a0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d13b      	bne.n	8001908 <HAL_UART_MspInit+0xa8>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001890:	2320      	movs	r3, #32
 8001892:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001894:	2300      	movs	r3, #0
 8001896:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001898:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800189c:	4618      	mov	r0, r3
 800189e:	f002 ff1b 	bl	80046d8 <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018a8:	f7ff ff56 	bl	8001758 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80018ac:	4b95      	ldr	r3, [pc, #596]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 80018ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b0:	4a94      	ldr	r2, [pc, #592]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80018b8:	4b92      	ldr	r3, [pc, #584]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 80018ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c8:	4a8e      	ldr	r2, [pc, #568]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018dc:	2303      	movs	r3, #3
 80018de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80018f4:	2308      	movs	r3, #8
 80018f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fa:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80018fe:	4619      	mov	r1, r3
 8001900:	4881      	ldr	r0, [pc, #516]	@ (8001b08 <HAL_UART_MspInit+0x2a8>)
 8001902:	f001 f81d 	bl	8002940 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001906:	e0f6      	b.n	8001af6 <HAL_UART_MspInit+0x296>
  else if(huart->Instance==UART5)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a7f      	ldr	r2, [pc, #508]	@ (8001b0c <HAL_UART_MspInit+0x2ac>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d165      	bne.n	80019de <HAL_UART_MspInit+0x17e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001912:	2310      	movs	r3, #16
 8001914:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001916:	2300      	movs	r3, #0
 8001918:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800191a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800191e:	4618      	mov	r0, r3
 8001920:	f002 feda 	bl	80046d8 <HAL_RCCEx_PeriphCLKConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800192a:	f7ff ff15 	bl	8001758 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800192e:	4b75      	ldr	r3, [pc, #468]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001932:	4a74      	ldr	r2, [pc, #464]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 8001934:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001938:	6593      	str	r3, [r2, #88]	@ 0x58
 800193a:	4b72      	ldr	r3, [pc, #456]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001942:	627b      	str	r3, [r7, #36]	@ 0x24
 8001944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	4b6f      	ldr	r3, [pc, #444]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194a:	4a6e      	ldr	r2, [pc, #440]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001952:	4b6c      	ldr	r3, [pc, #432]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	623b      	str	r3, [r7, #32]
 800195c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800195e:	4b69      	ldr	r3, [pc, #420]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001962:	4a68      	ldr	r2, [pc, #416]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 8001964:	f043 0308 	orr.w	r3, r3, #8
 8001968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800196a:	4b66      	ldr	r3, [pc, #408]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001976:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001990:	2305      	movs	r3, #5
 8001992:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001996:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800199a:	4619      	mov	r1, r3
 800199c:	485a      	ldr	r0, [pc, #360]	@ (8001b08 <HAL_UART_MspInit+0x2a8>)
 800199e:	f000 ffcf 	bl	8002940 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019a2:	2304      	movs	r3, #4
 80019a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80019ba:	2305      	movs	r3, #5
 80019bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80019c4:	4619      	mov	r1, r3
 80019c6:	4852      	ldr	r0, [pc, #328]	@ (8001b10 <HAL_UART_MspInit+0x2b0>)
 80019c8:	f000 ffba 	bl	8002940 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2100      	movs	r1, #0
 80019d0:	2035      	movs	r0, #53	@ 0x35
 80019d2:	f000 fe60 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80019d6:	2035      	movs	r0, #53	@ 0x35
 80019d8:	f000 fe77 	bl	80026ca <HAL_NVIC_EnableIRQ>
}
 80019dc:	e08b      	b.n	8001af6 <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a4c      	ldr	r2, [pc, #304]	@ (8001b14 <HAL_UART_MspInit+0x2b4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d145      	bne.n	8001a74 <HAL_UART_MspInit+0x214>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019e8:	2301      	movs	r3, #1
 80019ea:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019ec:	2300      	movs	r3, #0
 80019ee:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019f4:	4618      	mov	r0, r3
 80019f6:	f002 fe6f 	bl	80046d8 <HAL_RCCEx_PeriphCLKConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8001a00:	f7ff feaa 	bl	8001758 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a04:	4b3f      	ldr	r3, [pc, #252]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 8001a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a08:	4a3e      	ldr	r2, [pc, #248]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 8001a0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a10:	4b3c      	ldr	r3, [pc, #240]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 8001a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	4b39      	ldr	r3, [pc, #228]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a20:	4a38      	ldr	r2, [pc, #224]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a28:	4b36      	ldr	r3, [pc, #216]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a34:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a4e:	2307      	movs	r3, #7
 8001a50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a5e:	f000 ff6f 	bl	8002940 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	2025      	movs	r0, #37	@ 0x25
 8001a68:	f000 fe15 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a6c:	2025      	movs	r0, #37	@ 0x25
 8001a6e:	f000 fe2c 	bl	80026ca <HAL_NVIC_EnableIRQ>
}
 8001a72:	e040      	b.n	8001af6 <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a27      	ldr	r2, [pc, #156]	@ (8001b18 <HAL_UART_MspInit+0x2b8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d13b      	bne.n	8001af6 <HAL_UART_MspInit+0x296>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a82:	2300      	movs	r3, #0
 8001a84:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 fe24 	bl	80046d8 <HAL_RCCEx_PeriphCLKConfig>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_UART_MspInit+0x23a>
      Error_Handler();
 8001a96:	f7ff fe5f 	bl	8001758 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9e:	4a19      	ldr	r2, [pc, #100]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 8001aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aa6:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	4a13      	ldr	r2, [pc, #76]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001abe:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <HAL_UART_MspInit+0x2a4>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aca:	230c      	movs	r3, #12
 8001acc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001aec:	4619      	mov	r1, r3
 8001aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001af2:	f000 ff25 	bl	8002940 <HAL_GPIO_Init>
}
 8001af6:	bf00      	nop
 8001af8:	3798      	adds	r7, #152	@ 0x98
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40008000 	.word	0x40008000
 8001b04:	40021000 	.word	0x40021000
 8001b08:	48000800 	.word	0x48000800
 8001b0c:	40005000 	.word	0x40005000
 8001b10:	48000c00 	.word	0x48000c00
 8001b14:	40013800 	.word	0x40013800
 8001b18:	40004400 	.word	0x40004400

08001b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <NMI_Handler+0x4>

08001b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <MemManage_Handler+0x4>

08001b34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <BusFault_Handler+0x4>

08001b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <UsageFault_Handler+0x4>

08001b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b72:	f000 fc75 	bl	8002460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b80:	4802      	ldr	r0, [pc, #8]	@ (8001b8c <USART1_IRQHandler+0x10>)
 8001b82:	f003 f921 	bl	8004dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000380 	.word	0x20000380

08001b90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001b94:	2000      	movs	r0, #0
 8001b96:	f000 fbed 	bl	8002374 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001ba4:	4802      	ldr	r0, [pc, #8]	@ (8001bb0 <UART5_IRQHandler+0x10>)
 8001ba6:	f003 f90f 	bl	8004dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200002ec 	.word	0x200002ec

08001bb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return 1;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_kill>:

int _kill(int pid, int sig)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bce:	f005 ff19 	bl	8007a04 <__errno>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2216      	movs	r2, #22
 8001bd6:	601a      	str	r2, [r3, #0]
  return -1;
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_exit>:

void _exit (int status)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bec:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ffe7 	bl	8001bc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bf6:	bf00      	nop
 8001bf8:	e7fd      	b.n	8001bf6 <_exit+0x12>

08001bfa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	e00a      	b.n	8001c22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c0c:	f3af 8000 	nop.w
 8001c10:	4601      	mov	r1, r0
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	60ba      	str	r2, [r7, #8]
 8001c18:	b2ca      	uxtb	r2, r1
 8001c1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	dbf0      	blt.n	8001c0c <_read+0x12>
  }

  return len;
 8001c2a:	687b      	ldr	r3, [r7, #4]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	e009      	b.n	8001c5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	60ba      	str	r2, [r7, #8]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	dbf1      	blt.n	8001c46 <_write+0x12>
  }
  return len;
 8001c62:	687b      	ldr	r3, [r7, #4]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_close>:

int _close(int file)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c94:	605a      	str	r2, [r3, #4]
  return 0;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <_isatty>:

int _isatty(int file)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cac:	2301      	movs	r3, #1
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cdc:	4a14      	ldr	r2, [pc, #80]	@ (8001d30 <_sbrk+0x5c>)
 8001cde:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <_sbrk+0x60>)
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	@ (8001d38 <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <_sbrk+0x64>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	@ (8001d3c <_sbrk+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d207      	bcs.n	8001d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d04:	f005 fe7e 	bl	8007a04 <__errno>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	e009      	b.n	8001d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d14:	4b08      	ldr	r3, [pc, #32]	@ (8001d38 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1a:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a05      	ldr	r2, [pc, #20]	@ (8001d38 <_sbrk+0x64>)
 8001d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20020000 	.word	0x20020000
 8001d34:	00000400 	.word	0x00000400
 8001d38:	200004b8 	.word	0x200004b8
 8001d3c:	20000a20 	.word	0x20000a20

08001d40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d44:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <SystemInit+0x20>)
 8001d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d4a:	4a05      	ldr	r2, [pc, #20]	@ (8001d60 <SystemInit+0x20>)
 8001d4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af04      	add	r7, sp, #16
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	9302      	str	r3, [sp, #8]
 8001d84:	2301      	movs	r3, #1
 8001d86:	9301      	str	r3, [sp, #4]
 8001d88:	1dfb      	adds	r3, r7, #7
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2178      	movs	r1, #120	@ 0x78
 8001d92:	4803      	ldr	r0, [pc, #12]	@ (8001da0 <ssd1306_WriteCommand+0x2c>)
 8001d94:	f001 fa18 	bl	80031c8 <HAL_I2C_Mem_Write>
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000204 	.word	0x20000204

08001da4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af04      	add	r7, sp, #16
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	f04f 32ff 	mov.w	r2, #4294967295
 8001db6:	9202      	str	r2, [sp, #8]
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	2240      	movs	r2, #64	@ 0x40
 8001dc2:	2178      	movs	r1, #120	@ 0x78
 8001dc4:	4803      	ldr	r0, [pc, #12]	@ (8001dd4 <ssd1306_WriteData+0x30>)
 8001dc6:	f001 f9ff 	bl	80031c8 <HAL_I2C_Mem_Write>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000204 	.word	0x20000204

08001dd8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001ddc:	f7ff ffc2 	bl	8001d64 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001de0:	2064      	movs	r0, #100	@ 0x64
 8001de2:	f000 fb5b 	bl	800249c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001de6:	2000      	movs	r0, #0
 8001de8:	f000 f9d8 	bl	800219c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001dec:	2020      	movs	r0, #32
 8001dee:	f7ff ffc1 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001df2:	2000      	movs	r0, #0
 8001df4:	f7ff ffbe 	bl	8001d74 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001df8:	20b0      	movs	r0, #176	@ 0xb0
 8001dfa:	f7ff ffbb 	bl	8001d74 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001dfe:	20c8      	movs	r0, #200	@ 0xc8
 8001e00:	f7ff ffb8 	bl	8001d74 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff ffb5 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001e0a:	2010      	movs	r0, #16
 8001e0c:	f7ff ffb2 	bl	8001d74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001e10:	2040      	movs	r0, #64	@ 0x40
 8001e12:	f7ff ffaf 	bl	8001d74 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001e16:	20ff      	movs	r0, #255	@ 0xff
 8001e18:	f000 f9ac 	bl	8002174 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001e1c:	20a1      	movs	r0, #161	@ 0xa1
 8001e1e:	f7ff ffa9 	bl	8001d74 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001e22:	20a6      	movs	r0, #166	@ 0xa6
 8001e24:	f7ff ffa6 	bl	8001d74 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001e28:	20a8      	movs	r0, #168	@ 0xa8
 8001e2a:	f7ff ffa3 	bl	8001d74 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001e2e:	203f      	movs	r0, #63	@ 0x3f
 8001e30:	f7ff ffa0 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001e34:	20a4      	movs	r0, #164	@ 0xa4
 8001e36:	f7ff ff9d 	bl	8001d74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001e3a:	20d3      	movs	r0, #211	@ 0xd3
 8001e3c:	f7ff ff9a 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001e40:	2000      	movs	r0, #0
 8001e42:	f7ff ff97 	bl	8001d74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001e46:	20d5      	movs	r0, #213	@ 0xd5
 8001e48:	f7ff ff94 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001e4c:	20f0      	movs	r0, #240	@ 0xf0
 8001e4e:	f7ff ff91 	bl	8001d74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001e52:	20d9      	movs	r0, #217	@ 0xd9
 8001e54:	f7ff ff8e 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001e58:	2022      	movs	r0, #34	@ 0x22
 8001e5a:	f7ff ff8b 	bl	8001d74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001e5e:	20da      	movs	r0, #218	@ 0xda
 8001e60:	f7ff ff88 	bl	8001d74 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001e64:	2012      	movs	r0, #18
 8001e66:	f7ff ff85 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001e6a:	20db      	movs	r0, #219	@ 0xdb
 8001e6c:	f7ff ff82 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001e70:	2020      	movs	r0, #32
 8001e72:	f7ff ff7f 	bl	8001d74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001e76:	208d      	movs	r0, #141	@ 0x8d
 8001e78:	f7ff ff7c 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001e7c:	2014      	movs	r0, #20
 8001e7e:	f7ff ff79 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001e82:	2001      	movs	r0, #1
 8001e84:	f000 f98a 	bl	800219c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f000 f80f 	bl	8001eac <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001e8e:	f000 f825 	bl	8001edc <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001e92:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <ssd1306_Init+0xd0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <ssd1306_Init+0xd0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001e9e:	4b02      	ldr	r3, [pc, #8]	@ (8001ea8 <ssd1306_Init+0xd0>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	711a      	strb	r2, [r3, #4]
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200008bc 	.word	0x200008bc

08001eac <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <ssd1306_Fill+0x14>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e000      	b.n	8001ec2 <ssd1306_Fill+0x16>
 8001ec0:	23ff      	movs	r3, #255	@ 0xff
 8001ec2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4803      	ldr	r0, [pc, #12]	@ (8001ed8 <ssd1306_Fill+0x2c>)
 8001eca:	f005 fd48 	bl	800795e <memset>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200004bc 	.word	0x200004bc

08001edc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	71fb      	strb	r3, [r7, #7]
 8001ee6:	e016      	b.n	8001f16 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	3b50      	subs	r3, #80	@ 0x50
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff40 	bl	8001d74 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff ff3d 	bl	8001d74 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001efa:	2010      	movs	r0, #16
 8001efc:	f7ff ff3a 	bl	8001d74 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	01db      	lsls	r3, r3, #7
 8001f04:	4a08      	ldr	r2, [pc, #32]	@ (8001f28 <ssd1306_UpdateScreen+0x4c>)
 8001f06:	4413      	add	r3, r2
 8001f08:	2180      	movs	r1, #128	@ 0x80
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff ff4a 	bl	8001da4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	3301      	adds	r3, #1
 8001f14:	71fb      	strb	r3, [r7, #7]
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	2b07      	cmp	r3, #7
 8001f1a:	d9e5      	bls.n	8001ee8 <ssd1306_UpdateScreen+0xc>
    }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200004bc 	.word	0x200004bc

08001f2c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
 8001f36:	460b      	mov	r3, r1
 8001f38:	71bb      	strb	r3, [r7, #6]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db3d      	blt.n	8001fc2 <ssd1306_DrawPixel+0x96>
 8001f46:	79bb      	ldrb	r3, [r7, #6]
 8001f48:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f4a:	d83a      	bhi.n	8001fc2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8001f4c:	797b      	ldrb	r3, [r7, #5]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d11a      	bne.n	8001f88 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001f52:	79fa      	ldrb	r2, [r7, #7]
 8001f54:	79bb      	ldrb	r3, [r7, #6]
 8001f56:	08db      	lsrs	r3, r3, #3
 8001f58:	b2d8      	uxtb	r0, r3
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	01db      	lsls	r3, r3, #7
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd0 <ssd1306_DrawPixel+0xa4>)
 8001f62:	5cd3      	ldrb	r3, [r2, r3]
 8001f64:	b25a      	sxtb	r2, r3
 8001f66:	79bb      	ldrb	r3, [r7, #6]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	b25b      	sxtb	r3, r3
 8001f74:	4313      	orrs	r3, r2
 8001f76:	b259      	sxtb	r1, r3
 8001f78:	79fa      	ldrb	r2, [r7, #7]
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	01db      	lsls	r3, r3, #7
 8001f7e:	4413      	add	r3, r2
 8001f80:	b2c9      	uxtb	r1, r1
 8001f82:	4a13      	ldr	r2, [pc, #76]	@ (8001fd0 <ssd1306_DrawPixel+0xa4>)
 8001f84:	54d1      	strb	r1, [r2, r3]
 8001f86:	e01d      	b.n	8001fc4 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f88:	79fa      	ldrb	r2, [r7, #7]
 8001f8a:	79bb      	ldrb	r3, [r7, #6]
 8001f8c:	08db      	lsrs	r3, r3, #3
 8001f8e:	b2d8      	uxtb	r0, r3
 8001f90:	4603      	mov	r3, r0
 8001f92:	01db      	lsls	r3, r3, #7
 8001f94:	4413      	add	r3, r2
 8001f96:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd0 <ssd1306_DrawPixel+0xa4>)
 8001f98:	5cd3      	ldrb	r3, [r2, r3]
 8001f9a:	b25a      	sxtb	r2, r3
 8001f9c:	79bb      	ldrb	r3, [r7, #6]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	b25b      	sxtb	r3, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	b25b      	sxtb	r3, r3
 8001fae:	4013      	ands	r3, r2
 8001fb0:	b259      	sxtb	r1, r3
 8001fb2:	79fa      	ldrb	r2, [r7, #7]
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	01db      	lsls	r3, r3, #7
 8001fb8:	4413      	add	r3, r2
 8001fba:	b2c9      	uxtb	r1, r1
 8001fbc:	4a04      	ldr	r2, [pc, #16]	@ (8001fd0 <ssd1306_DrawPixel+0xa4>)
 8001fbe:	54d1      	strb	r1, [r2, r3]
 8001fc0:	e000      	b.n	8001fc4 <ssd1306_DrawPixel+0x98>
        return;
 8001fc2:	bf00      	nop
    }
}
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	200004bc 	.word	0x200004bc

08001fd4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b089      	sub	sp, #36	@ 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4604      	mov	r4, r0
 8001fdc:	4638      	mov	r0, r7
 8001fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001fe2:	4623      	mov	r3, r4
 8001fe4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	2b1f      	cmp	r3, #31
 8001fea:	d902      	bls.n	8001ff2 <ssd1306_WriteChar+0x1e>
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ff0:	d901      	bls.n	8001ff6 <ssd1306_WriteChar+0x22>
        return 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e079      	b.n	80020ea <ssd1306_WriteChar+0x116>

    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <ssd1306_WriteChar+0x34>
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	3b20      	subs	r3, #32
 8002002:	4413      	add	r3, r2
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	e000      	b.n	800200a <ssd1306_WriteChar+0x36>
 8002008:	783b      	ldrb	r3, [r7, #0]
 800200a:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800200c:	4b39      	ldr	r3, [pc, #228]	@ (80020f4 <ssd1306_WriteChar+0x120>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	7dfb      	ldrb	r3, [r7, #23]
 8002014:	4413      	add	r3, r2
 8002016:	2b80      	cmp	r3, #128	@ 0x80
 8002018:	dc06      	bgt.n	8002028 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800201a:	4b36      	ldr	r3, [pc, #216]	@ (80020f4 <ssd1306_WriteChar+0x120>)
 800201c:	885b      	ldrh	r3, [r3, #2]
 800201e:	461a      	mov	r2, r3
 8002020:	787b      	ldrb	r3, [r7, #1]
 8002022:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002024:	2b40      	cmp	r3, #64	@ 0x40
 8002026:	dd01      	ble.n	800202c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8002028:	2300      	movs	r3, #0
 800202a:	e05e      	b.n	80020ea <ssd1306_WriteChar+0x116>
    }

    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	e04d      	b.n	80020ce <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	3b20      	subs	r3, #32
 8002038:	7879      	ldrb	r1, [r7, #1]
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	4619      	mov	r1, r3
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	440b      	add	r3, r1
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	e036      	b.n	80020c0 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d013      	beq.n	800208a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002062:	4b24      	ldr	r3, [pc, #144]	@ (80020f4 <ssd1306_WriteChar+0x120>)
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	b2da      	uxtb	r2, r3
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	4413      	add	r3, r2
 800206e:	b2d8      	uxtb	r0, r3
 8002070:	4b20      	ldr	r3, [pc, #128]	@ (80020f4 <ssd1306_WriteChar+0x120>)
 8002072:	885b      	ldrh	r3, [r3, #2]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	4413      	add	r3, r2
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002082:	4619      	mov	r1, r3
 8002084:	f7ff ff52 	bl	8001f2c <ssd1306_DrawPixel>
 8002088:	e017      	b.n	80020ba <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800208a:	4b1a      	ldr	r3, [pc, #104]	@ (80020f4 <ssd1306_WriteChar+0x120>)
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	4413      	add	r3, r2
 8002096:	b2d8      	uxtb	r0, r3
 8002098:	4b16      	ldr	r3, [pc, #88]	@ (80020f4 <ssd1306_WriteChar+0x120>)
 800209a:	885b      	ldrh	r3, [r3, #2]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	b2d9      	uxtb	r1, r3
 80020a6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	bf0c      	ite	eq
 80020ae:	2301      	moveq	r3, #1
 80020b0:	2300      	movne	r3, #0
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	f7ff ff39 	bl	8001f2c <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	3301      	adds	r3, #1
 80020be:	61bb      	str	r3, [r7, #24]
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d3c4      	bcc.n	8002052 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	3301      	adds	r3, #1
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	787b      	ldrb	r3, [r7, #1]
 80020d0:	461a      	mov	r2, r3
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d3ac      	bcc.n	8002032 <ssd1306_WriteChar+0x5e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <ssd1306_WriteChar+0x120>)
 80020da:	881a      	ldrh	r2, [r3, #0]
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b03      	ldr	r3, [pc, #12]	@ (80020f4 <ssd1306_WriteChar+0x120>)
 80020e6:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	@ 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd90      	pop	{r4, r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200008bc 	.word	0x200008bc

080020f8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	4638      	mov	r0, r7
 8002102:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002106:	e013      	b.n	8002130 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	7818      	ldrb	r0, [r3, #0]
 800210c:	7e3b      	ldrb	r3, [r7, #24]
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	463b      	mov	r3, r7
 8002112:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002114:	f7ff ff5e 	bl	8001fd4 <ssd1306_WriteChar>
 8002118:	4603      	mov	r3, r0
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d002      	beq.n	800212a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	e008      	b.n	800213c <ssd1306_WriteString+0x44>
        }
        str++;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3301      	adds	r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e7      	bne.n	8002108 <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	781b      	ldrb	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	460a      	mov	r2, r1
 800214e:	71fb      	strb	r3, [r7, #7]
 8002150:	4613      	mov	r3, r2
 8002152:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	b29a      	uxth	r2, r3
 8002158:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <ssd1306_SetCursor+0x2c>)
 800215a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800215c:	79bb      	ldrb	r3, [r7, #6]
 800215e:	b29a      	uxth	r2, r3
 8002160:	4b03      	ldr	r3, [pc, #12]	@ (8002170 <ssd1306_SetCursor+0x2c>)
 8002162:	805a      	strh	r2, [r3, #2]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	200008bc 	.word	0x200008bc

08002174 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800217e:	2381      	movs	r3, #129	@ 0x81
 8002180:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fdf5 	bl	8001d74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fdf1 	bl	8001d74 <ssd1306_WriteCommand>
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80021ac:	23af      	movs	r3, #175	@ 0xaf
 80021ae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80021b0:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <ssd1306_SetDisplayOn+0x38>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	715a      	strb	r2, [r3, #5]
 80021b6:	e004      	b.n	80021c2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80021b8:	23ae      	movs	r3, #174	@ 0xae
 80021ba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80021bc:	4b05      	ldr	r3, [pc, #20]	@ (80021d4 <ssd1306_SetDisplayOn+0x38>)
 80021be:	2200      	movs	r2, #0
 80021c0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fdd5 	bl	8001d74 <ssd1306_WriteCommand>
}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200008bc 	.word	0x200008bc

080021d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021d8:	480d      	ldr	r0, [pc, #52]	@ (8002210 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021dc:	f7ff fdb0 	bl	8001d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e0:	480c      	ldr	r0, [pc, #48]	@ (8002214 <LoopForever+0x6>)
  ldr r1, =_edata
 80021e2:	490d      	ldr	r1, [pc, #52]	@ (8002218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021e4:	4a0d      	ldr	r2, [pc, #52]	@ (800221c <LoopForever+0xe>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80021e8:	e002      	b.n	80021f0 <LoopCopyDataInit>

080021ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ee:	3304      	adds	r3, #4

080021f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f4:	d3f9      	bcc.n	80021ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002224 <LoopForever+0x16>)
  movs r3, #0
 80021fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021fc:	e001      	b.n	8002202 <LoopFillZerobss>

080021fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002200:	3204      	adds	r2, #4

08002202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002204:	d3fb      	bcc.n	80021fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002206:	f005 fc03 	bl	8007a10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800220a:	f7fe ff21 	bl	8001050 <main>

0800220e <LoopForever>:

LoopForever:
    b LoopForever
 800220e:	e7fe      	b.n	800220e <LoopForever>
  ldr   r0, =_estack
 8002210:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002218:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800221c:	0800ac64 	.word	0x0800ac64
  ldr r2, =_sbss
 8002220:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002224:	20000a1c 	.word	0x20000a1c

08002228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002228:	e7fe      	b.n	8002228 <ADC1_2_IRQHandler>
	...

0800222c <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8002236:	4b16      	ldr	r3, [pc, #88]	@ (8002290 <BSP_LED_Init+0x64>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223a:	4a15      	ldr	r2, [pc, #84]	@ (8002290 <BSP_LED_Init+0x64>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002242:	4b13      	ldr	r3, [pc, #76]	@ (8002290 <BSP_LED_Init+0x64>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 800224e:	2320      	movs	r3, #32
 8002250:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002252:	2301      	movs	r3, #1
 8002254:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	4a0c      	ldr	r2, [pc, #48]	@ (8002294 <BSP_LED_Init+0x68>)
 8002262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002266:	f107 020c 	add.w	r2, r7, #12
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f000 fb67 	bl	8002940 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	4a07      	ldr	r2, [pc, #28]	@ (8002294 <BSP_LED_Init+0x68>)
 8002276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227a:	2120      	movs	r1, #32
 800227c:	2200      	movs	r2, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f000 fce0 	bl	8002c44 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3720      	adds	r7, #32
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	20000008 	.word	0x20000008

08002298 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	460a      	mov	r2, r1
 80022a2:	71fb      	strb	r3, [r7, #7]
 80022a4:	4613      	mov	r3, r2
 80022a6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80022a8:	4b2c      	ldr	r3, [pc, #176]	@ (800235c <BSP_PB_Init+0xc4>)
 80022aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ac:	4a2b      	ldr	r2, [pc, #172]	@ (800235c <BSP_PB_Init+0xc4>)
 80022ae:	f043 0304 	orr.w	r3, r3, #4
 80022b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022b4:	4b29      	ldr	r3, [pc, #164]	@ (800235c <BSP_PB_Init+0xc4>)
 80022b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 80022c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022c4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80022c6:	2302      	movs	r3, #2
 80022c8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ca:	2302      	movs	r3, #2
 80022cc:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80022ce:	79bb      	ldrb	r3, [r7, #6]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10c      	bne.n	80022ee <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	4a21      	ldr	r2, [pc, #132]	@ (8002360 <BSP_PB_Init+0xc8>)
 80022dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e0:	f107 020c 	add.w	r2, r7, #12
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fb2a 	bl	8002940 <HAL_GPIO_Init>
 80022ec:	e031      	b.n	8002352 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80022ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022f2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002360 <BSP_PB_Init+0xc8>)
 80022f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fc:	f107 020c 	add.w	r2, r7, #12
 8002300:	4611      	mov	r1, r2
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fb1c 	bl	8002940 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4a15      	ldr	r2, [pc, #84]	@ (8002364 <BSP_PB_Init+0xcc>)
 800230e:	441a      	add	r2, r3
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	4915      	ldr	r1, [pc, #84]	@ (8002368 <BSP_PB_Init+0xd0>)
 8002314:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002318:	4619      	mov	r1, r3
 800231a:	4610      	mov	r0, r2
 800231c:	f000 facc 	bl	80028b8 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4a0f      	ldr	r2, [pc, #60]	@ (8002364 <BSP_PB_Init+0xcc>)
 8002326:	1898      	adds	r0, r3, r2
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	4a10      	ldr	r2, [pc, #64]	@ (800236c <BSP_PB_Init+0xd4>)
 800232c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002330:	461a      	mov	r2, r3
 8002332:	2100      	movs	r1, #0
 8002334:	f000 faa3 	bl	800287e <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002338:	2028      	movs	r0, #40	@ 0x28
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4a0c      	ldr	r2, [pc, #48]	@ (8002370 <BSP_PB_Init+0xd8>)
 800233e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002342:	2200      	movs	r2, #0
 8002344:	4619      	mov	r1, r3
 8002346:	f000 f9a6 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800234a:	2328      	movs	r3, #40	@ 0x28
 800234c:	4618      	mov	r0, r3
 800234e:	f000 f9bc 	bl	80026ca <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3720      	adds	r7, #32
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	2000000c 	.word	0x2000000c
 8002364:	200008c4 	.word	0x200008c4
 8002368:	0800a8b0 	.word	0x0800a8b0
 800236c:	20000010 	.word	0x20000010
 8002370:	20000014 	.word	0x20000014

08002374 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4a04      	ldr	r2, [pc, #16]	@ (8002394 <BSP_PB_IRQHandler+0x20>)
 8002384:	4413      	add	r3, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f000 faaa 	bl	80028e0 <HAL_EXTI_IRQHandler>
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	200008c4 	.word	0x200008c4

08002398 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7ff fff0 	bl	8002398 <BSP_PB_Callback>
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c6:	2003      	movs	r0, #3
 80023c8:	f000 f95a 	bl	8002680 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023cc:	2000      	movs	r0, #0
 80023ce:	f000 f80d 	bl	80023ec <HAL_InitTick>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	71fb      	strb	r3, [r7, #7]
 80023dc:	e001      	b.n	80023e2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023de:	f7ff f9c1 	bl	8001764 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023e2:	79fb      	ldrb	r3, [r7, #7]

}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80023f8:	4b16      	ldr	r3, [pc, #88]	@ (8002454 <HAL_InitTick+0x68>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d022      	beq.n	8002446 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002400:	4b15      	ldr	r3, [pc, #84]	@ (8002458 <HAL_InitTick+0x6c>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b13      	ldr	r3, [pc, #76]	@ (8002454 <HAL_InitTick+0x68>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800240c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002410:	fbb2 f3f3 	udiv	r3, r2, r3
 8002414:	4618      	mov	r0, r3
 8002416:	f000 f966 	bl	80026e6 <HAL_SYSTICK_Config>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10f      	bne.n	8002440 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b0f      	cmp	r3, #15
 8002424:	d809      	bhi.n	800243a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002426:	2200      	movs	r2, #0
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	f04f 30ff 	mov.w	r0, #4294967295
 800242e:	f000 f932 	bl	8002696 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002432:	4a0a      	ldr	r2, [pc, #40]	@ (800245c <HAL_InitTick+0x70>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	e007      	b.n	800244a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	e004      	b.n	800244a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
 8002444:	e001      	b.n	800244a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800244a:	7bfb      	ldrb	r3, [r7, #15]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	2000001c 	.word	0x2000001c
 8002458:	20000004 	.word	0x20000004
 800245c:	20000018 	.word	0x20000018

08002460 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002464:	4b05      	ldr	r3, [pc, #20]	@ (800247c <HAL_IncTick+0x1c>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <HAL_IncTick+0x20>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4413      	add	r3, r2
 800246e:	4a03      	ldr	r2, [pc, #12]	@ (800247c <HAL_IncTick+0x1c>)
 8002470:	6013      	str	r3, [r2, #0]
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	200008cc 	.word	0x200008cc
 8002480:	2000001c 	.word	0x2000001c

08002484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return uwTick;
 8002488:	4b03      	ldr	r3, [pc, #12]	@ (8002498 <HAL_GetTick+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	200008cc 	.word	0x200008cc

0800249c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a4:	f7ff ffee 	bl	8002484 <HAL_GetTick>
 80024a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b4:	d004      	beq.n	80024c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80024b6:	4b09      	ldr	r3, [pc, #36]	@ (80024dc <HAL_Delay+0x40>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4413      	add	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024c0:	bf00      	nop
 80024c2:	f7ff ffdf 	bl	8002484 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d8f7      	bhi.n	80024c2 <HAL_Delay+0x26>
  {
  }
}
 80024d2:	bf00      	nop
 80024d4:	bf00      	nop
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	2000001c 	.word	0x2000001c

080024e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002524 <__NVIC_SetPriorityGrouping+0x44>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024fc:	4013      	ands	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002508:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800250c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002512:	4a04      	ldr	r2, [pc, #16]	@ (8002524 <__NVIC_SetPriorityGrouping+0x44>)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	60d3      	str	r3, [r2, #12]
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800252c:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <__NVIC_GetPriorityGrouping+0x18>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	f003 0307 	and.w	r3, r3, #7
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	2b00      	cmp	r3, #0
 8002554:	db0b      	blt.n	800256e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	4907      	ldr	r1, [pc, #28]	@ (800257c <__NVIC_EnableIRQ+0x38>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	2001      	movs	r0, #1
 8002566:	fa00 f202 	lsl.w	r2, r0, r2
 800256a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000e100 	.word	0xe000e100

08002580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002590:	2b00      	cmp	r3, #0
 8002592:	db0a      	blt.n	80025aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	490c      	ldr	r1, [pc, #48]	@ (80025cc <__NVIC_SetPriority+0x4c>)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	0112      	lsls	r2, r2, #4
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	440b      	add	r3, r1
 80025a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a8:	e00a      	b.n	80025c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4908      	ldr	r1, [pc, #32]	@ (80025d0 <__NVIC_SetPriority+0x50>)
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	3b04      	subs	r3, #4
 80025b8:	0112      	lsls	r2, r2, #4
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	440b      	add	r3, r1
 80025be:	761a      	strb	r2, [r3, #24]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000e100 	.word	0xe000e100
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	@ 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f1c3 0307 	rsb	r3, r3, #7
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	bf28      	it	cs
 80025f2:	2304      	movcs	r3, #4
 80025f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3304      	adds	r3, #4
 80025fa:	2b06      	cmp	r3, #6
 80025fc:	d902      	bls.n	8002604 <NVIC_EncodePriority+0x30>
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3b03      	subs	r3, #3
 8002602:	e000      	b.n	8002606 <NVIC_EncodePriority+0x32>
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	f04f 32ff 	mov.w	r2, #4294967295
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43da      	mvns	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	401a      	ands	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800261c:	f04f 31ff 	mov.w	r1, #4294967295
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fa01 f303 	lsl.w	r3, r1, r3
 8002626:	43d9      	mvns	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	4313      	orrs	r3, r2
         );
}
 800262e:	4618      	mov	r0, r3
 8002630:	3724      	adds	r7, #36	@ 0x24
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800264c:	d301      	bcc.n	8002652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264e:	2301      	movs	r3, #1
 8002650:	e00f      	b.n	8002672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002652:	4a0a      	ldr	r2, [pc, #40]	@ (800267c <SysTick_Config+0x40>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800265a:	210f      	movs	r1, #15
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	f7ff ff8e 	bl	8002580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002664:	4b05      	ldr	r3, [pc, #20]	@ (800267c <SysTick_Config+0x40>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800266a:	4b04      	ldr	r3, [pc, #16]	@ (800267c <SysTick_Config+0x40>)
 800266c:	2207      	movs	r2, #7
 800266e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	e000e010 	.word	0xe000e010

08002680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ff29 	bl	80024e0 <__NVIC_SetPriorityGrouping>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026a4:	f7ff ff40 	bl	8002528 <__NVIC_GetPriorityGrouping>
 80026a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	6978      	ldr	r0, [r7, #20]
 80026b0:	f7ff ff90 	bl	80025d4 <NVIC_EncodePriority>
 80026b4:	4602      	mov	r2, r0
 80026b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff5f 	bl	8002580 <__NVIC_SetPriority>
}
 80026c2:	bf00      	nop
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff33 	bl	8002544 <__NVIC_EnableIRQ>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff ffa4 	bl	800263c <SysTick_Config>
 80026f4:	4603      	mov	r3, r0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026fe:	b480      	push	{r7}
 8002700:	b085      	sub	sp, #20
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d005      	beq.n	8002722 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2204      	movs	r2, #4
 800271a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e037      	b.n	8002792 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 020e 	bic.w	r2, r2, #14
 8002730:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800273c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002740:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0201 	bic.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	f003 021f 	and.w	r2, r3, #31
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	2101      	movs	r1, #1
 8002760:	fa01 f202 	lsl.w	r2, r1, r2
 8002764:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800276e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00c      	beq.n	8002792 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002782:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002786:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002790:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d00d      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2204      	movs	r2, #4
 80027cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
 80027e2:	e047      	b.n	8002874 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 020e 	bic.w	r2, r2, #14
 80027f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800280e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002812:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002818:	f003 021f 	and.w	r2, r3, #31
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	2101      	movs	r1, #1
 8002822:	fa01 f202 	lsl.w	r2, r1, r2
 8002826:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002830:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00c      	beq.n	8002854 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002844:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002848:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002852:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	4798      	blx	r3
    }
  }
  return status;
 8002874:	7bfb      	ldrb	r3, [r7, #15]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800287e:	b480      	push	{r7}
 8002880:	b087      	sub	sp, #28
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	460b      	mov	r3, r1
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8002890:	7afb      	ldrb	r3, [r7, #11]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d103      	bne.n	800289e <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	605a      	str	r2, [r3, #4]
      break;
 800289c:	e005      	b.n	80028aa <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	75fb      	strb	r3, [r7, #23]
      break;
 80028a8:	bf00      	nop
  }

  return status;
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	371c      	adds	r7, #28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e003      	b.n	80028d4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80028d2:	2300      	movs	r3, #0
  }
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	0c1b      	lsrs	r3, r3, #16
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	2201      	movs	r2, #1
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <HAL_EXTI_IRQHandler+0x5c>)
 800290a:	4413      	add	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4013      	ands	r3, r2
 8002916:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4798      	blx	r3
    }
  }
}
 8002932:	bf00      	nop
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40010414 	.word	0x40010414

08002940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800294e:	e15a      	b.n	8002c06 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	2101      	movs	r1, #1
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	fa01 f303 	lsl.w	r3, r1, r3
 800295c:	4013      	ands	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 814c 	beq.w	8002c00 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	2b01      	cmp	r3, #1
 8002972:	d005      	beq.n	8002980 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800297c:	2b02      	cmp	r3, #2
 800297e:	d130      	bne.n	80029e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	2203      	movs	r2, #3
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029b6:	2201      	movs	r2, #1
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4013      	ands	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	f003 0201 	and.w	r2, r3, #1
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d017      	beq.n	8002a1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	2203      	movs	r2, #3
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4013      	ands	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d123      	bne.n	8002a72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	08da      	lsrs	r2, r3, #3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3208      	adds	r2, #8
 8002a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	220f      	movs	r2, #15
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	08da      	lsrs	r2, r3, #3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3208      	adds	r2, #8
 8002a6c:	6939      	ldr	r1, [r7, #16]
 8002a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4013      	ands	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0203 	and.w	r2, r3, #3
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 80a6 	beq.w	8002c00 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab4:	4b5b      	ldr	r3, [pc, #364]	@ (8002c24 <HAL_GPIO_Init+0x2e4>)
 8002ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab8:	4a5a      	ldr	r2, [pc, #360]	@ (8002c24 <HAL_GPIO_Init+0x2e4>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ac0:	4b58      	ldr	r3, [pc, #352]	@ (8002c24 <HAL_GPIO_Init+0x2e4>)
 8002ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002acc:	4a56      	ldr	r2, [pc, #344]	@ (8002c28 <HAL_GPIO_Init+0x2e8>)
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	089b      	lsrs	r3, r3, #2
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	220f      	movs	r2, #15
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002af6:	d01f      	beq.n	8002b38 <HAL_GPIO_Init+0x1f8>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a4c      	ldr	r2, [pc, #304]	@ (8002c2c <HAL_GPIO_Init+0x2ec>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d019      	beq.n	8002b34 <HAL_GPIO_Init+0x1f4>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a4b      	ldr	r2, [pc, #300]	@ (8002c30 <HAL_GPIO_Init+0x2f0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d013      	beq.n	8002b30 <HAL_GPIO_Init+0x1f0>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a4a      	ldr	r2, [pc, #296]	@ (8002c34 <HAL_GPIO_Init+0x2f4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00d      	beq.n	8002b2c <HAL_GPIO_Init+0x1ec>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a49      	ldr	r2, [pc, #292]	@ (8002c38 <HAL_GPIO_Init+0x2f8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d007      	beq.n	8002b28 <HAL_GPIO_Init+0x1e8>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a48      	ldr	r2, [pc, #288]	@ (8002c3c <HAL_GPIO_Init+0x2fc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d101      	bne.n	8002b24 <HAL_GPIO_Init+0x1e4>
 8002b20:	2305      	movs	r3, #5
 8002b22:	e00a      	b.n	8002b3a <HAL_GPIO_Init+0x1fa>
 8002b24:	2306      	movs	r3, #6
 8002b26:	e008      	b.n	8002b3a <HAL_GPIO_Init+0x1fa>
 8002b28:	2304      	movs	r3, #4
 8002b2a:	e006      	b.n	8002b3a <HAL_GPIO_Init+0x1fa>
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e004      	b.n	8002b3a <HAL_GPIO_Init+0x1fa>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e002      	b.n	8002b3a <HAL_GPIO_Init+0x1fa>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <HAL_GPIO_Init+0x1fa>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	f002 0203 	and.w	r2, r2, #3
 8002b40:	0092      	lsls	r2, r2, #2
 8002b42:	4093      	lsls	r3, r2
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b4a:	4937      	ldr	r1, [pc, #220]	@ (8002c28 <HAL_GPIO_Init+0x2e8>)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	089b      	lsrs	r3, r3, #2
 8002b50:	3302      	adds	r3, #2
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b58:	4b39      	ldr	r3, [pc, #228]	@ (8002c40 <HAL_GPIO_Init+0x300>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	43db      	mvns	r3, r3
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4013      	ands	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b7c:	4a30      	ldr	r2, [pc, #192]	@ (8002c40 <HAL_GPIO_Init+0x300>)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b82:	4b2f      	ldr	r3, [pc, #188]	@ (8002c40 <HAL_GPIO_Init+0x300>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ba6:	4a26      	ldr	r2, [pc, #152]	@ (8002c40 <HAL_GPIO_Init+0x300>)
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002bac:	4b24      	ldr	r3, [pc, #144]	@ (8002c40 <HAL_GPIO_Init+0x300>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c40 <HAL_GPIO_Init+0x300>)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c40 <HAL_GPIO_Init+0x300>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4013      	ands	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bfa:	4a11      	ldr	r2, [pc, #68]	@ (8002c40 <HAL_GPIO_Init+0x300>)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	3301      	adds	r3, #1
 8002c04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f47f ae9d 	bne.w	8002950 <HAL_GPIO_Init+0x10>
  }
}
 8002c16:	bf00      	nop
 8002c18:	bf00      	nop
 8002c1a:	371c      	adds	r7, #28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40010000 	.word	0x40010000
 8002c2c:	48000400 	.word	0x48000400
 8002c30:	48000800 	.word	0x48000800
 8002c34:	48000c00 	.word	0x48000c00
 8002c38:	48001000 	.word	0x48001000
 8002c3c:	48001400 	.word	0x48001400
 8002c40:	40010400 	.word	0x40010400

08002c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	807b      	strh	r3, [r7, #2]
 8002c50:	4613      	mov	r3, r2
 8002c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c54:	787b      	ldrb	r3, [r7, #1]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c5a:	887a      	ldrh	r2, [r7, #2]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c60:	e002      	b.n	8002c68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c62:	887a      	ldrh	r2, [r7, #2]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e08d      	b.n	8002da2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe fd86 	bl	80017ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2224      	movs	r2, #36	@ 0x24
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0201 	bic.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d107      	bne.n	8002cee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	e006      	b.n	8002cfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002cfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d108      	bne.n	8002d16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d12:	605a      	str	r2, [r3, #4]
 8002d14:	e007      	b.n	8002d26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69d9      	ldr	r1, [r3, #28]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1a      	ldr	r2, [r3, #32]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	461a      	mov	r2, r3
 8002db8:	460b      	mov	r3, r1
 8002dba:	817b      	strh	r3, [r7, #10]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	f040 80fd 	bne.w	8002fc8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_I2C_Master_Transmit+0x30>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e0f6      	b.n	8002fca <HAL_I2C_Master_Transmit+0x21e>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002de4:	f7ff fb4e 	bl	8002484 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	2319      	movs	r3, #25
 8002df0:	2201      	movs	r2, #1
 8002df2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fb72 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e0e1      	b.n	8002fca <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2221      	movs	r2, #33	@ 0x21
 8002e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2210      	movs	r2, #16
 8002e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	893a      	ldrh	r2, [r7, #8]
 8002e26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2bff      	cmp	r3, #255	@ 0xff
 8002e36:	d906      	bls.n	8002e46 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	22ff      	movs	r2, #255	@ 0xff
 8002e3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002e3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	e007      	b.n	8002e56 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002e50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e54:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d024      	beq.n	8002ea8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e62:	781a      	ldrb	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	3301      	adds	r3, #1
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	8979      	ldrh	r1, [r7, #10]
 8002e9a:	4b4e      	ldr	r3, [pc, #312]	@ (8002fd4 <HAL_I2C_Master_Transmit+0x228>)
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fd6d 	bl	8003980 <I2C_TransferConfig>
 8002ea6:	e066      	b.n	8002f76 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	8979      	ldrh	r1, [r7, #10]
 8002eb0:	4b48      	ldr	r3, [pc, #288]	@ (8002fd4 <HAL_I2C_Master_Transmit+0x228>)
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fd62 	bl	8003980 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ebc:	e05b      	b.n	8002f76 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	6a39      	ldr	r1, [r7, #32]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 fb65 	bl	8003592 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e07b      	b.n	8002fca <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d034      	beq.n	8002f76 <HAL_I2C_Master_Transmit+0x1ca>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d130      	bne.n	8002f76 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2180      	movs	r1, #128	@ 0x80
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 fade 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e04d      	b.n	8002fca <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2bff      	cmp	r3, #255	@ 0xff
 8002f36:	d90e      	bls.n	8002f56 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	22ff      	movs	r2, #255	@ 0xff
 8002f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	8979      	ldrh	r1, [r7, #10]
 8002f46:	2300      	movs	r3, #0
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fd16 	bl	8003980 <I2C_TransferConfig>
 8002f54:	e00f      	b.n	8002f76 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	8979      	ldrh	r1, [r7, #10]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 fd05 	bl	8003980 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d19e      	bne.n	8002ebe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	6a39      	ldr	r1, [r7, #32]
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 fb4b 	bl	8003620 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e01a      	b.n	8002fca <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd8 <HAL_I2C_Master_Transmit+0x22c>)
 8002fa8:	400b      	ands	r3, r1
 8002faa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	e000      	b.n	8002fca <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002fc8:	2302      	movs	r3, #2
  }
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	80002000 	.word	0x80002000
 8002fd8:	fe00e800 	.word	0xfe00e800

08002fdc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	460b      	mov	r3, r1
 8002fea:	817b      	strh	r3, [r7, #10]
 8002fec:	4613      	mov	r3, r2
 8002fee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	f040 80db 	bne.w	80031b4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_I2C_Master_Receive+0x30>
 8003008:	2302      	movs	r3, #2
 800300a:	e0d4      	b.n	80031b6 <HAL_I2C_Master_Receive+0x1da>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003014:	f7ff fa36 	bl	8002484 <HAL_GetTick>
 8003018:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	2319      	movs	r3, #25
 8003020:	2201      	movs	r2, #1
 8003022:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 fa5a 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e0bf      	b.n	80031b6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2222      	movs	r2, #34	@ 0x22
 800303a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2210      	movs	r2, #16
 8003042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	893a      	ldrh	r2, [r7, #8]
 8003056:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	2bff      	cmp	r3, #255	@ 0xff
 8003066:	d90e      	bls.n	8003086 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	22ff      	movs	r2, #255	@ 0xff
 800306c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003072:	b2da      	uxtb	r2, r3
 8003074:	8979      	ldrh	r1, [r7, #10]
 8003076:	4b52      	ldr	r3, [pc, #328]	@ (80031c0 <HAL_I2C_Master_Receive+0x1e4>)
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fc7e 	bl	8003980 <I2C_TransferConfig>
 8003084:	e06d      	b.n	8003162 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003094:	b2da      	uxtb	r2, r3
 8003096:	8979      	ldrh	r1, [r7, #10]
 8003098:	4b49      	ldr	r3, [pc, #292]	@ (80031c0 <HAL_I2C_Master_Receive+0x1e4>)
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fc6d 	bl	8003980 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80030a6:	e05c      	b.n	8003162 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	6a39      	ldr	r1, [r7, #32]
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fafb 	bl	80036a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e07c      	b.n	80031b6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d034      	beq.n	8003162 <HAL_I2C_Master_Receive+0x186>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d130      	bne.n	8003162 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	2200      	movs	r2, #0
 8003108:	2180      	movs	r1, #128	@ 0x80
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f9e8 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e04d      	b.n	80031b6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311e:	b29b      	uxth	r3, r3
 8003120:	2bff      	cmp	r3, #255	@ 0xff
 8003122:	d90e      	bls.n	8003142 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	22ff      	movs	r2, #255	@ 0xff
 8003128:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312e:	b2da      	uxtb	r2, r3
 8003130:	8979      	ldrh	r1, [r7, #10]
 8003132:	2300      	movs	r3, #0
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fc20 	bl	8003980 <I2C_TransferConfig>
 8003140:	e00f      	b.n	8003162 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003150:	b2da      	uxtb	r2, r3
 8003152:	8979      	ldrh	r1, [r7, #10]
 8003154:	2300      	movs	r3, #0
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fc0f 	bl	8003980 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d19d      	bne.n	80030a8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	6a39      	ldr	r1, [r7, #32]
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 fa55 	bl	8003620 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e01a      	b.n	80031b6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2220      	movs	r2, #32
 8003186:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6859      	ldr	r1, [r3, #4]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4b0c      	ldr	r3, [pc, #48]	@ (80031c4 <HAL_I2C_Master_Receive+0x1e8>)
 8003194:	400b      	ands	r3, r1
 8003196:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	80002400 	.word	0x80002400
 80031c4:	fe00e800 	.word	0xfe00e800

080031c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	4608      	mov	r0, r1
 80031d2:	4611      	mov	r1, r2
 80031d4:	461a      	mov	r2, r3
 80031d6:	4603      	mov	r3, r0
 80031d8:	817b      	strh	r3, [r7, #10]
 80031da:	460b      	mov	r3, r1
 80031dc:	813b      	strh	r3, [r7, #8]
 80031de:	4613      	mov	r3, r2
 80031e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	f040 80f9 	bne.w	80033e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_I2C_Mem_Write+0x34>
 80031f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d105      	bne.n	8003208 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003202:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0ed      	b.n	80033e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_I2C_Mem_Write+0x4e>
 8003212:	2302      	movs	r3, #2
 8003214:	e0e6      	b.n	80033e4 <HAL_I2C_Mem_Write+0x21c>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800321e:	f7ff f931 	bl	8002484 <HAL_GetTick>
 8003222:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	2319      	movs	r3, #25
 800322a:	2201      	movs	r2, #1
 800322c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 f955 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0d1      	b.n	80033e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2221      	movs	r2, #33	@ 0x21
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2240      	movs	r2, #64	@ 0x40
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a3a      	ldr	r2, [r7, #32]
 800325a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003260:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003268:	88f8      	ldrh	r0, [r7, #6]
 800326a:	893a      	ldrh	r2, [r7, #8]
 800326c:	8979      	ldrh	r1, [r7, #10]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	4603      	mov	r3, r0
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f8b9 	bl	80033f0 <I2C_RequestMemoryWrite>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0a9      	b.n	80033e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	2bff      	cmp	r3, #255	@ 0xff
 8003298:	d90e      	bls.n	80032b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	22ff      	movs	r2, #255	@ 0xff
 800329e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	8979      	ldrh	r1, [r7, #10]
 80032a8:	2300      	movs	r3, #0
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 fb65 	bl	8003980 <I2C_TransferConfig>
 80032b6:	e00f      	b.n	80032d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	8979      	ldrh	r1, [r7, #10]
 80032ca:	2300      	movs	r3, #0
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 fb54 	bl	8003980 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f958 	bl	8003592 <I2C_WaitOnTXISFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e07b      	b.n	80033e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	781a      	ldrb	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d034      	beq.n	8003390 <HAL_I2C_Mem_Write+0x1c8>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332a:	2b00      	cmp	r3, #0
 800332c:	d130      	bne.n	8003390 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003334:	2200      	movs	r2, #0
 8003336:	2180      	movs	r1, #128	@ 0x80
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f8d1 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e04d      	b.n	80033e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	2bff      	cmp	r3, #255	@ 0xff
 8003350:	d90e      	bls.n	8003370 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	22ff      	movs	r2, #255	@ 0xff
 8003356:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335c:	b2da      	uxtb	r2, r3
 800335e:	8979      	ldrh	r1, [r7, #10]
 8003360:	2300      	movs	r3, #0
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 fb09 	bl	8003980 <I2C_TransferConfig>
 800336e:	e00f      	b.n	8003390 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337e:	b2da      	uxtb	r2, r3
 8003380:	8979      	ldrh	r1, [r7, #10]
 8003382:	2300      	movs	r3, #0
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 faf8 	bl	8003980 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d19e      	bne.n	80032d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f93e 	bl	8003620 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e01a      	b.n	80033e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2220      	movs	r2, #32
 80033b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b0a      	ldr	r3, [pc, #40]	@ (80033ec <HAL_I2C_Mem_Write+0x224>)
 80033c2:	400b      	ands	r3, r1
 80033c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	e000      	b.n	80033e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
  }
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	fe00e800 	.word	0xfe00e800

080033f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	4608      	mov	r0, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	461a      	mov	r2, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	817b      	strh	r3, [r7, #10]
 8003402:	460b      	mov	r3, r1
 8003404:	813b      	strh	r3, [r7, #8]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	8979      	ldrh	r1, [r7, #10]
 8003410:	4b20      	ldr	r3, [pc, #128]	@ (8003494 <I2C_RequestMemoryWrite+0xa4>)
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fab1 	bl	8003980 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	69b9      	ldr	r1, [r7, #24]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f8b5 	bl	8003592 <I2C_WaitOnTXISFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e02c      	b.n	800348c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003438:	893b      	ldrh	r3, [r7, #8]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	629a      	str	r2, [r3, #40]	@ 0x28
 8003442:	e015      	b.n	8003470 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003444:	893b      	ldrh	r3, [r7, #8]
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	b29b      	uxth	r3, r3
 800344a:	b2da      	uxtb	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	69b9      	ldr	r1, [r7, #24]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f89b 	bl	8003592 <I2C_WaitOnTXISFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e012      	b.n	800348c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003466:	893b      	ldrh	r3, [r7, #8]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2200      	movs	r2, #0
 8003478:	2180      	movs	r1, #128	@ 0x80
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f830 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	80002000 	.word	0x80002000

08003498 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d103      	bne.n	80034b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2200      	movs	r2, #0
 80034b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d007      	beq.n	80034d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	619a      	str	r2, [r3, #24]
  }
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034f0:	e03b      	b.n	800356a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	6839      	ldr	r1, [r7, #0]
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f962 	bl	80037c0 <I2C_IsErrorOccurred>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e041      	b.n	800358a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350c:	d02d      	beq.n	800356a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350e:	f7fe ffb9 	bl	8002484 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d302      	bcc.n	8003524 <I2C_WaitOnFlagUntilTimeout+0x44>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d122      	bne.n	800356a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699a      	ldr	r2, [r3, #24]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	429a      	cmp	r2, r3
 8003532:	bf0c      	ite	eq
 8003534:	2301      	moveq	r3, #1
 8003536:	2300      	movne	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	429a      	cmp	r2, r3
 8003540:	d113      	bne.n	800356a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003546:	f043 0220 	orr.w	r2, r3, #32
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e00f      	b.n	800358a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699a      	ldr	r2, [r3, #24]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4013      	ands	r3, r2
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	bf0c      	ite	eq
 800357a:	2301      	moveq	r3, #1
 800357c:	2300      	movne	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	429a      	cmp	r2, r3
 8003586:	d0b4      	beq.n	80034f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800359e:	e033      	b.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f90b 	bl	80037c0 <I2C_IsErrorOccurred>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e031      	b.n	8003618 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d025      	beq.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035bc:	f7fe ff62 	bl	8002484 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d302      	bcc.n	80035d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d11a      	bne.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d013      	beq.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e007      	b.n	8003618 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b02      	cmp	r3, #2
 8003614:	d1c4      	bne.n	80035a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800362c:	e02f      	b.n	800368e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f8c4 	bl	80037c0 <I2C_IsErrorOccurred>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e02d      	b.n	800369e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003642:	f7fe ff1f 	bl	8002484 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	429a      	cmp	r2, r3
 8003650:	d302      	bcc.n	8003658 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d11a      	bne.n	800368e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b20      	cmp	r3, #32
 8003664:	d013      	beq.n	800368e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	f043 0220 	orr.w	r2, r3, #32
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e007      	b.n	800369e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b20      	cmp	r3, #32
 800369a:	d1c8      	bne.n	800362e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80036b8:	e071      	b.n	800379e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 f87e 	bl	80037c0 <I2C_IsErrorOccurred>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d13b      	bne.n	8003754 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d138      	bne.n	8003754 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d105      	bne.n	80036fc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b10      	cmp	r3, #16
 8003708:	d121      	bne.n	800374e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2210      	movs	r2, #16
 8003710:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2204      	movs	r2, #4
 8003716:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2220      	movs	r2, #32
 800371e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6859      	ldr	r1, [r3, #4]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4b24      	ldr	r3, [pc, #144]	@ (80037bc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800372c:	400b      	ands	r3, r1
 800372e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	75fb      	strb	r3, [r7, #23]
 800374c:	e002      	b.n	8003754 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003754:	f7fe fe96 	bl	8002484 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	429a      	cmp	r2, r3
 8003762:	d302      	bcc.n	800376a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d119      	bne.n	800379e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800376a:	7dfb      	ldrb	r3, [r7, #23]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d116      	bne.n	800379e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b04      	cmp	r3, #4
 800377c:	d00f      	beq.n	800379e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	f043 0220 	orr.w	r2, r3, #32
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d002      	beq.n	80037b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d083      	beq.n	80036ba <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	fe00e800 	.word	0xfe00e800

080037c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	@ 0x28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d068      	beq.n	80038be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2210      	movs	r2, #16
 80037f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037f4:	e049      	b.n	800388a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fc:	d045      	beq.n	800388a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037fe:	f7fe fe41 	bl	8002484 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	d302      	bcc.n	8003814 <I2C_IsErrorOccurred+0x54>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d13a      	bne.n	800388a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800381e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003826:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003832:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003836:	d121      	bne.n	800387c <I2C_IsErrorOccurred+0xbc>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800383e:	d01d      	beq.n	800387c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003840:	7cfb      	ldrb	r3, [r7, #19]
 8003842:	2b20      	cmp	r3, #32
 8003844:	d01a      	beq.n	800387c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003854:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003856:	f7fe fe15 	bl	8002484 <HAL_GetTick>
 800385a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800385c:	e00e      	b.n	800387c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800385e:	f7fe fe11 	bl	8002484 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b19      	cmp	r3, #25
 800386a:	d907      	bls.n	800387c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	f043 0320 	orr.w	r3, r3, #32
 8003872:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800387a:	e006      	b.n	800388a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b20      	cmp	r3, #32
 8003888:	d1e9      	bne.n	800385e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b20      	cmp	r3, #32
 8003896:	d003      	beq.n	80038a0 <I2C_IsErrorOccurred+0xe0>
 8003898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0aa      	beq.n	80037f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d103      	bne.n	80038b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2220      	movs	r2, #32
 80038ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	f043 0304 	orr.w	r3, r3, #4
 80038b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00b      	beq.n	80038e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	f043 0308 	orr.w	r3, r3, #8
 80038f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003902:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00b      	beq.n	800392c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	f043 0302 	orr.w	r3, r3, #2
 800391a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003924:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800392c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01c      	beq.n	800396e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7ff fdaf 	bl	8003498 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6859      	ldr	r1, [r3, #4]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	4b0d      	ldr	r3, [pc, #52]	@ (800397c <I2C_IsErrorOccurred+0x1bc>)
 8003946:	400b      	ands	r3, r1
 8003948:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	431a      	orrs	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800396e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003972:	4618      	mov	r0, r3
 8003974:	3728      	adds	r7, #40	@ 0x28
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	fe00e800 	.word	0xfe00e800

08003980 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	607b      	str	r3, [r7, #4]
 800398a:	460b      	mov	r3, r1
 800398c:	817b      	strh	r3, [r7, #10]
 800398e:	4613      	mov	r3, r2
 8003990:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003992:	897b      	ldrh	r3, [r7, #10]
 8003994:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003998:	7a7b      	ldrb	r3, [r7, #9]
 800399a:	041b      	lsls	r3, r3, #16
 800399c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	0d5b      	lsrs	r3, r3, #21
 80039ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80039be:	4b08      	ldr	r3, [pc, #32]	@ (80039e0 <I2C_TransferConfig+0x60>)
 80039c0:	430b      	orrs	r3, r1
 80039c2:	43db      	mvns	r3, r3
 80039c4:	ea02 0103 	and.w	r1, r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	03ff63ff 	.word	0x03ff63ff

080039e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d138      	bne.n	8003a6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e032      	b.n	8003a6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2224      	movs	r2, #36	@ 0x24
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0201 	bic.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6819      	ldr	r1, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	e000      	b.n	8003a6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a6c:	2302      	movs	r3, #2
  }
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b085      	sub	sp, #20
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d139      	bne.n	8003b04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e033      	b.n	8003b06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2224      	movs	r2, #36	@ 0x24
 8003aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003acc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	e000      	b.n	8003b06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
  }
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d141      	bne.n	8003ba6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b22:	4b4b      	ldr	r3, [pc, #300]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b2e:	d131      	bne.n	8003b94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b30:	4b47      	ldr	r3, [pc, #284]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b36:	4a46      	ldr	r2, [pc, #280]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b40:	4b43      	ldr	r3, [pc, #268]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b48:	4a41      	ldr	r2, [pc, #260]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b50:	4b40      	ldr	r3, [pc, #256]	@ (8003c54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2232      	movs	r2, #50	@ 0x32
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b60:	0c9b      	lsrs	r3, r3, #18
 8003b62:	3301      	adds	r3, #1
 8003b64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b66:	e002      	b.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b6e:	4b38      	ldr	r3, [pc, #224]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b7a:	d102      	bne.n	8003b82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f2      	bne.n	8003b68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b82:	4b33      	ldr	r3, [pc, #204]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b8e:	d158      	bne.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e057      	b.n	8003c44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b94:	4b2e      	ldr	r3, [pc, #184]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ba0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ba4:	e04d      	b.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bac:	d141      	bne.n	8003c32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bae:	4b28      	ldr	r3, [pc, #160]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bba:	d131      	bne.n	8003c20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bbc:	4b24      	ldr	r3, [pc, #144]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bc2:	4a23      	ldr	r2, [pc, #140]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bcc:	4b20      	ldr	r3, [pc, #128]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2232      	movs	r2, #50	@ 0x32
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	4a1c      	ldr	r2, [pc, #112]	@ (8003c58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003be8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bec:	0c9b      	lsrs	r3, r3, #18
 8003bee:	3301      	adds	r3, #1
 8003bf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bf2:	e002      	b.n	8003bfa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bfa:	4b15      	ldr	r3, [pc, #84]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c06:	d102      	bne.n	8003c0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f2      	bne.n	8003bf4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c0e:	4b10      	ldr	r3, [pc, #64]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c1a:	d112      	bne.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e011      	b.n	8003c44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c20:	4b0b      	ldr	r3, [pc, #44]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c26:	4a0a      	ldr	r2, [pc, #40]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003c30:	e007      	b.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c32:	4b07      	ldr	r3, [pc, #28]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c3a:	4a05      	ldr	r2, [pc, #20]	@ (8003c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	40007000 	.word	0x40007000
 8003c54:	20000004 	.word	0x20000004
 8003c58:	431bde83 	.word	0x431bde83

08003c5c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003c60:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	4a04      	ldr	r2, [pc, #16]	@ (8003c78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c6a:	6093      	str	r3, [r2, #8]
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40007000 	.word	0x40007000

08003c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e2fe      	b.n	800428c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d075      	beq.n	8003d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c9a:	4b97      	ldr	r3, [pc, #604]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ca4:	4b94      	ldr	r3, [pc, #592]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2b0c      	cmp	r3, #12
 8003cb2:	d102      	bne.n	8003cba <HAL_RCC_OscConfig+0x3e>
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d002      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x44>
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc0:	4b8d      	ldr	r3, [pc, #564]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d05b      	beq.n	8003d84 <HAL_RCC_OscConfig+0x108>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d157      	bne.n	8003d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e2d9      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce0:	d106      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x74>
 8003ce2:	4b85      	ldr	r3, [pc, #532]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a84      	ldr	r2, [pc, #528]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e01d      	b.n	8003d2c <HAL_RCC_OscConfig+0xb0>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x98>
 8003cfa:	4b7f      	ldr	r3, [pc, #508]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a7e      	ldr	r2, [pc, #504]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	4b7c      	ldr	r3, [pc, #496]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a7b      	ldr	r2, [pc, #492]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e00b      	b.n	8003d2c <HAL_RCC_OscConfig+0xb0>
 8003d14:	4b78      	ldr	r3, [pc, #480]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a77      	ldr	r2, [pc, #476]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	4b75      	ldr	r3, [pc, #468]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a74      	ldr	r2, [pc, #464]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d013      	beq.n	8003d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fe fba6 	bl	8002484 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fe fba2 	bl	8002484 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	@ 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e29e      	b.n	800428c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0xc0>
 8003d5a:	e014      	b.n	8003d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe fb92 	bl	8002484 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fe fb8e 	bl	8002484 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	@ 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e28a      	b.n	800428c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d76:	4b60      	ldr	r3, [pc, #384]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0xe8>
 8003d82:	e000      	b.n	8003d86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d075      	beq.n	8003e7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d92:	4b59      	ldr	r3, [pc, #356]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
 8003d9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d9c:	4b56      	ldr	r3, [pc, #344]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	2b0c      	cmp	r3, #12
 8003daa:	d102      	bne.n	8003db2 <HAL_RCC_OscConfig+0x136>
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d002      	beq.n	8003db8 <HAL_RCC_OscConfig+0x13c>
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d11f      	bne.n	8003df8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003db8:	4b4f      	ldr	r3, [pc, #316]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x154>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e25d      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd0:	4b49      	ldr	r3, [pc, #292]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	061b      	lsls	r3, r3, #24
 8003dde:	4946      	ldr	r1, [pc, #280]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003de4:	4b45      	ldr	r3, [pc, #276]	@ (8003efc <HAL_RCC_OscConfig+0x280>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fe faff 	bl	80023ec <HAL_InitTick>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d043      	beq.n	8003e7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e249      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d023      	beq.n	8003e48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e00:	4b3d      	ldr	r3, [pc, #244]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a3c      	ldr	r2, [pc, #240]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fb3a 	bl	8002484 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e14:	f7fe fb36 	bl	8002484 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e232      	b.n	800428c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e26:	4b34      	ldr	r3, [pc, #208]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e32:	4b31      	ldr	r3, [pc, #196]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	061b      	lsls	r3, r3, #24
 8003e40:	492d      	ldr	r1, [pc, #180]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	604b      	str	r3, [r1, #4]
 8003e46:	e01a      	b.n	8003e7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e48:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e54:	f7fe fb16 	bl	8002484 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e5c:	f7fe fb12 	bl	8002484 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e20e      	b.n	800428c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e6e:	4b22      	ldr	r3, [pc, #136]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x1e0>
 8003e7a:	e000      	b.n	8003e7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d041      	beq.n	8003f0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d01c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e92:	4b19      	ldr	r3, [pc, #100]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e98:	4a17      	ldr	r2, [pc, #92]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea2:	f7fe faef 	bl	8002484 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eaa:	f7fe faeb 	bl	8002484 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e1e7      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0ef      	beq.n	8003eaa <HAL_RCC_OscConfig+0x22e>
 8003eca:	e020      	b.n	8003f0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ed2:	4a09      	ldr	r2, [pc, #36]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003edc:	f7fe fad2 	bl	8002484 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ee2:	e00d      	b.n	8003f00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee4:	f7fe face 	bl	8002484 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d906      	bls.n	8003f00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e1ca      	b.n	800428c <HAL_RCC_OscConfig+0x610>
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f00:	4b8c      	ldr	r3, [pc, #560]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1ea      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 80a6 	beq.w	8004068 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f20:	4b84      	ldr	r3, [pc, #528]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_RCC_OscConfig+0x2b4>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <HAL_RCC_OscConfig+0x2b6>
 8003f30:	2300      	movs	r3, #0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f36:	4b7f      	ldr	r3, [pc, #508]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f42:	4b7c      	ldr	r3, [pc, #496]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f52:	4b79      	ldr	r3, [pc, #484]	@ (8004138 <HAL_RCC_OscConfig+0x4bc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d118      	bne.n	8003f90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f5e:	4b76      	ldr	r3, [pc, #472]	@ (8004138 <HAL_RCC_OscConfig+0x4bc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a75      	ldr	r2, [pc, #468]	@ (8004138 <HAL_RCC_OscConfig+0x4bc>)
 8003f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f6a:	f7fe fa8b 	bl	8002484 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f72:	f7fe fa87 	bl	8002484 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e183      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f84:	4b6c      	ldr	r3, [pc, #432]	@ (8004138 <HAL_RCC_OscConfig+0x4bc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f0      	beq.n	8003f72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d108      	bne.n	8003faa <HAL_RCC_OscConfig+0x32e>
 8003f98:	4b66      	ldr	r3, [pc, #408]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9e:	4a65      	ldr	r2, [pc, #404]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fa8:	e024      	b.n	8003ff4 <HAL_RCC_OscConfig+0x378>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d110      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x358>
 8003fb2:	4b60      	ldr	r3, [pc, #384]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb8:	4a5e      	ldr	r2, [pc, #376]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003fba:	f043 0304 	orr.w	r3, r3, #4
 8003fbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fc2:	4b5c      	ldr	r3, [pc, #368]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc8:	4a5a      	ldr	r2, [pc, #360]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fd2:	e00f      	b.n	8003ff4 <HAL_RCC_OscConfig+0x378>
 8003fd4:	4b57      	ldr	r3, [pc, #348]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fda:	4a56      	ldr	r2, [pc, #344]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003fdc:	f023 0301 	bic.w	r3, r3, #1
 8003fe0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fe4:	4b53      	ldr	r3, [pc, #332]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fea:	4a52      	ldr	r2, [pc, #328]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8003fec:	f023 0304 	bic.w	r3, r3, #4
 8003ff0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d016      	beq.n	800402a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffc:	f7fe fa42 	bl	8002484 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004002:	e00a      	b.n	800401a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004004:	f7fe fa3e 	bl	8002484 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e138      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800401a:	4b46      	ldr	r3, [pc, #280]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0ed      	beq.n	8004004 <HAL_RCC_OscConfig+0x388>
 8004028:	e015      	b.n	8004056 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402a:	f7fe fa2b 	bl	8002484 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004030:	e00a      	b.n	8004048 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004032:	f7fe fa27 	bl	8002484 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004040:	4293      	cmp	r3, r2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e121      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004048:	4b3a      	ldr	r3, [pc, #232]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1ed      	bne.n	8004032 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004056:	7ffb      	ldrb	r3, [r7, #31]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d105      	bne.n	8004068 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800405c:	4b35      	ldr	r3, [pc, #212]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004060:	4a34      	ldr	r2, [pc, #208]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8004062:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004066:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d03c      	beq.n	80040ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01c      	beq.n	80040b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800407c:	4b2d      	ldr	r3, [pc, #180]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 800407e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004082:	4a2c      	ldr	r2, [pc, #176]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408c:	f7fe f9fa 	bl	8002484 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004094:	f7fe f9f6 	bl	8002484 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e0f2      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040a6:	4b23      	ldr	r3, [pc, #140]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 80040a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0ef      	beq.n	8004094 <HAL_RCC_OscConfig+0x418>
 80040b4:	e01b      	b.n	80040ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 80040b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 80040be:	f023 0301 	bic.w	r3, r3, #1
 80040c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c6:	f7fe f9dd 	bl	8002484 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040ce:	f7fe f9d9 	bl	8002484 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e0d5      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040e0:	4b14      	ldr	r3, [pc, #80]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 80040e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1ef      	bne.n	80040ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 80c9 	beq.w	800428a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 030c 	and.w	r3, r3, #12
 8004100:	2b0c      	cmp	r3, #12
 8004102:	f000 8083 	beq.w	800420c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d15e      	bne.n	80041cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800410e:	4b09      	ldr	r3, [pc, #36]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a08      	ldr	r2, [pc, #32]	@ (8004134 <HAL_RCC_OscConfig+0x4b8>)
 8004114:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411a:	f7fe f9b3 	bl	8002484 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004120:	e00c      	b.n	800413c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004122:	f7fe f9af 	bl	8002484 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d905      	bls.n	800413c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e0ab      	b.n	800428c <HAL_RCC_OscConfig+0x610>
 8004134:	40021000 	.word	0x40021000
 8004138:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800413c:	4b55      	ldr	r3, [pc, #340]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1ec      	bne.n	8004122 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004148:	4b52      	ldr	r3, [pc, #328]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	4b52      	ldr	r3, [pc, #328]	@ (8004298 <HAL_RCC_OscConfig+0x61c>)
 800414e:	4013      	ands	r3, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6a11      	ldr	r1, [r2, #32]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004158:	3a01      	subs	r2, #1
 800415a:	0112      	lsls	r2, r2, #4
 800415c:	4311      	orrs	r1, r2
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004162:	0212      	lsls	r2, r2, #8
 8004164:	4311      	orrs	r1, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800416a:	0852      	lsrs	r2, r2, #1
 800416c:	3a01      	subs	r2, #1
 800416e:	0552      	lsls	r2, r2, #21
 8004170:	4311      	orrs	r1, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004176:	0852      	lsrs	r2, r2, #1
 8004178:	3a01      	subs	r2, #1
 800417a:	0652      	lsls	r2, r2, #25
 800417c:	4311      	orrs	r1, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004182:	06d2      	lsls	r2, r2, #27
 8004184:	430a      	orrs	r2, r1
 8004186:	4943      	ldr	r1, [pc, #268]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 8004188:	4313      	orrs	r3, r2
 800418a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800418c:	4b41      	ldr	r3, [pc, #260]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a40      	ldr	r2, [pc, #256]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 8004192:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004196:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004198:	4b3e      	ldr	r3, [pc, #248]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4a3d      	ldr	r2, [pc, #244]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 800419e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fe f96e 	bl	8002484 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ac:	f7fe f96a 	bl	8002484 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e066      	b.n	800428c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041be:	4b35      	ldr	r3, [pc, #212]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0x530>
 80041ca:	e05e      	b.n	800428a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041cc:	4b31      	ldr	r3, [pc, #196]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a30      	ldr	r2, [pc, #192]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 80041d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fe f954 	bl	8002484 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e0:	f7fe f950 	bl	8002484 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e04c      	b.n	800428c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041f2:	4b28      	ldr	r3, [pc, #160]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80041fe:	4b25      	ldr	r3, [pc, #148]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	4924      	ldr	r1, [pc, #144]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 8004204:	4b25      	ldr	r3, [pc, #148]	@ (800429c <HAL_RCC_OscConfig+0x620>)
 8004206:	4013      	ands	r3, r2
 8004208:	60cb      	str	r3, [r1, #12]
 800420a:	e03e      	b.n	800428a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e039      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004218:	4b1e      	ldr	r3, [pc, #120]	@ (8004294 <HAL_RCC_OscConfig+0x618>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f003 0203 	and.w	r2, r3, #3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	429a      	cmp	r2, r3
 800422a:	d12c      	bne.n	8004286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	3b01      	subs	r3, #1
 8004238:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423a:	429a      	cmp	r2, r3
 800423c:	d123      	bne.n	8004286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004248:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800424a:	429a      	cmp	r2, r3
 800424c:	d11b      	bne.n	8004286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004258:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800425a:	429a      	cmp	r2, r3
 800425c:	d113      	bne.n	8004286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	3b01      	subs	r3, #1
 800426c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800426e:	429a      	cmp	r2, r3
 8004270:	d109      	bne.n	8004286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	3b01      	subs	r3, #1
 8004280:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d001      	beq.n	800428a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3720      	adds	r7, #32
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000
 8004298:	019f800c 	.word	0x019f800c
 800429c:	feeefffc 	.word	0xfeeefffc

080042a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e11e      	b.n	80044f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042b8:	4b91      	ldr	r3, [pc, #580]	@ (8004500 <HAL_RCC_ClockConfig+0x260>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d910      	bls.n	80042e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c6:	4b8e      	ldr	r3, [pc, #568]	@ (8004500 <HAL_RCC_ClockConfig+0x260>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f023 020f 	bic.w	r2, r3, #15
 80042ce:	498c      	ldr	r1, [pc, #560]	@ (8004500 <HAL_RCC_ClockConfig+0x260>)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d6:	4b8a      	ldr	r3, [pc, #552]	@ (8004500 <HAL_RCC_ClockConfig+0x260>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d001      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e106      	b.n	80044f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d073      	beq.n	80043dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d129      	bne.n	8004350 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042fc:	4b81      	ldr	r3, [pc, #516]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0f4      	b.n	80044f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800430c:	f000 f99e 	bl	800464c <RCC_GetSysClockFreqFromPLLSource>
 8004310:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4a7c      	ldr	r2, [pc, #496]	@ (8004508 <HAL_RCC_ClockConfig+0x268>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d93f      	bls.n	800439a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800431a:	4b7a      	ldr	r3, [pc, #488]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800432e:	2b00      	cmp	r3, #0
 8004330:	d033      	beq.n	800439a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004336:	2b00      	cmp	r3, #0
 8004338:	d12f      	bne.n	800439a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800433a:	4b72      	ldr	r3, [pc, #456]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004342:	4a70      	ldr	r2, [pc, #448]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 8004344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004348:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800434a:	2380      	movs	r3, #128	@ 0x80
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	e024      	b.n	800439a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b02      	cmp	r3, #2
 8004356:	d107      	bne.n	8004368 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004358:	4b6a      	ldr	r3, [pc, #424]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d109      	bne.n	8004378 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e0c6      	b.n	80044f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004368:	4b66      	ldr	r3, [pc, #408]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0be      	b.n	80044f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004378:	f000 f8ce 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 800437c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4a61      	ldr	r2, [pc, #388]	@ (8004508 <HAL_RCC_ClockConfig+0x268>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d909      	bls.n	800439a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004386:	4b5f      	ldr	r3, [pc, #380]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800438e:	4a5d      	ldr	r2, [pc, #372]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 8004390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004394:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004396:	2380      	movs	r3, #128	@ 0x80
 8004398:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800439a:	4b5a      	ldr	r3, [pc, #360]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f023 0203 	bic.w	r2, r3, #3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	4957      	ldr	r1, [pc, #348]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ac:	f7fe f86a 	bl	8002484 <HAL_GetTick>
 80043b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b2:	e00a      	b.n	80043ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b4:	f7fe f866 	bl	8002484 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e095      	b.n	80044f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ca:	4b4e      	ldr	r3, [pc, #312]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 020c 	and.w	r2, r3, #12
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	429a      	cmp	r2, r3
 80043da:	d1eb      	bne.n	80043b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d023      	beq.n	8004430 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043f4:	4b43      	ldr	r3, [pc, #268]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	4a42      	ldr	r2, [pc, #264]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 80043fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80043fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d007      	beq.n	800441c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800440c:	4b3d      	ldr	r3, [pc, #244]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004414:	4a3b      	ldr	r2, [pc, #236]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 8004416:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800441a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800441c:	4b39      	ldr	r3, [pc, #228]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4936      	ldr	r1, [pc, #216]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800442a:	4313      	orrs	r3, r2
 800442c:	608b      	str	r3, [r1, #8]
 800442e:	e008      	b.n	8004442 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2b80      	cmp	r3, #128	@ 0x80
 8004434:	d105      	bne.n	8004442 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004436:	4b33      	ldr	r3, [pc, #204]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	4a32      	ldr	r2, [pc, #200]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800443c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004440:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004442:	4b2f      	ldr	r3, [pc, #188]	@ (8004500 <HAL_RCC_ClockConfig+0x260>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d21d      	bcs.n	800448c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004450:	4b2b      	ldr	r3, [pc, #172]	@ (8004500 <HAL_RCC_ClockConfig+0x260>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f023 020f 	bic.w	r2, r3, #15
 8004458:	4929      	ldr	r1, [pc, #164]	@ (8004500 <HAL_RCC_ClockConfig+0x260>)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	4313      	orrs	r3, r2
 800445e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004460:	f7fe f810 	bl	8002484 <HAL_GetTick>
 8004464:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	e00a      	b.n	800447e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004468:	f7fe f80c 	bl	8002484 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e03b      	b.n	80044f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b20      	ldr	r3, [pc, #128]	@ (8004500 <HAL_RCC_ClockConfig+0x260>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d1ed      	bne.n	8004468 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004498:	4b1a      	ldr	r3, [pc, #104]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4917      	ldr	r1, [pc, #92]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b6:	4b13      	ldr	r3, [pc, #76]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	490f      	ldr	r1, [pc, #60]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044ca:	f000 f825 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 80044ce:	4602      	mov	r2, r0
 80044d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004504 <HAL_RCC_ClockConfig+0x264>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	490c      	ldr	r1, [pc, #48]	@ (800450c <HAL_RCC_ClockConfig+0x26c>)
 80044dc:	5ccb      	ldrb	r3, [r1, r3]
 80044de:	f003 031f 	and.w	r3, r3, #31
 80044e2:	fa22 f303 	lsr.w	r3, r2, r3
 80044e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004510 <HAL_RCC_ClockConfig+0x270>)
 80044e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80044ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004514 <HAL_RCC_ClockConfig+0x274>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fd ff7c 	bl	80023ec <HAL_InitTick>
 80044f4:	4603      	mov	r3, r0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40022000 	.word	0x40022000
 8004504:	40021000 	.word	0x40021000
 8004508:	04c4b400 	.word	0x04c4b400
 800450c:	08009b24 	.word	0x08009b24
 8004510:	20000004 	.word	0x20000004
 8004514:	20000018 	.word	0x20000018

08004518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800451e:	4b2c      	ldr	r3, [pc, #176]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	2b04      	cmp	r3, #4
 8004528:	d102      	bne.n	8004530 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800452a:	4b2a      	ldr	r3, [pc, #168]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	e047      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004530:	4b27      	ldr	r3, [pc, #156]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 030c 	and.w	r3, r3, #12
 8004538:	2b08      	cmp	r3, #8
 800453a:	d102      	bne.n	8004542 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800453c:	4b26      	ldr	r3, [pc, #152]	@ (80045d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	e03e      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004542:	4b23      	ldr	r3, [pc, #140]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b0c      	cmp	r3, #12
 800454c:	d136      	bne.n	80045bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800454e:	4b20      	ldr	r3, [pc, #128]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004558:	4b1d      	ldr	r3, [pc, #116]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	3301      	adds	r3, #1
 8004564:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b03      	cmp	r3, #3
 800456a:	d10c      	bne.n	8004586 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800456c:	4a1a      	ldr	r2, [pc, #104]	@ (80045d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	fbb2 f3f3 	udiv	r3, r2, r3
 8004574:	4a16      	ldr	r2, [pc, #88]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004576:	68d2      	ldr	r2, [r2, #12]
 8004578:	0a12      	lsrs	r2, r2, #8
 800457a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800457e:	fb02 f303 	mul.w	r3, r2, r3
 8004582:	617b      	str	r3, [r7, #20]
      break;
 8004584:	e00c      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004586:	4a13      	ldr	r2, [pc, #76]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	fbb2 f3f3 	udiv	r3, r2, r3
 800458e:	4a10      	ldr	r2, [pc, #64]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004590:	68d2      	ldr	r2, [r2, #12]
 8004592:	0a12      	lsrs	r2, r2, #8
 8004594:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004598:	fb02 f303 	mul.w	r3, r2, r3
 800459c:	617b      	str	r3, [r7, #20]
      break;
 800459e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045a0:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	0e5b      	lsrs	r3, r3, #25
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	3301      	adds	r3, #1
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	e001      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80045c0:	693b      	ldr	r3, [r7, #16]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40021000 	.word	0x40021000
 80045d4:	00f42400 	.word	0x00f42400
 80045d8:	016e3600 	.word	0x016e3600

080045dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e0:	4b03      	ldr	r3, [pc, #12]	@ (80045f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045e2:	681b      	ldr	r3, [r3, #0]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	20000004 	.word	0x20000004

080045f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045f8:	f7ff fff0 	bl	80045dc <HAL_RCC_GetHCLKFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b06      	ldr	r3, [pc, #24]	@ (8004618 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	4904      	ldr	r1, [pc, #16]	@ (800461c <HAL_RCC_GetPCLK1Freq+0x28>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004614:	4618      	mov	r0, r3
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40021000 	.word	0x40021000
 800461c:	08009b34 	.word	0x08009b34

08004620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004624:	f7ff ffda 	bl	80045dc <HAL_RCC_GetHCLKFreq>
 8004628:	4602      	mov	r2, r0
 800462a:	4b06      	ldr	r3, [pc, #24]	@ (8004644 <HAL_RCC_GetPCLK2Freq+0x24>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	0adb      	lsrs	r3, r3, #11
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	4904      	ldr	r1, [pc, #16]	@ (8004648 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004636:	5ccb      	ldrb	r3, [r1, r3]
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004640:	4618      	mov	r0, r3
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40021000 	.word	0x40021000
 8004648:	08009b34 	.word	0x08009b34

0800464c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004652:	4b1e      	ldr	r3, [pc, #120]	@ (80046cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800465c:	4b1b      	ldr	r3, [pc, #108]	@ (80046cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	3301      	adds	r3, #1
 8004668:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	2b03      	cmp	r3, #3
 800466e:	d10c      	bne.n	800468a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004670:	4a17      	ldr	r2, [pc, #92]	@ (80046d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	4a14      	ldr	r2, [pc, #80]	@ (80046cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800467a:	68d2      	ldr	r2, [r2, #12]
 800467c:	0a12      	lsrs	r2, r2, #8
 800467e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	617b      	str	r3, [r7, #20]
    break;
 8004688:	e00c      	b.n	80046a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800468a:	4a12      	ldr	r2, [pc, #72]	@ (80046d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004692:	4a0e      	ldr	r2, [pc, #56]	@ (80046cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004694:	68d2      	ldr	r2, [r2, #12]
 8004696:	0a12      	lsrs	r2, r2, #8
 8004698:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800469c:	fb02 f303 	mul.w	r3, r2, r3
 80046a0:	617b      	str	r3, [r7, #20]
    break;
 80046a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046a4:	4b09      	ldr	r3, [pc, #36]	@ (80046cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	0e5b      	lsrs	r3, r3, #25
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	3301      	adds	r3, #1
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80046be:	687b      	ldr	r3, [r7, #4]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	40021000 	.word	0x40021000
 80046d0:	016e3600 	.word	0x016e3600
 80046d4:	00f42400 	.word	0x00f42400

080046d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046e0:	2300      	movs	r3, #0
 80046e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046e4:	2300      	movs	r3, #0
 80046e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8098 	beq.w	8004826 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f6:	2300      	movs	r3, #0
 80046f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fa:	4b43      	ldr	r3, [pc, #268]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10d      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004706:	4b40      	ldr	r3, [pc, #256]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470a:	4a3f      	ldr	r2, [pc, #252]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800470c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004710:	6593      	str	r3, [r2, #88]	@ 0x58
 8004712:	4b3d      	ldr	r3, [pc, #244]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800471a:	60bb      	str	r3, [r7, #8]
 800471c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800471e:	2301      	movs	r3, #1
 8004720:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004722:	4b3a      	ldr	r3, [pc, #232]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a39      	ldr	r2, [pc, #228]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800472c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800472e:	f7fd fea9 	bl	8002484 <HAL_GetTick>
 8004732:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004734:	e009      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004736:	f7fd fea5 	bl	8002484 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d902      	bls.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	74fb      	strb	r3, [r7, #19]
        break;
 8004748:	e005      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800474a:	4b30      	ldr	r3, [pc, #192]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0ef      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004756:	7cfb      	ldrb	r3, [r7, #19]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d159      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800475c:	4b2a      	ldr	r3, [pc, #168]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800475e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004766:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d01e      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	429a      	cmp	r2, r3
 8004776:	d019      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004778:	4b23      	ldr	r3, [pc, #140]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004782:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004784:	4b20      	ldr	r3, [pc, #128]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478a:	4a1f      	ldr	r2, [pc, #124]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800478c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004794:	4b1c      	ldr	r3, [pc, #112]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800479a:	4a1b      	ldr	r2, [pc, #108]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800479c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047a4:	4a18      	ldr	r2, [pc, #96]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d016      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b6:	f7fd fe65 	bl	8002484 <HAL_GetTick>
 80047ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047bc:	e00b      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047be:	f7fd fe61 	bl	8002484 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d902      	bls.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	74fb      	strb	r3, [r7, #19]
            break;
 80047d4:	e006      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0ec      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80047e4:	7cfb      	ldrb	r3, [r7, #19]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10b      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ea:	4b07      	ldr	r3, [pc, #28]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047f8:	4903      	ldr	r1, [pc, #12]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004800:	e008      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004802:	7cfb      	ldrb	r3, [r7, #19]
 8004804:	74bb      	strb	r3, [r7, #18]
 8004806:	e005      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004808:	40021000 	.word	0x40021000
 800480c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004814:	7c7b      	ldrb	r3, [r7, #17]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d105      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800481a:	4ba7      	ldr	r3, [pc, #668]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800481c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481e:	4aa6      	ldr	r2, [pc, #664]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004820:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004824:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004832:	4ba1      	ldr	r3, [pc, #644]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004838:	f023 0203 	bic.w	r2, r3, #3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	499d      	ldr	r1, [pc, #628]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004854:	4b98      	ldr	r3, [pc, #608]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485a:	f023 020c 	bic.w	r2, r3, #12
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	4995      	ldr	r1, [pc, #596]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004876:	4b90      	ldr	r3, [pc, #576]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800487c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	498c      	ldr	r1, [pc, #560]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004898:	4b87      	ldr	r3, [pc, #540]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	4984      	ldr	r1, [pc, #528]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0310 	and.w	r3, r3, #16
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048ba:	4b7f      	ldr	r3, [pc, #508]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	497b      	ldr	r1, [pc, #492]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048dc:	4b76      	ldr	r3, [pc, #472]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	4973      	ldr	r1, [pc, #460]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048fe:	4b6e      	ldr	r3, [pc, #440]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004904:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	496a      	ldr	r1, [pc, #424]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004920:	4b65      	ldr	r3, [pc, #404]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004926:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	4962      	ldr	r1, [pc, #392]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004942:	4b5d      	ldr	r3, [pc, #372]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004948:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004950:	4959      	ldr	r1, [pc, #356]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004964:	4b54      	ldr	r3, [pc, #336]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004966:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800496a:	f023 0203 	bic.w	r2, r3, #3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004972:	4951      	ldr	r1, [pc, #324]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004986:	4b4c      	ldr	r3, [pc, #304]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004994:	4948      	ldr	r1, [pc, #288]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d015      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049a8:	4b43      	ldr	r3, [pc, #268]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b6:	4940      	ldr	r1, [pc, #256]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049c6:	d105      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049c8:	4b3b      	ldr	r3, [pc, #236]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4a3a      	ldr	r2, [pc, #232]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049d2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d015      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049e0:	4b35      	ldr	r3, [pc, #212]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ee:	4932      	ldr	r1, [pc, #200]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049fe:	d105      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a00:	4b2d      	ldr	r3, [pc, #180]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	4a2c      	ldr	r2, [pc, #176]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a0a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d015      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a18:	4b27      	ldr	r3, [pc, #156]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a26:	4924      	ldr	r1, [pc, #144]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a36:	d105      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a38:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d015      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a50:	4b19      	ldr	r3, [pc, #100]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a5e:	4916      	ldr	r1, [pc, #88]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a6e:	d105      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a70:	4b11      	ldr	r3, [pc, #68]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4a10      	ldr	r2, [pc, #64]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d019      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a88:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a96:	4908      	ldr	r1, [pc, #32]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aa6:	d109      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa8:	4b03      	ldr	r3, [pc, #12]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a02      	ldr	r2, [pc, #8]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ab2:	60d3      	str	r3, [r2, #12]
 8004ab4:	e002      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004ab6:	bf00      	nop
 8004ab8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d015      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ac8:	4b29      	ldr	r3, [pc, #164]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ace:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad6:	4926      	ldr	r1, [pc, #152]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ae6:	d105      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ae8:	4b21      	ldr	r3, [pc, #132]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4a20      	ldr	r2, [pc, #128]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d015      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004b00:	4b1b      	ldr	r3, [pc, #108]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b06:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b0e:	4918      	ldr	r1, [pc, #96]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b1e:	d105      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b20:	4b13      	ldr	r3, [pc, #76]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4a12      	ldr	r2, [pc, #72]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b2a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d015      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b38:	4b0d      	ldr	r3, [pc, #52]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b46:	490a      	ldr	r1, [pc, #40]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b56:	d105      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b58:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4a04      	ldr	r2, [pc, #16]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b64:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40021000 	.word	0x40021000

08004b74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e042      	b.n	8004c0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d106      	bne.n	8004b9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fc fe61 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2224      	movs	r2, #36	@ 0x24
 8004ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0201 	bic.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 ff60 	bl	8005a84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fc61 	bl	800548c <UART_SetConfig>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e01b      	b.n	8004c0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004be2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0201 	orr.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 ffdf 	bl	8005bc8 <UART_CheckIdleState>
 8004c0a:	4603      	mov	r3, r0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08a      	sub	sp, #40	@ 0x28
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	4613      	mov	r3, r2
 8004c22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	d17b      	bne.n	8004d26 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <HAL_UART_Transmit+0x26>
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e074      	b.n	8004d28 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2221      	movs	r2, #33	@ 0x21
 8004c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c4e:	f7fd fc19 	bl	8002484 <HAL_GetTick>
 8004c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	88fa      	ldrh	r2, [r7, #6]
 8004c58:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	88fa      	ldrh	r2, [r7, #6]
 8004c60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c6c:	d108      	bne.n	8004c80 <HAL_UART_Transmit+0x6c>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d104      	bne.n	8004c80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	e003      	b.n	8004c88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c88:	e030      	b.n	8004cec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2200      	movs	r2, #0
 8004c92:	2180      	movs	r1, #128	@ 0x80
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f001 f841 	bl	8005d1c <UART_WaitOnFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e03d      	b.n	8004d28 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10b      	bne.n	8004cca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cc0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	61bb      	str	r3, [r7, #24]
 8004cc8:	e007      	b.n	8004cda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	781a      	ldrb	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1c8      	bne.n	8004c8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2140      	movs	r1, #64	@ 0x40
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f001 f80a 	bl	8005d1c <UART_WaitOnFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e006      	b.n	8004d28 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e000      	b.n	8004d28 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004d26:	2302      	movs	r3, #2
  }
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08a      	sub	sp, #40	@ 0x28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d137      	bne.n	8004db8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_UART_Receive_IT+0x24>
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e030      	b.n	8004dba <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a18      	ldr	r2, [pc, #96]	@ (8004dc4 <HAL_UART_Receive_IT+0x94>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d01f      	beq.n	8004da8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d018      	beq.n	8004da8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	e853 3f00 	ldrex	r3, [r3]
 8004d82:	613b      	str	r3, [r7, #16]
   return(result);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d94:	623b      	str	r3, [r7, #32]
 8004d96:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d98:	69f9      	ldr	r1, [r7, #28]
 8004d9a:	6a3a      	ldr	r2, [r7, #32]
 8004d9c:	e841 2300 	strex	r3, r2, [r1]
 8004da0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1e6      	bne.n	8004d76 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004da8:	88fb      	ldrh	r3, [r7, #6]
 8004daa:	461a      	mov	r2, r3
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f001 f822 	bl	8005df8 <UART_Start_Receive_IT>
 8004db4:	4603      	mov	r3, r0
 8004db6:	e000      	b.n	8004dba <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004db8:	2302      	movs	r3, #2
  }
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3728      	adds	r7, #40	@ 0x28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40008000 	.word	0x40008000

08004dc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b0ba      	sub	sp, #232	@ 0xe8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004dee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004df2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004df6:	4013      	ands	r3, r2
 8004df8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004dfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d11b      	bne.n	8004e3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d015      	beq.n	8004e3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d105      	bne.n	8004e28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d009      	beq.n	8004e3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 8300 	beq.w	8005432 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	4798      	blx	r3
      }
      return;
 8004e3a:	e2fa      	b.n	8005432 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 8123 	beq.w	800508c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004e46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004e4a:	4b8d      	ldr	r3, [pc, #564]	@ (8005080 <HAL_UART_IRQHandler+0x2b8>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004e52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004e56:	4b8b      	ldr	r3, [pc, #556]	@ (8005084 <HAL_UART_IRQHandler+0x2bc>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 8116 	beq.w	800508c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d011      	beq.n	8004e90 <HAL_UART_IRQHandler+0xc8>
 8004e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00b      	beq.n	8004e90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e86:	f043 0201 	orr.w	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d011      	beq.n	8004ec0 <HAL_UART_IRQHandler+0xf8>
 8004e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00b      	beq.n	8004ec0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2202      	movs	r2, #2
 8004eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb6:	f043 0204 	orr.w	r2, r3, #4
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d011      	beq.n	8004ef0 <HAL_UART_IRQHandler+0x128>
 8004ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00b      	beq.n	8004ef0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2204      	movs	r2, #4
 8004ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee6:	f043 0202 	orr.w	r2, r3, #2
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d017      	beq.n	8004f2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d105      	bne.n	8004f14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004f08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004f0c:	4b5c      	ldr	r3, [pc, #368]	@ (8005080 <HAL_UART_IRQHandler+0x2b8>)
 8004f0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00b      	beq.n	8004f2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2208      	movs	r2, #8
 8004f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f22:	f043 0208 	orr.w	r2, r3, #8
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d012      	beq.n	8004f5e <HAL_UART_IRQHandler+0x196>
 8004f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00c      	beq.n	8004f5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f54:	f043 0220 	orr.w	r2, r3, #32
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 8266 	beq.w	8005436 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d013      	beq.n	8004f9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d105      	bne.n	8004f8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d007      	beq.n	8004f9e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb2:	2b40      	cmp	r3, #64	@ 0x40
 8004fb4:	d005      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d054      	beq.n	800506c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f001 f83a 	bl	800603c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd2:	2b40      	cmp	r3, #64	@ 0x40
 8004fd4:	d146      	bne.n	8005064 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3308      	adds	r3, #8
 8004fdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ff0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005002:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005006:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800500e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800501a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1d9      	bne.n	8004fd6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005028:	2b00      	cmp	r3, #0
 800502a:	d017      	beq.n	800505c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005032:	4a15      	ldr	r2, [pc, #84]	@ (8005088 <HAL_UART_IRQHandler+0x2c0>)
 8005034:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800503c:	4618      	mov	r0, r3
 800503e:	f7fd fbb7 	bl	80027b0 <HAL_DMA_Abort_IT>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d019      	beq.n	800507c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800504e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005056:	4610      	mov	r0, r2
 8005058:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800505a:	e00f      	b.n	800507c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f9ff 	bl	8005460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005062:	e00b      	b.n	800507c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f9fb 	bl	8005460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800506a:	e007      	b.n	800507c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f9f7 	bl	8005460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800507a:	e1dc      	b.n	8005436 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800507c:	bf00      	nop
    return;
 800507e:	e1da      	b.n	8005436 <HAL_UART_IRQHandler+0x66e>
 8005080:	10000001 	.word	0x10000001
 8005084:	04000120 	.word	0x04000120
 8005088:	08006109 	.word	0x08006109

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005090:	2b01      	cmp	r3, #1
 8005092:	f040 8170 	bne.w	8005376 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800509a:	f003 0310 	and.w	r3, r3, #16
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 8169 	beq.w	8005376 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80050a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050a8:	f003 0310 	and.w	r3, r3, #16
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 8162 	beq.w	8005376 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2210      	movs	r2, #16
 80050b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c4:	2b40      	cmp	r3, #64	@ 0x40
 80050c6:	f040 80d8 	bne.w	800527a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 80af 	beq.w	8005240 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80050e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050ec:	429a      	cmp	r2, r3
 80050ee:	f080 80a7 	bcs.w	8005240 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	f040 8087 	bne.w	800521e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800511c:	e853 3f00 	ldrex	r3, [r3]
 8005120:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005124:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005128:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800512c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	461a      	mov	r2, r3
 8005136:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800513a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800513e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005142:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005146:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005152:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1da      	bne.n	8005110 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3308      	adds	r3, #8
 8005160:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005162:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800516a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800516c:	f023 0301 	bic.w	r3, r3, #1
 8005170:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3308      	adds	r3, #8
 800517a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800517e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005182:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005184:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005186:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005190:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e1      	bne.n	800515a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3308      	adds	r3, #8
 800519c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051a0:	e853 3f00 	ldrex	r3, [r3]
 80051a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80051a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3308      	adds	r3, #8
 80051b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80051ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80051c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051c2:	e841 2300 	strex	r3, r2, [r1]
 80051c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1e3      	bne.n	8005196 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051ec:	f023 0310 	bic.w	r3, r3, #16
 80051f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005200:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005202:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005204:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005206:	e841 2300 	strex	r3, r2, [r1]
 800520a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800520c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1e4      	bne.n	80051dc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005218:	4618      	mov	r0, r3
 800521a:	f7fd fa70 	bl	80026fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2202      	movs	r2, #2
 8005222:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005230:	b29b      	uxth	r3, r3
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	b29b      	uxth	r3, r3
 8005236:	4619      	mov	r1, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f91b 	bl	8005474 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800523e:	e0fc      	b.n	800543a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005246:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800524a:	429a      	cmp	r2, r3
 800524c:	f040 80f5 	bne.w	800543a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0320 	and.w	r3, r3, #32
 800525e:	2b20      	cmp	r3, #32
 8005260:	f040 80eb 	bne.w	800543a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005270:	4619      	mov	r1, r3
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f8fe 	bl	8005474 <HAL_UARTEx_RxEventCallback>
      return;
 8005278:	e0df      	b.n	800543a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005286:	b29b      	uxth	r3, r3
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 80d1 	beq.w	800543e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800529c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 80cc 	beq.w	800543e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80052ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e4      	bne.n	80052a6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3308      	adds	r3, #8
 80052e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	623b      	str	r3, [r7, #32]
   return(result);
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052f2:	f023 0301 	bic.w	r3, r3, #1
 80052f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3308      	adds	r3, #8
 8005300:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005304:	633a      	str	r2, [r7, #48]	@ 0x30
 8005306:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800530a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e1      	bne.n	80052dc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	60fb      	str	r3, [r7, #12]
   return(result);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f023 0310 	bic.w	r3, r3, #16
 8005340:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800534e:	61fb      	str	r3, [r7, #28]
 8005350:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	69b9      	ldr	r1, [r7, #24]
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	617b      	str	r3, [r7, #20]
   return(result);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e4      	bne.n	800532c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2202      	movs	r2, #2
 8005366:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800536c:	4619      	mov	r1, r3
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f880 	bl	8005474 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005374:	e063      	b.n	800543e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800537a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00e      	beq.n	80053a0 <HAL_UART_IRQHandler+0x5d8>
 8005382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d008      	beq.n	80053a0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005396:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f001 fc13 	bl	8006bc4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800539e:	e051      	b.n	8005444 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80053a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d014      	beq.n	80053d6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80053ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d105      	bne.n	80053c4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80053b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d03a      	beq.n	8005442 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	4798      	blx	r3
    }
    return;
 80053d4:	e035      	b.n	8005442 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d009      	beq.n	80053f6 <HAL_UART_IRQHandler+0x62e>
 80053e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fe9c 	bl	800612c <UART_EndTransmit_IT>
    return;
 80053f4:	e026      	b.n	8005444 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80053f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <HAL_UART_IRQHandler+0x64e>
 8005402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005406:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f001 fbec 	bl	8006bec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005414:	e016      	b.n	8005444 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800541a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d010      	beq.n	8005444 <HAL_UART_IRQHandler+0x67c>
 8005422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005426:	2b00      	cmp	r3, #0
 8005428:	da0c      	bge.n	8005444 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f001 fbd4 	bl	8006bd8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005430:	e008      	b.n	8005444 <HAL_UART_IRQHandler+0x67c>
      return;
 8005432:	bf00      	nop
 8005434:	e006      	b.n	8005444 <HAL_UART_IRQHandler+0x67c>
    return;
 8005436:	bf00      	nop
 8005438:	e004      	b.n	8005444 <HAL_UART_IRQHandler+0x67c>
      return;
 800543a:	bf00      	nop
 800543c:	e002      	b.n	8005444 <HAL_UART_IRQHandler+0x67c>
      return;
 800543e:	bf00      	nop
 8005440:	e000      	b.n	8005444 <HAL_UART_IRQHandler+0x67c>
    return;
 8005442:	bf00      	nop
  }
}
 8005444:	37e8      	adds	r7, #232	@ 0xe8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop

0800544c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800548c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005490:	b08c      	sub	sp, #48	@ 0x30
 8005492:	af00      	add	r7, sp, #0
 8005494:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	431a      	orrs	r2, r3
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	4baa      	ldr	r3, [pc, #680]	@ (8005764 <UART_SetConfig+0x2d8>)
 80054bc:	4013      	ands	r3, r2
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	6812      	ldr	r2, [r2, #0]
 80054c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a9f      	ldr	r2, [pc, #636]	@ (8005768 <UART_SetConfig+0x2dc>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d004      	beq.n	80054f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054f4:	4313      	orrs	r3, r2
 80054f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005502:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	6812      	ldr	r2, [r2, #0]
 800550a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800550c:	430b      	orrs	r3, r1
 800550e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005516:	f023 010f 	bic.w	r1, r3, #15
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a90      	ldr	r2, [pc, #576]	@ (800576c <UART_SetConfig+0x2e0>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d125      	bne.n	800557c <UART_SetConfig+0xf0>
 8005530:	4b8f      	ldr	r3, [pc, #572]	@ (8005770 <UART_SetConfig+0x2e4>)
 8005532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	2b03      	cmp	r3, #3
 800553c:	d81a      	bhi.n	8005574 <UART_SetConfig+0xe8>
 800553e:	a201      	add	r2, pc, #4	@ (adr r2, 8005544 <UART_SetConfig+0xb8>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	08005555 	.word	0x08005555
 8005548:	08005565 	.word	0x08005565
 800554c:	0800555d 	.word	0x0800555d
 8005550:	0800556d 	.word	0x0800556d
 8005554:	2301      	movs	r3, #1
 8005556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800555a:	e116      	b.n	800578a <UART_SetConfig+0x2fe>
 800555c:	2302      	movs	r3, #2
 800555e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005562:	e112      	b.n	800578a <UART_SetConfig+0x2fe>
 8005564:	2304      	movs	r3, #4
 8005566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800556a:	e10e      	b.n	800578a <UART_SetConfig+0x2fe>
 800556c:	2308      	movs	r3, #8
 800556e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005572:	e10a      	b.n	800578a <UART_SetConfig+0x2fe>
 8005574:	2310      	movs	r3, #16
 8005576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800557a:	e106      	b.n	800578a <UART_SetConfig+0x2fe>
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a7c      	ldr	r2, [pc, #496]	@ (8005774 <UART_SetConfig+0x2e8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d138      	bne.n	80055f8 <UART_SetConfig+0x16c>
 8005586:	4b7a      	ldr	r3, [pc, #488]	@ (8005770 <UART_SetConfig+0x2e4>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558c:	f003 030c 	and.w	r3, r3, #12
 8005590:	2b0c      	cmp	r3, #12
 8005592:	d82d      	bhi.n	80055f0 <UART_SetConfig+0x164>
 8005594:	a201      	add	r2, pc, #4	@ (adr r2, 800559c <UART_SetConfig+0x110>)
 8005596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559a:	bf00      	nop
 800559c:	080055d1 	.word	0x080055d1
 80055a0:	080055f1 	.word	0x080055f1
 80055a4:	080055f1 	.word	0x080055f1
 80055a8:	080055f1 	.word	0x080055f1
 80055ac:	080055e1 	.word	0x080055e1
 80055b0:	080055f1 	.word	0x080055f1
 80055b4:	080055f1 	.word	0x080055f1
 80055b8:	080055f1 	.word	0x080055f1
 80055bc:	080055d9 	.word	0x080055d9
 80055c0:	080055f1 	.word	0x080055f1
 80055c4:	080055f1 	.word	0x080055f1
 80055c8:	080055f1 	.word	0x080055f1
 80055cc:	080055e9 	.word	0x080055e9
 80055d0:	2300      	movs	r3, #0
 80055d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055d6:	e0d8      	b.n	800578a <UART_SetConfig+0x2fe>
 80055d8:	2302      	movs	r3, #2
 80055da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055de:	e0d4      	b.n	800578a <UART_SetConfig+0x2fe>
 80055e0:	2304      	movs	r3, #4
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055e6:	e0d0      	b.n	800578a <UART_SetConfig+0x2fe>
 80055e8:	2308      	movs	r3, #8
 80055ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ee:	e0cc      	b.n	800578a <UART_SetConfig+0x2fe>
 80055f0:	2310      	movs	r3, #16
 80055f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055f6:	e0c8      	b.n	800578a <UART_SetConfig+0x2fe>
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a5e      	ldr	r2, [pc, #376]	@ (8005778 <UART_SetConfig+0x2ec>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d125      	bne.n	800564e <UART_SetConfig+0x1c2>
 8005602:	4b5b      	ldr	r3, [pc, #364]	@ (8005770 <UART_SetConfig+0x2e4>)
 8005604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005608:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800560c:	2b30      	cmp	r3, #48	@ 0x30
 800560e:	d016      	beq.n	800563e <UART_SetConfig+0x1b2>
 8005610:	2b30      	cmp	r3, #48	@ 0x30
 8005612:	d818      	bhi.n	8005646 <UART_SetConfig+0x1ba>
 8005614:	2b20      	cmp	r3, #32
 8005616:	d00a      	beq.n	800562e <UART_SetConfig+0x1a2>
 8005618:	2b20      	cmp	r3, #32
 800561a:	d814      	bhi.n	8005646 <UART_SetConfig+0x1ba>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <UART_SetConfig+0x19a>
 8005620:	2b10      	cmp	r3, #16
 8005622:	d008      	beq.n	8005636 <UART_SetConfig+0x1aa>
 8005624:	e00f      	b.n	8005646 <UART_SetConfig+0x1ba>
 8005626:	2300      	movs	r3, #0
 8005628:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800562c:	e0ad      	b.n	800578a <UART_SetConfig+0x2fe>
 800562e:	2302      	movs	r3, #2
 8005630:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005634:	e0a9      	b.n	800578a <UART_SetConfig+0x2fe>
 8005636:	2304      	movs	r3, #4
 8005638:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800563c:	e0a5      	b.n	800578a <UART_SetConfig+0x2fe>
 800563e:	2308      	movs	r3, #8
 8005640:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005644:	e0a1      	b.n	800578a <UART_SetConfig+0x2fe>
 8005646:	2310      	movs	r3, #16
 8005648:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800564c:	e09d      	b.n	800578a <UART_SetConfig+0x2fe>
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a4a      	ldr	r2, [pc, #296]	@ (800577c <UART_SetConfig+0x2f0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d125      	bne.n	80056a4 <UART_SetConfig+0x218>
 8005658:	4b45      	ldr	r3, [pc, #276]	@ (8005770 <UART_SetConfig+0x2e4>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800565e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005662:	2bc0      	cmp	r3, #192	@ 0xc0
 8005664:	d016      	beq.n	8005694 <UART_SetConfig+0x208>
 8005666:	2bc0      	cmp	r3, #192	@ 0xc0
 8005668:	d818      	bhi.n	800569c <UART_SetConfig+0x210>
 800566a:	2b80      	cmp	r3, #128	@ 0x80
 800566c:	d00a      	beq.n	8005684 <UART_SetConfig+0x1f8>
 800566e:	2b80      	cmp	r3, #128	@ 0x80
 8005670:	d814      	bhi.n	800569c <UART_SetConfig+0x210>
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <UART_SetConfig+0x1f0>
 8005676:	2b40      	cmp	r3, #64	@ 0x40
 8005678:	d008      	beq.n	800568c <UART_SetConfig+0x200>
 800567a:	e00f      	b.n	800569c <UART_SetConfig+0x210>
 800567c:	2300      	movs	r3, #0
 800567e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005682:	e082      	b.n	800578a <UART_SetConfig+0x2fe>
 8005684:	2302      	movs	r3, #2
 8005686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800568a:	e07e      	b.n	800578a <UART_SetConfig+0x2fe>
 800568c:	2304      	movs	r3, #4
 800568e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005692:	e07a      	b.n	800578a <UART_SetConfig+0x2fe>
 8005694:	2308      	movs	r3, #8
 8005696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800569a:	e076      	b.n	800578a <UART_SetConfig+0x2fe>
 800569c:	2310      	movs	r3, #16
 800569e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056a2:	e072      	b.n	800578a <UART_SetConfig+0x2fe>
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a35      	ldr	r2, [pc, #212]	@ (8005780 <UART_SetConfig+0x2f4>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d12a      	bne.n	8005704 <UART_SetConfig+0x278>
 80056ae:	4b30      	ldr	r3, [pc, #192]	@ (8005770 <UART_SetConfig+0x2e4>)
 80056b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056bc:	d01a      	beq.n	80056f4 <UART_SetConfig+0x268>
 80056be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056c2:	d81b      	bhi.n	80056fc <UART_SetConfig+0x270>
 80056c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056c8:	d00c      	beq.n	80056e4 <UART_SetConfig+0x258>
 80056ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056ce:	d815      	bhi.n	80056fc <UART_SetConfig+0x270>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <UART_SetConfig+0x250>
 80056d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056d8:	d008      	beq.n	80056ec <UART_SetConfig+0x260>
 80056da:	e00f      	b.n	80056fc <UART_SetConfig+0x270>
 80056dc:	2300      	movs	r3, #0
 80056de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056e2:	e052      	b.n	800578a <UART_SetConfig+0x2fe>
 80056e4:	2302      	movs	r3, #2
 80056e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ea:	e04e      	b.n	800578a <UART_SetConfig+0x2fe>
 80056ec:	2304      	movs	r3, #4
 80056ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056f2:	e04a      	b.n	800578a <UART_SetConfig+0x2fe>
 80056f4:	2308      	movs	r3, #8
 80056f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056fa:	e046      	b.n	800578a <UART_SetConfig+0x2fe>
 80056fc:	2310      	movs	r3, #16
 80056fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005702:	e042      	b.n	800578a <UART_SetConfig+0x2fe>
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a17      	ldr	r2, [pc, #92]	@ (8005768 <UART_SetConfig+0x2dc>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d13a      	bne.n	8005784 <UART_SetConfig+0x2f8>
 800570e:	4b18      	ldr	r3, [pc, #96]	@ (8005770 <UART_SetConfig+0x2e4>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005714:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005718:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800571c:	d01a      	beq.n	8005754 <UART_SetConfig+0x2c8>
 800571e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005722:	d81b      	bhi.n	800575c <UART_SetConfig+0x2d0>
 8005724:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005728:	d00c      	beq.n	8005744 <UART_SetConfig+0x2b8>
 800572a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800572e:	d815      	bhi.n	800575c <UART_SetConfig+0x2d0>
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <UART_SetConfig+0x2b0>
 8005734:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005738:	d008      	beq.n	800574c <UART_SetConfig+0x2c0>
 800573a:	e00f      	b.n	800575c <UART_SetConfig+0x2d0>
 800573c:	2300      	movs	r3, #0
 800573e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005742:	e022      	b.n	800578a <UART_SetConfig+0x2fe>
 8005744:	2302      	movs	r3, #2
 8005746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800574a:	e01e      	b.n	800578a <UART_SetConfig+0x2fe>
 800574c:	2304      	movs	r3, #4
 800574e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005752:	e01a      	b.n	800578a <UART_SetConfig+0x2fe>
 8005754:	2308      	movs	r3, #8
 8005756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800575a:	e016      	b.n	800578a <UART_SetConfig+0x2fe>
 800575c:	2310      	movs	r3, #16
 800575e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005762:	e012      	b.n	800578a <UART_SetConfig+0x2fe>
 8005764:	cfff69f3 	.word	0xcfff69f3
 8005768:	40008000 	.word	0x40008000
 800576c:	40013800 	.word	0x40013800
 8005770:	40021000 	.word	0x40021000
 8005774:	40004400 	.word	0x40004400
 8005778:	40004800 	.word	0x40004800
 800577c:	40004c00 	.word	0x40004c00
 8005780:	40005000 	.word	0x40005000
 8005784:	2310      	movs	r3, #16
 8005786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4aae      	ldr	r2, [pc, #696]	@ (8005a48 <UART_SetConfig+0x5bc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	f040 8097 	bne.w	80058c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005796:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800579a:	2b08      	cmp	r3, #8
 800579c:	d823      	bhi.n	80057e6 <UART_SetConfig+0x35a>
 800579e:	a201      	add	r2, pc, #4	@ (adr r2, 80057a4 <UART_SetConfig+0x318>)
 80057a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a4:	080057c9 	.word	0x080057c9
 80057a8:	080057e7 	.word	0x080057e7
 80057ac:	080057d1 	.word	0x080057d1
 80057b0:	080057e7 	.word	0x080057e7
 80057b4:	080057d7 	.word	0x080057d7
 80057b8:	080057e7 	.word	0x080057e7
 80057bc:	080057e7 	.word	0x080057e7
 80057c0:	080057e7 	.word	0x080057e7
 80057c4:	080057df 	.word	0x080057df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057c8:	f7fe ff14 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 80057cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057ce:	e010      	b.n	80057f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057d0:	4b9e      	ldr	r3, [pc, #632]	@ (8005a4c <UART_SetConfig+0x5c0>)
 80057d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057d4:	e00d      	b.n	80057f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057d6:	f7fe fe9f 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 80057da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057dc:	e009      	b.n	80057f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057e4:	e005      	b.n	80057f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80057f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 8130 	beq.w	8005a5a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fe:	4a94      	ldr	r2, [pc, #592]	@ (8005a50 <UART_SetConfig+0x5c4>)
 8005800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005804:	461a      	mov	r2, r3
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	fbb3 f3f2 	udiv	r3, r3, r2
 800580c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	4613      	mov	r3, r2
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	4413      	add	r3, r2
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	429a      	cmp	r2, r3
 800581c:	d305      	bcc.n	800582a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	429a      	cmp	r2, r3
 8005828:	d903      	bls.n	8005832 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005830:	e113      	b.n	8005a5a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	2200      	movs	r2, #0
 8005836:	60bb      	str	r3, [r7, #8]
 8005838:	60fa      	str	r2, [r7, #12]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583e:	4a84      	ldr	r2, [pc, #528]	@ (8005a50 <UART_SetConfig+0x5c4>)
 8005840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005844:	b29b      	uxth	r3, r3
 8005846:	2200      	movs	r2, #0
 8005848:	603b      	str	r3, [r7, #0]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005850:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005854:	f7fb f9d0 	bl	8000bf8 <__aeabi_uldivmod>
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	4610      	mov	r0, r2
 800585e:	4619      	mov	r1, r3
 8005860:	f04f 0200 	mov.w	r2, #0
 8005864:	f04f 0300 	mov.w	r3, #0
 8005868:	020b      	lsls	r3, r1, #8
 800586a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800586e:	0202      	lsls	r2, r0, #8
 8005870:	6979      	ldr	r1, [r7, #20]
 8005872:	6849      	ldr	r1, [r1, #4]
 8005874:	0849      	lsrs	r1, r1, #1
 8005876:	2000      	movs	r0, #0
 8005878:	460c      	mov	r4, r1
 800587a:	4605      	mov	r5, r0
 800587c:	eb12 0804 	adds.w	r8, r2, r4
 8005880:	eb43 0905 	adc.w	r9, r3, r5
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	469a      	mov	sl, r3
 800588c:	4693      	mov	fp, r2
 800588e:	4652      	mov	r2, sl
 8005890:	465b      	mov	r3, fp
 8005892:	4640      	mov	r0, r8
 8005894:	4649      	mov	r1, r9
 8005896:	f7fb f9af 	bl	8000bf8 <__aeabi_uldivmod>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	4613      	mov	r3, r2
 80058a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058a8:	d308      	bcc.n	80058bc <UART_SetConfig+0x430>
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058b0:	d204      	bcs.n	80058bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6a3a      	ldr	r2, [r7, #32]
 80058b8:	60da      	str	r2, [r3, #12]
 80058ba:	e0ce      	b.n	8005a5a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80058c2:	e0ca      	b.n	8005a5a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058cc:	d166      	bne.n	800599c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80058ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d827      	bhi.n	8005926 <UART_SetConfig+0x49a>
 80058d6:	a201      	add	r2, pc, #4	@ (adr r2, 80058dc <UART_SetConfig+0x450>)
 80058d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058dc:	08005901 	.word	0x08005901
 80058e0:	08005909 	.word	0x08005909
 80058e4:	08005911 	.word	0x08005911
 80058e8:	08005927 	.word	0x08005927
 80058ec:	08005917 	.word	0x08005917
 80058f0:	08005927 	.word	0x08005927
 80058f4:	08005927 	.word	0x08005927
 80058f8:	08005927 	.word	0x08005927
 80058fc:	0800591f 	.word	0x0800591f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005900:	f7fe fe78 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 8005904:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005906:	e014      	b.n	8005932 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005908:	f7fe fe8a 	bl	8004620 <HAL_RCC_GetPCLK2Freq>
 800590c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800590e:	e010      	b.n	8005932 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005910:	4b4e      	ldr	r3, [pc, #312]	@ (8005a4c <UART_SetConfig+0x5c0>)
 8005912:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005914:	e00d      	b.n	8005932 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005916:	f7fe fdff 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 800591a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800591c:	e009      	b.n	8005932 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800591e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005922:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005924:	e005      	b.n	8005932 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005930:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8090 	beq.w	8005a5a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593e:	4a44      	ldr	r2, [pc, #272]	@ (8005a50 <UART_SetConfig+0x5c4>)
 8005940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005944:	461a      	mov	r2, r3
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	fbb3 f3f2 	udiv	r3, r3, r2
 800594c:	005a      	lsls	r2, r3, #1
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	085b      	lsrs	r3, r3, #1
 8005954:	441a      	add	r2, r3
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	fbb2 f3f3 	udiv	r3, r2, r3
 800595e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	2b0f      	cmp	r3, #15
 8005964:	d916      	bls.n	8005994 <UART_SetConfig+0x508>
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800596c:	d212      	bcs.n	8005994 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	b29b      	uxth	r3, r3
 8005972:	f023 030f 	bic.w	r3, r3, #15
 8005976:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	085b      	lsrs	r3, r3, #1
 800597c:	b29b      	uxth	r3, r3
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	b29a      	uxth	r2, r3
 8005984:	8bfb      	ldrh	r3, [r7, #30]
 8005986:	4313      	orrs	r3, r2
 8005988:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	8bfa      	ldrh	r2, [r7, #30]
 8005990:	60da      	str	r2, [r3, #12]
 8005992:	e062      	b.n	8005a5a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800599a:	e05e      	b.n	8005a5a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800599c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d828      	bhi.n	80059f6 <UART_SetConfig+0x56a>
 80059a4:	a201      	add	r2, pc, #4	@ (adr r2, 80059ac <UART_SetConfig+0x520>)
 80059a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059aa:	bf00      	nop
 80059ac:	080059d1 	.word	0x080059d1
 80059b0:	080059d9 	.word	0x080059d9
 80059b4:	080059e1 	.word	0x080059e1
 80059b8:	080059f7 	.word	0x080059f7
 80059bc:	080059e7 	.word	0x080059e7
 80059c0:	080059f7 	.word	0x080059f7
 80059c4:	080059f7 	.word	0x080059f7
 80059c8:	080059f7 	.word	0x080059f7
 80059cc:	080059ef 	.word	0x080059ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d0:	f7fe fe10 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 80059d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059d6:	e014      	b.n	8005a02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059d8:	f7fe fe22 	bl	8004620 <HAL_RCC_GetPCLK2Freq>
 80059dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059de:	e010      	b.n	8005a02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a4c <UART_SetConfig+0x5c0>)
 80059e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059e4:	e00d      	b.n	8005a02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059e6:	f7fe fd97 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 80059ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059ec:	e009      	b.n	8005a02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059f4:	e005      	b.n	8005a02 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a00:	bf00      	nop
    }

    if (pclk != 0U)
 8005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d028      	beq.n	8005a5a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0c:	4a10      	ldr	r2, [pc, #64]	@ (8005a50 <UART_SetConfig+0x5c4>)
 8005a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a12:	461a      	mov	r2, r3
 8005a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a16:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	085b      	lsrs	r3, r3, #1
 8005a20:	441a      	add	r2, r3
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	2b0f      	cmp	r3, #15
 8005a30:	d910      	bls.n	8005a54 <UART_SetConfig+0x5c8>
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a38:	d20c      	bcs.n	8005a54 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60da      	str	r2, [r3, #12]
 8005a44:	e009      	b.n	8005a5a <UART_SetConfig+0x5ce>
 8005a46:	bf00      	nop
 8005a48:	40008000 	.word	0x40008000
 8005a4c:	00f42400 	.word	0x00f42400
 8005a50:	0800a8b4 	.word	0x0800a8b4
      }
      else
      {
        ret = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2200      	movs	r2, #0
 8005a74:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a76:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3730      	adds	r7, #48	@ 0x30
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00a      	beq.n	8005b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3a:	f003 0320 	and.w	r3, r3, #32
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00a      	beq.n	8005b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01a      	beq.n	8005b9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b82:	d10a      	bne.n	8005b9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00a      	beq.n	8005bbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	605a      	str	r2, [r3, #4]
  }
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b098      	sub	sp, #96	@ 0x60
 8005bcc:	af02      	add	r7, sp, #8
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bd8:	f7fc fc54 	bl	8002484 <HAL_GetTick>
 8005bdc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0308 	and.w	r3, r3, #8
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d12f      	bne.n	8005c4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f88e 	bl	8005d1c <UART_WaitOnFlagUntilTimeout>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d022      	beq.n	8005c4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0e:	e853 3f00 	ldrex	r3, [r3]
 8005c12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c24:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c2c:	e841 2300 	strex	r3, r2, [r1]
 8005c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e6      	bne.n	8005c06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e063      	b.n	8005d14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d149      	bne.n	8005cee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c5a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c62:	2200      	movs	r2, #0
 8005c64:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f857 	bl	8005d1c <UART_WaitOnFlagUntilTimeout>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d03c      	beq.n	8005cee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	623b      	str	r3, [r7, #32]
   return(result);
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c92:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c94:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e6      	bne.n	8005c74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3308      	adds	r3, #8
 8005cac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f023 0301 	bic.w	r3, r3, #1
 8005cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cc6:	61fa      	str	r2, [r7, #28]
 8005cc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cca:	69b9      	ldr	r1, [r7, #24]
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	617b      	str	r3, [r7, #20]
   return(result);
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1e5      	bne.n	8005ca6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e012      	b.n	8005d14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3758      	adds	r7, #88	@ 0x58
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	603b      	str	r3, [r7, #0]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d2c:	e04f      	b.n	8005dce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d34:	d04b      	beq.n	8005dce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d36:	f7fc fba5 	bl	8002484 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d302      	bcc.n	8005d4c <UART_WaitOnFlagUntilTimeout+0x30>
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e04e      	b.n	8005dee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0304 	and.w	r3, r3, #4
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d037      	beq.n	8005dce <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b80      	cmp	r3, #128	@ 0x80
 8005d62:	d034      	beq.n	8005dce <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b40      	cmp	r3, #64	@ 0x40
 8005d68:	d031      	beq.n	8005dce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	f003 0308 	and.w	r3, r3, #8
 8005d74:	2b08      	cmp	r3, #8
 8005d76:	d110      	bne.n	8005d9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2208      	movs	r2, #8
 8005d7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 f95b 	bl	800603c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2208      	movs	r2, #8
 8005d8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e029      	b.n	8005dee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005da4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005da8:	d111      	bne.n	8005dce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005db2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 f941 	bl	800603c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e00f      	b.n	8005dee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69da      	ldr	r2, [r3, #28]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	bf0c      	ite	eq
 8005dde:	2301      	moveq	r3, #1
 8005de0:	2300      	movne	r3, #0
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	461a      	mov	r2, r3
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d0a0      	beq.n	8005d2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b0a3      	sub	sp, #140	@ 0x8c
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	4613      	mov	r3, r2
 8005e04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	88fa      	ldrh	r2, [r7, #6]
 8005e10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	88fa      	ldrh	r2, [r7, #6]
 8005e18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e2a:	d10e      	bne.n	8005e4a <UART_Start_Receive_IT+0x52>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d105      	bne.n	8005e40 <UART_Start_Receive_IT+0x48>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005e3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e3e:	e02d      	b.n	8005e9c <UART_Start_Receive_IT+0xa4>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	22ff      	movs	r2, #255	@ 0xff
 8005e44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e48:	e028      	b.n	8005e9c <UART_Start_Receive_IT+0xa4>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10d      	bne.n	8005e6e <UART_Start_Receive_IT+0x76>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d104      	bne.n	8005e64 <UART_Start_Receive_IT+0x6c>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	22ff      	movs	r2, #255	@ 0xff
 8005e5e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e62:	e01b      	b.n	8005e9c <UART_Start_Receive_IT+0xa4>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	227f      	movs	r2, #127	@ 0x7f
 8005e68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e6c:	e016      	b.n	8005e9c <UART_Start_Receive_IT+0xa4>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e76:	d10d      	bne.n	8005e94 <UART_Start_Receive_IT+0x9c>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d104      	bne.n	8005e8a <UART_Start_Receive_IT+0x92>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	227f      	movs	r2, #127	@ 0x7f
 8005e84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e88:	e008      	b.n	8005e9c <UART_Start_Receive_IT+0xa4>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	223f      	movs	r2, #63	@ 0x3f
 8005e8e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e92:	e003      	b.n	8005e9c <UART_Start_Receive_IT+0xa4>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2222      	movs	r2, #34	@ 0x22
 8005ea8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005ebc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3308      	adds	r3, #8
 8005ecc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005ed0:	673a      	str	r2, [r7, #112]	@ 0x70
 8005ed2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005ed6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005ede:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e3      	bne.n	8005eac <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ee8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005eec:	d14f      	bne.n	8005f8e <UART_Start_Receive_IT+0x196>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005ef4:	88fa      	ldrh	r2, [r7, #6]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d349      	bcc.n	8005f8e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f02:	d107      	bne.n	8005f14 <UART_Start_Receive_IT+0x11c>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d103      	bne.n	8005f14 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4a47      	ldr	r2, [pc, #284]	@ (800602c <UART_Start_Receive_IT+0x234>)
 8005f10:	675a      	str	r2, [r3, #116]	@ 0x74
 8005f12:	e002      	b.n	8005f1a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4a46      	ldr	r2, [pc, #280]	@ (8006030 <UART_Start_Receive_IT+0x238>)
 8005f18:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01a      	beq.n	8005f58 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f2a:	e853 3f00 	ldrex	r3, [r3]
 8005f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f46:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f48:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005f4a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f4c:	e841 2300 	strex	r3, r2, [r1]
 8005f50:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1e4      	bne.n	8005f22 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f62:	e853 3f00 	ldrex	r3, [r3]
 8005f66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3308      	adds	r3, #8
 8005f76:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005f78:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005f7a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f80:	e841 2300 	strex	r3, r2, [r1]
 8005f84:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1e5      	bne.n	8005f58 <UART_Start_Receive_IT+0x160>
 8005f8c:	e046      	b.n	800601c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f96:	d107      	bne.n	8005fa8 <UART_Start_Receive_IT+0x1b0>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d103      	bne.n	8005fa8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4a24      	ldr	r2, [pc, #144]	@ (8006034 <UART_Start_Receive_IT+0x23c>)
 8005fa4:	675a      	str	r2, [r3, #116]	@ 0x74
 8005fa6:	e002      	b.n	8005fae <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4a23      	ldr	r2, [pc, #140]	@ (8006038 <UART_Start_Receive_IT+0x240>)
 8005fac:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d019      	beq.n	8005fea <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005fca:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fd6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e6      	bne.n	8005fb6 <UART_Start_Receive_IT+0x1be>
 8005fe8:	e018      	b.n	800601c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f043 0320 	orr.w	r3, r3, #32
 8005ffe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006008:	623b      	str	r3, [r7, #32]
 800600a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	69f9      	ldr	r1, [r7, #28]
 800600e:	6a3a      	ldr	r2, [r7, #32]
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	61bb      	str	r3, [r7, #24]
   return(result);
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e6      	bne.n	8005fea <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	378c      	adds	r7, #140	@ 0x8c
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	08006859 	.word	0x08006859
 8006030:	080064f5 	.word	0x080064f5
 8006034:	0800633d 	.word	0x0800633d
 8006038:	08006185 	.word	0x08006185

0800603c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b095      	sub	sp, #84	@ 0x54
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006054:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006058:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006062:	643b      	str	r3, [r7, #64]	@ 0x40
 8006064:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006066:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006068:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800606a:	e841 2300 	strex	r3, r2, [r1]
 800606e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1e6      	bne.n	8006044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3308      	adds	r3, #8
 800607c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	e853 3f00 	ldrex	r3, [r3]
 8006084:	61fb      	str	r3, [r7, #28]
   return(result);
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800608c:	f023 0301 	bic.w	r3, r3, #1
 8006090:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3308      	adds	r3, #8
 8006098:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800609a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800609c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e3      	bne.n	8006076 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d118      	bne.n	80060e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	e853 3f00 	ldrex	r3, [r3]
 80060c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f023 0310 	bic.w	r3, r3, #16
 80060ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	461a      	mov	r2, r3
 80060d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060d4:	61bb      	str	r3, [r7, #24]
 80060d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d8:	6979      	ldr	r1, [r7, #20]
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	e841 2300 	strex	r3, r2, [r1]
 80060e0:	613b      	str	r3, [r7, #16]
   return(result);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1e6      	bne.n	80060b6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80060fc:	bf00      	nop
 80060fe:	3754      	adds	r7, #84	@ 0x54
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006114:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff f99e 	bl	8005460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006124:	bf00      	nop
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	60bb      	str	r3, [r7, #8]
   return(result);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	461a      	mov	r2, r3
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	61bb      	str	r3, [r7, #24]
 8006154:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	6979      	ldr	r1, [r7, #20]
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	613b      	str	r3, [r7, #16]
   return(result);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e6      	bne.n	8006134 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff f969 	bl	800544c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800617a:	bf00      	nop
 800617c:	3720      	adds	r7, #32
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b09c      	sub	sp, #112	@ 0x70
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006192:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800619c:	2b22      	cmp	r3, #34	@ 0x22
 800619e:	f040 80be 	bne.w	800631e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80061ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80061b0:	b2d9      	uxtb	r1, r3
 80061b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061bc:	400a      	ands	r2, r1
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f040 80a1 	bne.w	800632e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80061fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006200:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800620a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800620c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006210:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e6      	bne.n	80061ec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3308      	adds	r3, #8
 8006224:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006228:	e853 3f00 	ldrex	r3, [r3]
 800622c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800622e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006230:	f023 0301 	bic.w	r3, r3, #1
 8006234:	667b      	str	r3, [r7, #100]	@ 0x64
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3308      	adds	r3, #8
 800623c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800623e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006240:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006242:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006244:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006246:	e841 2300 	strex	r3, r2, [r1]
 800624a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800624c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1e5      	bne.n	800621e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2220      	movs	r2, #32
 8006256:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a33      	ldr	r2, [pc, #204]	@ (8006338 <UART_RxISR_8BIT+0x1b4>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d01f      	beq.n	80062b0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d018      	beq.n	80062b0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006286:	e853 3f00 	ldrex	r3, [r3]
 800628a:	623b      	str	r3, [r7, #32]
   return(result);
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006292:	663b      	str	r3, [r7, #96]	@ 0x60
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800629c:	633b      	str	r3, [r7, #48]	@ 0x30
 800629e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062a4:	e841 2300 	strex	r3, r2, [r1]
 80062a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e6      	bne.n	800627e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d12e      	bne.n	8006316 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	e853 3f00 	ldrex	r3, [r3]
 80062ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0310 	bic.w	r3, r3, #16
 80062d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	461a      	mov	r2, r3
 80062da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	69b9      	ldr	r1, [r7, #24]
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	e841 2300 	strex	r3, r2, [r1]
 80062e8:	617b      	str	r3, [r7, #20]
   return(result);
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e6      	bne.n	80062be <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	f003 0310 	and.w	r3, r3, #16
 80062fa:	2b10      	cmp	r3, #16
 80062fc:	d103      	bne.n	8006306 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2210      	movs	r2, #16
 8006304:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800630c:	4619      	mov	r1, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7ff f8b0 	bl	8005474 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006314:	e00b      	b.n	800632e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7fa fe78 	bl	800100c <HAL_UART_RxCpltCallback>
}
 800631c:	e007      	b.n	800632e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	699a      	ldr	r2, [r3, #24]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f042 0208 	orr.w	r2, r2, #8
 800632c:	619a      	str	r2, [r3, #24]
}
 800632e:	bf00      	nop
 8006330:	3770      	adds	r7, #112	@ 0x70
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	40008000 	.word	0x40008000

0800633c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b09c      	sub	sp, #112	@ 0x70
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800634a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006354:	2b22      	cmp	r3, #34	@ 0x22
 8006356:	f040 80be 	bne.w	80064d6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006360:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006368:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800636a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800636e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006372:	4013      	ands	r3, r2
 8006374:	b29a      	uxth	r2, r3
 8006376:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006378:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800637e:	1c9a      	adds	r2, r3, #2
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800638a:	b29b      	uxth	r3, r3
 800638c:	3b01      	subs	r3, #1
 800638e:	b29a      	uxth	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f040 80a1 	bne.w	80064e6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80063b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	461a      	mov	r2, r3
 80063c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80063c4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80063c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80063ca:	e841 2300 	strex	r3, r2, [r1]
 80063ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80063d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e6      	bne.n	80063a4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3308      	adds	r3, #8
 80063dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e0:	e853 3f00 	ldrex	r3, [r3]
 80063e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e8:	f023 0301 	bic.w	r3, r3, #1
 80063ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3308      	adds	r3, #8
 80063f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80063f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80063f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063fe:	e841 2300 	strex	r3, r2, [r1]
 8006402:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1e5      	bne.n	80063d6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2220      	movs	r2, #32
 800640e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a33      	ldr	r2, [pc, #204]	@ (80064f0 <UART_RxISR_16BIT+0x1b4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d01f      	beq.n	8006468 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d018      	beq.n	8006468 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	e853 3f00 	ldrex	r3, [r3]
 8006442:	61fb      	str	r3, [r7, #28]
   return(result);
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800644a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	461a      	mov	r2, r3
 8006452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006456:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800645a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e6      	bne.n	8006436 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800646c:	2b01      	cmp	r3, #1
 800646e:	d12e      	bne.n	80064ce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	e853 3f00 	ldrex	r3, [r3]
 8006482:	60bb      	str	r3, [r7, #8]
   return(result);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f023 0310 	bic.w	r3, r3, #16
 800648a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006494:	61bb      	str	r3, [r7, #24]
 8006496:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006498:	6979      	ldr	r1, [r7, #20]
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	e841 2300 	strex	r3, r2, [r1]
 80064a0:	613b      	str	r3, [r7, #16]
   return(result);
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e6      	bne.n	8006476 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	f003 0310 	and.w	r3, r3, #16
 80064b2:	2b10      	cmp	r3, #16
 80064b4:	d103      	bne.n	80064be <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2210      	movs	r2, #16
 80064bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fe ffd4 	bl	8005474 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064cc:	e00b      	b.n	80064e6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7fa fd9c 	bl	800100c <HAL_UART_RxCpltCallback>
}
 80064d4:	e007      	b.n	80064e6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	699a      	ldr	r2, [r3, #24]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f042 0208 	orr.w	r2, r2, #8
 80064e4:	619a      	str	r2, [r3, #24]
}
 80064e6:	bf00      	nop
 80064e8:	3770      	adds	r7, #112	@ 0x70
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	40008000 	.word	0x40008000

080064f4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b0ac      	sub	sp, #176	@ 0xb0
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006502:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800652a:	2b22      	cmp	r3, #34	@ 0x22
 800652c:	f040 8183 	bne.w	8006836 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006536:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800653a:	e126      	b.n	800678a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006542:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006546:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800654a:	b2d9      	uxtb	r1, r3
 800654c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006550:	b2da      	uxtb	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006556:	400a      	ands	r2, r1
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006586:	f003 0307 	and.w	r3, r3, #7
 800658a:	2b00      	cmp	r3, #0
 800658c:	d053      	beq.n	8006636 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800658e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d011      	beq.n	80065be <UART_RxISR_8BIT_FIFOEN+0xca>
 800659a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800659e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00b      	beq.n	80065be <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2201      	movs	r2, #1
 80065ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065b4:	f043 0201 	orr.w	r2, r3, #1
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d011      	beq.n	80065ee <UART_RxISR_8BIT_FIFOEN+0xfa>
 80065ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00b      	beq.n	80065ee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2202      	movs	r2, #2
 80065dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e4:	f043 0204 	orr.w	r2, r3, #4
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065f2:	f003 0304 	and.w	r3, r3, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d011      	beq.n	800661e <UART_RxISR_8BIT_FIFOEN+0x12a>
 80065fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00b      	beq.n	800661e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2204      	movs	r2, #4
 800660c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006614:	f043 0202 	orr.w	r2, r3, #2
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006624:	2b00      	cmp	r3, #0
 8006626:	d006      	beq.n	8006636 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7fe ff19 	bl	8005460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800663c:	b29b      	uxth	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	f040 80a3 	bne.w	800678a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	461a      	mov	r2, r3
 8006662:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006666:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006668:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800666c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006674:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e4      	bne.n	8006644 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3308      	adds	r3, #8
 8006680:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800668a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800668c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006690:	f023 0301 	bic.w	r3, r3, #1
 8006694:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3308      	adds	r3, #8
 800669e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80066a2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80066a4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80066a8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80066aa:	e841 2300 	strex	r3, r2, [r1]
 80066ae:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80066b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e1      	bne.n	800667a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a60      	ldr	r2, [pc, #384]	@ (8006850 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d021      	beq.n	8006718 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d01a      	beq.n	8006718 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80066f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80066f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006704:	657b      	str	r3, [r7, #84]	@ 0x54
 8006706:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800670a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e4      	bne.n	80066e2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800671c:	2b01      	cmp	r3, #1
 800671e:	d130      	bne.n	8006782 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800672e:	e853 3f00 	ldrex	r3, [r3]
 8006732:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006736:	f023 0310 	bic.w	r3, r3, #16
 800673a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006748:	643b      	str	r3, [r7, #64]	@ 0x40
 800674a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800674e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e4      	bne.n	8006726 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	f003 0310 	and.w	r3, r3, #16
 8006766:	2b10      	cmp	r3, #16
 8006768:	d103      	bne.n	8006772 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2210      	movs	r2, #16
 8006770:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7fe fe7a 	bl	8005474 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006780:	e00e      	b.n	80067a0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7fa fc42 	bl	800100c <HAL_UART_RxCpltCallback>
        break;
 8006788:	e00a      	b.n	80067a0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800678a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800678e:	2b00      	cmp	r3, #0
 8006790:	d006      	beq.n	80067a0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8006792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b00      	cmp	r3, #0
 800679c:	f47f aece 	bne.w	800653c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067a6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80067aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d049      	beq.n	8006846 <UART_RxISR_8BIT_FIFOEN+0x352>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80067b8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80067bc:	429a      	cmp	r2, r3
 80067be:	d242      	bcs.n	8006846 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3308      	adds	r3, #8
 80067c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	e853 3f00 	ldrex	r3, [r3]
 80067ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80067e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067ec:	e841 2300 	strex	r3, r2, [r1]
 80067f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1e3      	bne.n	80067c0 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a16      	ldr	r2, [pc, #88]	@ (8006854 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80067fc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	e853 3f00 	ldrex	r3, [r3]
 800680a:	60bb      	str	r3, [r7, #8]
   return(result);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f043 0320 	orr.w	r3, r3, #32
 8006812:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006824:	6979      	ldr	r1, [r7, #20]
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	e841 2300 	strex	r3, r2, [r1]
 800682c:	613b      	str	r3, [r7, #16]
   return(result);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1e4      	bne.n	80067fe <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006834:	e007      	b.n	8006846 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	699a      	ldr	r2, [r3, #24]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f042 0208 	orr.w	r2, r2, #8
 8006844:	619a      	str	r2, [r3, #24]
}
 8006846:	bf00      	nop
 8006848:	37b0      	adds	r7, #176	@ 0xb0
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	40008000 	.word	0x40008000
 8006854:	08006185 	.word	0x08006185

08006858 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b0ae      	sub	sp, #184	@ 0xb8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006866:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800688e:	2b22      	cmp	r3, #34	@ 0x22
 8006890:	f040 8187 	bne.w	8006ba2 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800689a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800689e:	e12a      	b.n	8006af6 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80068b2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80068b6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80068ba:	4013      	ands	r3, r2
 80068bc:	b29a      	uxth	r2, r3
 80068be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c8:	1c9a      	adds	r2, r3, #2
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	3b01      	subs	r3, #1
 80068d8:	b29a      	uxth	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80068ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80068ee:	f003 0307 	and.w	r3, r3, #7
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d053      	beq.n	800699e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d011      	beq.n	8006926 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00b      	beq.n	8006926 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2201      	movs	r2, #1
 8006914:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800691c:	f043 0201 	orr.w	r2, r3, #1
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006926:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d011      	beq.n	8006956 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006932:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2202      	movs	r2, #2
 8006944:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800694c:	f043 0204 	orr.w	r2, r3, #4
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006956:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800695a:	f003 0304 	and.w	r3, r3, #4
 800695e:	2b00      	cmp	r3, #0
 8006960:	d011      	beq.n	8006986 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006962:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2204      	movs	r2, #4
 8006974:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800697c:	f043 0202 	orr.w	r2, r3, #2
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800698c:	2b00      	cmp	r3, #0
 800698e:	d006      	beq.n	800699e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7fe fd65 	bl	8005460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f040 80a5 	bne.w	8006af6 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80069ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	461a      	mov	r2, r3
 80069ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80069d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80069da:	e841 2300 	strex	r3, r2, [r1]
 80069de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80069e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1e2      	bne.n	80069ac <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	3308      	adds	r3, #8
 80069ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069f0:	e853 3f00 	ldrex	r3, [r3]
 80069f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80069f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069fc:	f023 0301 	bic.w	r3, r3, #1
 8006a00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3308      	adds	r3, #8
 8006a0a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006a0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e1      	bne.n	80069e6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a60      	ldr	r2, [pc, #384]	@ (8006bbc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d021      	beq.n	8006a84 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d01a      	beq.n	8006a84 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006a70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a72:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e4      	bne.n	8006a4e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d130      	bne.n	8006aee <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9a:	e853 3f00 	ldrex	r3, [r3]
 8006a9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa2:	f023 0310 	bic.w	r3, r3, #16
 8006aa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ab6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006aba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e4      	bne.n	8006a92 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	f003 0310 	and.w	r3, r3, #16
 8006ad2:	2b10      	cmp	r3, #16
 8006ad4:	d103      	bne.n	8006ade <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2210      	movs	r2, #16
 8006adc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7fe fcc4 	bl	8005474 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006aec:	e00e      	b.n	8006b0c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fa fa8c 	bl	800100c <HAL_UART_RxCpltCallback>
        break;
 8006af4:	e00a      	b.n	8006b0c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006af6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d006      	beq.n	8006b0c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8006afe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006b02:	f003 0320 	and.w	r3, r3, #32
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f47f aeca 	bne.w	80068a0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b12:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006b16:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d049      	beq.n	8006bb2 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006b24:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d242      	bcs.n	8006bb2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3308      	adds	r3, #8
 8006b32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b36:	e853 3f00 	ldrex	r3, [r3]
 8006b3a:	623b      	str	r3, [r7, #32]
   return(result);
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006b50:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b58:	e841 2300 	strex	r3, r2, [r1]
 8006b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e3      	bne.n	8006b2c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a16      	ldr	r2, [pc, #88]	@ (8006bc0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8006b68:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	e853 3f00 	ldrex	r3, [r3]
 8006b76:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f043 0320 	orr.w	r3, r3, #32
 8006b7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b8c:	61fb      	str	r3, [r7, #28]
 8006b8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	69b9      	ldr	r1, [r7, #24]
 8006b92:	69fa      	ldr	r2, [r7, #28]
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	617b      	str	r3, [r7, #20]
   return(result);
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e4      	bne.n	8006b6a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ba0:	e007      	b.n	8006bb2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	699a      	ldr	r2, [r3, #24]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f042 0208 	orr.w	r2, r2, #8
 8006bb0:	619a      	str	r2, [r3, #24]
}
 8006bb2:	bf00      	nop
 8006bb4:	37b8      	adds	r7, #184	@ 0xb8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	40008000 	.word	0x40008000
 8006bc0:	0800633d 	.word	0x0800633d

08006bc4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d101      	bne.n	8006c16 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c12:	2302      	movs	r3, #2
 8006c14:	e027      	b.n	8006c66 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2224      	movs	r2, #36	@ 0x24
 8006c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 0201 	bic.w	r2, r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d101      	bne.n	8006c8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c86:	2302      	movs	r3, #2
 8006c88:	e02d      	b.n	8006ce6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2224      	movs	r2, #36	@ 0x24
 8006c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0201 	bic.w	r2, r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f850 	bl	8006d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d101      	bne.n	8006d06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d02:	2302      	movs	r3, #2
 8006d04:	e02d      	b.n	8006d62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2224      	movs	r2, #36	@ 0x24
 8006d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0201 	bic.w	r2, r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f812 	bl	8006d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d108      	bne.n	8006d8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d8c:	e031      	b.n	8006df2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d8e:	2308      	movs	r3, #8
 8006d90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d92:	2308      	movs	r3, #8
 8006d94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	0e5b      	lsrs	r3, r3, #25
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	f003 0307 	and.w	r3, r3, #7
 8006da4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	0f5b      	lsrs	r3, r3, #29
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	f003 0307 	and.w	r3, r3, #7
 8006db4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
 8006db8:	7b3a      	ldrb	r2, [r7, #12]
 8006dba:	4911      	ldr	r1, [pc, #68]	@ (8006e00 <UARTEx_SetNbDataToProcess+0x94>)
 8006dbc:	5c8a      	ldrb	r2, [r1, r2]
 8006dbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006dc2:	7b3a      	ldrb	r2, [r7, #12]
 8006dc4:	490f      	ldr	r1, [pc, #60]	@ (8006e04 <UARTEx_SetNbDataToProcess+0x98>)
 8006dc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	7b7a      	ldrb	r2, [r7, #13]
 8006dd8:	4909      	ldr	r1, [pc, #36]	@ (8006e00 <UARTEx_SetNbDataToProcess+0x94>)
 8006dda:	5c8a      	ldrb	r2, [r1, r2]
 8006ddc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006de0:	7b7a      	ldrb	r2, [r7, #13]
 8006de2:	4908      	ldr	r1, [pc, #32]	@ (8006e04 <UARTEx_SetNbDataToProcess+0x98>)
 8006de4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006de6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006df2:	bf00      	nop
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	0800a8cc 	.word	0x0800a8cc
 8006e04:	0800a8d4 	.word	0x0800a8d4

08006e08 <__cvt>:
 8006e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	ec57 6b10 	vmov	r6, r7, d0
 8006e10:	2f00      	cmp	r7, #0
 8006e12:	460c      	mov	r4, r1
 8006e14:	4619      	mov	r1, r3
 8006e16:	463b      	mov	r3, r7
 8006e18:	bfbb      	ittet	lt
 8006e1a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006e1e:	461f      	movlt	r7, r3
 8006e20:	2300      	movge	r3, #0
 8006e22:	232d      	movlt	r3, #45	@ 0x2d
 8006e24:	700b      	strb	r3, [r1, #0]
 8006e26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e28:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006e2c:	4691      	mov	r9, r2
 8006e2e:	f023 0820 	bic.w	r8, r3, #32
 8006e32:	bfbc      	itt	lt
 8006e34:	4632      	movlt	r2, r6
 8006e36:	4616      	movlt	r6, r2
 8006e38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e3c:	d005      	beq.n	8006e4a <__cvt+0x42>
 8006e3e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006e42:	d100      	bne.n	8006e46 <__cvt+0x3e>
 8006e44:	3401      	adds	r4, #1
 8006e46:	2102      	movs	r1, #2
 8006e48:	e000      	b.n	8006e4c <__cvt+0x44>
 8006e4a:	2103      	movs	r1, #3
 8006e4c:	ab03      	add	r3, sp, #12
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	ab02      	add	r3, sp, #8
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	ec47 6b10 	vmov	d0, r6, r7
 8006e58:	4653      	mov	r3, sl
 8006e5a:	4622      	mov	r2, r4
 8006e5c:	f000 fe98 	bl	8007b90 <_dtoa_r>
 8006e60:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006e64:	4605      	mov	r5, r0
 8006e66:	d119      	bne.n	8006e9c <__cvt+0x94>
 8006e68:	f019 0f01 	tst.w	r9, #1
 8006e6c:	d00e      	beq.n	8006e8c <__cvt+0x84>
 8006e6e:	eb00 0904 	add.w	r9, r0, r4
 8006e72:	2200      	movs	r2, #0
 8006e74:	2300      	movs	r3, #0
 8006e76:	4630      	mov	r0, r6
 8006e78:	4639      	mov	r1, r7
 8006e7a:	f7f9 fe4d 	bl	8000b18 <__aeabi_dcmpeq>
 8006e7e:	b108      	cbz	r0, 8006e84 <__cvt+0x7c>
 8006e80:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e84:	2230      	movs	r2, #48	@ 0x30
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	454b      	cmp	r3, r9
 8006e8a:	d31e      	bcc.n	8006eca <__cvt+0xc2>
 8006e8c:	9b03      	ldr	r3, [sp, #12]
 8006e8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e90:	1b5b      	subs	r3, r3, r5
 8006e92:	4628      	mov	r0, r5
 8006e94:	6013      	str	r3, [r2, #0]
 8006e96:	b004      	add	sp, #16
 8006e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ea0:	eb00 0904 	add.w	r9, r0, r4
 8006ea4:	d1e5      	bne.n	8006e72 <__cvt+0x6a>
 8006ea6:	7803      	ldrb	r3, [r0, #0]
 8006ea8:	2b30      	cmp	r3, #48	@ 0x30
 8006eaa:	d10a      	bne.n	8006ec2 <__cvt+0xba>
 8006eac:	2200      	movs	r2, #0
 8006eae:	2300      	movs	r3, #0
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	4639      	mov	r1, r7
 8006eb4:	f7f9 fe30 	bl	8000b18 <__aeabi_dcmpeq>
 8006eb8:	b918      	cbnz	r0, 8006ec2 <__cvt+0xba>
 8006eba:	f1c4 0401 	rsb	r4, r4, #1
 8006ebe:	f8ca 4000 	str.w	r4, [sl]
 8006ec2:	f8da 3000 	ldr.w	r3, [sl]
 8006ec6:	4499      	add	r9, r3
 8006ec8:	e7d3      	b.n	8006e72 <__cvt+0x6a>
 8006eca:	1c59      	adds	r1, r3, #1
 8006ecc:	9103      	str	r1, [sp, #12]
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	e7d9      	b.n	8006e86 <__cvt+0x7e>

08006ed2 <__exponent>:
 8006ed2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ed4:	2900      	cmp	r1, #0
 8006ed6:	bfba      	itte	lt
 8006ed8:	4249      	neglt	r1, r1
 8006eda:	232d      	movlt	r3, #45	@ 0x2d
 8006edc:	232b      	movge	r3, #43	@ 0x2b
 8006ede:	2909      	cmp	r1, #9
 8006ee0:	7002      	strb	r2, [r0, #0]
 8006ee2:	7043      	strb	r3, [r0, #1]
 8006ee4:	dd29      	ble.n	8006f3a <__exponent+0x68>
 8006ee6:	f10d 0307 	add.w	r3, sp, #7
 8006eea:	461d      	mov	r5, r3
 8006eec:	270a      	movs	r7, #10
 8006eee:	461a      	mov	r2, r3
 8006ef0:	fbb1 f6f7 	udiv	r6, r1, r7
 8006ef4:	fb07 1416 	mls	r4, r7, r6, r1
 8006ef8:	3430      	adds	r4, #48	@ 0x30
 8006efa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006efe:	460c      	mov	r4, r1
 8006f00:	2c63      	cmp	r4, #99	@ 0x63
 8006f02:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f06:	4631      	mov	r1, r6
 8006f08:	dcf1      	bgt.n	8006eee <__exponent+0x1c>
 8006f0a:	3130      	adds	r1, #48	@ 0x30
 8006f0c:	1e94      	subs	r4, r2, #2
 8006f0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006f12:	1c41      	adds	r1, r0, #1
 8006f14:	4623      	mov	r3, r4
 8006f16:	42ab      	cmp	r3, r5
 8006f18:	d30a      	bcc.n	8006f30 <__exponent+0x5e>
 8006f1a:	f10d 0309 	add.w	r3, sp, #9
 8006f1e:	1a9b      	subs	r3, r3, r2
 8006f20:	42ac      	cmp	r4, r5
 8006f22:	bf88      	it	hi
 8006f24:	2300      	movhi	r3, #0
 8006f26:	3302      	adds	r3, #2
 8006f28:	4403      	add	r3, r0
 8006f2a:	1a18      	subs	r0, r3, r0
 8006f2c:	b003      	add	sp, #12
 8006f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f30:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006f34:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006f38:	e7ed      	b.n	8006f16 <__exponent+0x44>
 8006f3a:	2330      	movs	r3, #48	@ 0x30
 8006f3c:	3130      	adds	r1, #48	@ 0x30
 8006f3e:	7083      	strb	r3, [r0, #2]
 8006f40:	70c1      	strb	r1, [r0, #3]
 8006f42:	1d03      	adds	r3, r0, #4
 8006f44:	e7f1      	b.n	8006f2a <__exponent+0x58>
	...

08006f48 <_printf_float>:
 8006f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4c:	b08d      	sub	sp, #52	@ 0x34
 8006f4e:	460c      	mov	r4, r1
 8006f50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006f54:	4616      	mov	r6, r2
 8006f56:	461f      	mov	r7, r3
 8006f58:	4605      	mov	r5, r0
 8006f5a:	f000 fd09 	bl	8007970 <_localeconv_r>
 8006f5e:	6803      	ldr	r3, [r0, #0]
 8006f60:	9304      	str	r3, [sp, #16]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7f9 f9ac 	bl	80002c0 <strlen>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f70:	9005      	str	r0, [sp, #20]
 8006f72:	3307      	adds	r3, #7
 8006f74:	f023 0307 	bic.w	r3, r3, #7
 8006f78:	f103 0208 	add.w	r2, r3, #8
 8006f7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f80:	f8d4 b000 	ldr.w	fp, [r4]
 8006f84:	f8c8 2000 	str.w	r2, [r8]
 8006f88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006f90:	9307      	str	r3, [sp, #28]
 8006f92:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f9e:	4b9c      	ldr	r3, [pc, #624]	@ (8007210 <_printf_float+0x2c8>)
 8006fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa4:	f7f9 fdea 	bl	8000b7c <__aeabi_dcmpun>
 8006fa8:	bb70      	cbnz	r0, 8007008 <_printf_float+0xc0>
 8006faa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fae:	4b98      	ldr	r3, [pc, #608]	@ (8007210 <_printf_float+0x2c8>)
 8006fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb4:	f7f9 fdc4 	bl	8000b40 <__aeabi_dcmple>
 8006fb8:	bb30      	cbnz	r0, 8007008 <_printf_float+0xc0>
 8006fba:	2200      	movs	r2, #0
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	f7f9 fdb3 	bl	8000b2c <__aeabi_dcmplt>
 8006fc6:	b110      	cbz	r0, 8006fce <_printf_float+0x86>
 8006fc8:	232d      	movs	r3, #45	@ 0x2d
 8006fca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fce:	4a91      	ldr	r2, [pc, #580]	@ (8007214 <_printf_float+0x2cc>)
 8006fd0:	4b91      	ldr	r3, [pc, #580]	@ (8007218 <_printf_float+0x2d0>)
 8006fd2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006fd6:	bf8c      	ite	hi
 8006fd8:	4690      	movhi	r8, r2
 8006fda:	4698      	movls	r8, r3
 8006fdc:	2303      	movs	r3, #3
 8006fde:	6123      	str	r3, [r4, #16]
 8006fe0:	f02b 0304 	bic.w	r3, fp, #4
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	f04f 0900 	mov.w	r9, #0
 8006fea:	9700      	str	r7, [sp, #0]
 8006fec:	4633      	mov	r3, r6
 8006fee:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	f000 f9d2 	bl	800739c <_printf_common>
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	f040 808d 	bne.w	8007118 <_printf_float+0x1d0>
 8006ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8007002:	b00d      	add	sp, #52	@ 0x34
 8007004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007008:	4642      	mov	r2, r8
 800700a:	464b      	mov	r3, r9
 800700c:	4640      	mov	r0, r8
 800700e:	4649      	mov	r1, r9
 8007010:	f7f9 fdb4 	bl	8000b7c <__aeabi_dcmpun>
 8007014:	b140      	cbz	r0, 8007028 <_printf_float+0xe0>
 8007016:	464b      	mov	r3, r9
 8007018:	2b00      	cmp	r3, #0
 800701a:	bfbc      	itt	lt
 800701c:	232d      	movlt	r3, #45	@ 0x2d
 800701e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007022:	4a7e      	ldr	r2, [pc, #504]	@ (800721c <_printf_float+0x2d4>)
 8007024:	4b7e      	ldr	r3, [pc, #504]	@ (8007220 <_printf_float+0x2d8>)
 8007026:	e7d4      	b.n	8006fd2 <_printf_float+0x8a>
 8007028:	6863      	ldr	r3, [r4, #4]
 800702a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800702e:	9206      	str	r2, [sp, #24]
 8007030:	1c5a      	adds	r2, r3, #1
 8007032:	d13b      	bne.n	80070ac <_printf_float+0x164>
 8007034:	2306      	movs	r3, #6
 8007036:	6063      	str	r3, [r4, #4]
 8007038:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800703c:	2300      	movs	r3, #0
 800703e:	6022      	str	r2, [r4, #0]
 8007040:	9303      	str	r3, [sp, #12]
 8007042:	ab0a      	add	r3, sp, #40	@ 0x28
 8007044:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007048:	ab09      	add	r3, sp, #36	@ 0x24
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	6861      	ldr	r1, [r4, #4]
 800704e:	ec49 8b10 	vmov	d0, r8, r9
 8007052:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007056:	4628      	mov	r0, r5
 8007058:	f7ff fed6 	bl	8006e08 <__cvt>
 800705c:	9b06      	ldr	r3, [sp, #24]
 800705e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007060:	2b47      	cmp	r3, #71	@ 0x47
 8007062:	4680      	mov	r8, r0
 8007064:	d129      	bne.n	80070ba <_printf_float+0x172>
 8007066:	1cc8      	adds	r0, r1, #3
 8007068:	db02      	blt.n	8007070 <_printf_float+0x128>
 800706a:	6863      	ldr	r3, [r4, #4]
 800706c:	4299      	cmp	r1, r3
 800706e:	dd41      	ble.n	80070f4 <_printf_float+0x1ac>
 8007070:	f1aa 0a02 	sub.w	sl, sl, #2
 8007074:	fa5f fa8a 	uxtb.w	sl, sl
 8007078:	3901      	subs	r1, #1
 800707a:	4652      	mov	r2, sl
 800707c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007080:	9109      	str	r1, [sp, #36]	@ 0x24
 8007082:	f7ff ff26 	bl	8006ed2 <__exponent>
 8007086:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007088:	1813      	adds	r3, r2, r0
 800708a:	2a01      	cmp	r2, #1
 800708c:	4681      	mov	r9, r0
 800708e:	6123      	str	r3, [r4, #16]
 8007090:	dc02      	bgt.n	8007098 <_printf_float+0x150>
 8007092:	6822      	ldr	r2, [r4, #0]
 8007094:	07d2      	lsls	r2, r2, #31
 8007096:	d501      	bpl.n	800709c <_printf_float+0x154>
 8007098:	3301      	adds	r3, #1
 800709a:	6123      	str	r3, [r4, #16]
 800709c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0a2      	beq.n	8006fea <_printf_float+0xa2>
 80070a4:	232d      	movs	r3, #45	@ 0x2d
 80070a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070aa:	e79e      	b.n	8006fea <_printf_float+0xa2>
 80070ac:	9a06      	ldr	r2, [sp, #24]
 80070ae:	2a47      	cmp	r2, #71	@ 0x47
 80070b0:	d1c2      	bne.n	8007038 <_printf_float+0xf0>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1c0      	bne.n	8007038 <_printf_float+0xf0>
 80070b6:	2301      	movs	r3, #1
 80070b8:	e7bd      	b.n	8007036 <_printf_float+0xee>
 80070ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80070be:	d9db      	bls.n	8007078 <_printf_float+0x130>
 80070c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80070c4:	d118      	bne.n	80070f8 <_printf_float+0x1b0>
 80070c6:	2900      	cmp	r1, #0
 80070c8:	6863      	ldr	r3, [r4, #4]
 80070ca:	dd0b      	ble.n	80070e4 <_printf_float+0x19c>
 80070cc:	6121      	str	r1, [r4, #16]
 80070ce:	b913      	cbnz	r3, 80070d6 <_printf_float+0x18e>
 80070d0:	6822      	ldr	r2, [r4, #0]
 80070d2:	07d0      	lsls	r0, r2, #31
 80070d4:	d502      	bpl.n	80070dc <_printf_float+0x194>
 80070d6:	3301      	adds	r3, #1
 80070d8:	440b      	add	r3, r1
 80070da:	6123      	str	r3, [r4, #16]
 80070dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80070de:	f04f 0900 	mov.w	r9, #0
 80070e2:	e7db      	b.n	800709c <_printf_float+0x154>
 80070e4:	b913      	cbnz	r3, 80070ec <_printf_float+0x1a4>
 80070e6:	6822      	ldr	r2, [r4, #0]
 80070e8:	07d2      	lsls	r2, r2, #31
 80070ea:	d501      	bpl.n	80070f0 <_printf_float+0x1a8>
 80070ec:	3302      	adds	r3, #2
 80070ee:	e7f4      	b.n	80070da <_printf_float+0x192>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e7f2      	b.n	80070da <_printf_float+0x192>
 80070f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80070f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070fa:	4299      	cmp	r1, r3
 80070fc:	db05      	blt.n	800710a <_printf_float+0x1c2>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	6121      	str	r1, [r4, #16]
 8007102:	07d8      	lsls	r0, r3, #31
 8007104:	d5ea      	bpl.n	80070dc <_printf_float+0x194>
 8007106:	1c4b      	adds	r3, r1, #1
 8007108:	e7e7      	b.n	80070da <_printf_float+0x192>
 800710a:	2900      	cmp	r1, #0
 800710c:	bfd4      	ite	le
 800710e:	f1c1 0202 	rsble	r2, r1, #2
 8007112:	2201      	movgt	r2, #1
 8007114:	4413      	add	r3, r2
 8007116:	e7e0      	b.n	80070da <_printf_float+0x192>
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	055a      	lsls	r2, r3, #21
 800711c:	d407      	bmi.n	800712e <_printf_float+0x1e6>
 800711e:	6923      	ldr	r3, [r4, #16]
 8007120:	4642      	mov	r2, r8
 8007122:	4631      	mov	r1, r6
 8007124:	4628      	mov	r0, r5
 8007126:	47b8      	blx	r7
 8007128:	3001      	adds	r0, #1
 800712a:	d12b      	bne.n	8007184 <_printf_float+0x23c>
 800712c:	e767      	b.n	8006ffe <_printf_float+0xb6>
 800712e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007132:	f240 80dd 	bls.w	80072f0 <_printf_float+0x3a8>
 8007136:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800713a:	2200      	movs	r2, #0
 800713c:	2300      	movs	r3, #0
 800713e:	f7f9 fceb 	bl	8000b18 <__aeabi_dcmpeq>
 8007142:	2800      	cmp	r0, #0
 8007144:	d033      	beq.n	80071ae <_printf_float+0x266>
 8007146:	4a37      	ldr	r2, [pc, #220]	@ (8007224 <_printf_float+0x2dc>)
 8007148:	2301      	movs	r3, #1
 800714a:	4631      	mov	r1, r6
 800714c:	4628      	mov	r0, r5
 800714e:	47b8      	blx	r7
 8007150:	3001      	adds	r0, #1
 8007152:	f43f af54 	beq.w	8006ffe <_printf_float+0xb6>
 8007156:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800715a:	4543      	cmp	r3, r8
 800715c:	db02      	blt.n	8007164 <_printf_float+0x21c>
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	07d8      	lsls	r0, r3, #31
 8007162:	d50f      	bpl.n	8007184 <_printf_float+0x23c>
 8007164:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007168:	4631      	mov	r1, r6
 800716a:	4628      	mov	r0, r5
 800716c:	47b8      	blx	r7
 800716e:	3001      	adds	r0, #1
 8007170:	f43f af45 	beq.w	8006ffe <_printf_float+0xb6>
 8007174:	f04f 0900 	mov.w	r9, #0
 8007178:	f108 38ff 	add.w	r8, r8, #4294967295
 800717c:	f104 0a1a 	add.w	sl, r4, #26
 8007180:	45c8      	cmp	r8, r9
 8007182:	dc09      	bgt.n	8007198 <_printf_float+0x250>
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	079b      	lsls	r3, r3, #30
 8007188:	f100 8103 	bmi.w	8007392 <_printf_float+0x44a>
 800718c:	68e0      	ldr	r0, [r4, #12]
 800718e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007190:	4298      	cmp	r0, r3
 8007192:	bfb8      	it	lt
 8007194:	4618      	movlt	r0, r3
 8007196:	e734      	b.n	8007002 <_printf_float+0xba>
 8007198:	2301      	movs	r3, #1
 800719a:	4652      	mov	r2, sl
 800719c:	4631      	mov	r1, r6
 800719e:	4628      	mov	r0, r5
 80071a0:	47b8      	blx	r7
 80071a2:	3001      	adds	r0, #1
 80071a4:	f43f af2b 	beq.w	8006ffe <_printf_float+0xb6>
 80071a8:	f109 0901 	add.w	r9, r9, #1
 80071ac:	e7e8      	b.n	8007180 <_printf_float+0x238>
 80071ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	dc39      	bgt.n	8007228 <_printf_float+0x2e0>
 80071b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007224 <_printf_float+0x2dc>)
 80071b6:	2301      	movs	r3, #1
 80071b8:	4631      	mov	r1, r6
 80071ba:	4628      	mov	r0, r5
 80071bc:	47b8      	blx	r7
 80071be:	3001      	adds	r0, #1
 80071c0:	f43f af1d 	beq.w	8006ffe <_printf_float+0xb6>
 80071c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80071c8:	ea59 0303 	orrs.w	r3, r9, r3
 80071cc:	d102      	bne.n	80071d4 <_printf_float+0x28c>
 80071ce:	6823      	ldr	r3, [r4, #0]
 80071d0:	07d9      	lsls	r1, r3, #31
 80071d2:	d5d7      	bpl.n	8007184 <_printf_float+0x23c>
 80071d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071d8:	4631      	mov	r1, r6
 80071da:	4628      	mov	r0, r5
 80071dc:	47b8      	blx	r7
 80071de:	3001      	adds	r0, #1
 80071e0:	f43f af0d 	beq.w	8006ffe <_printf_float+0xb6>
 80071e4:	f04f 0a00 	mov.w	sl, #0
 80071e8:	f104 0b1a 	add.w	fp, r4, #26
 80071ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ee:	425b      	negs	r3, r3
 80071f0:	4553      	cmp	r3, sl
 80071f2:	dc01      	bgt.n	80071f8 <_printf_float+0x2b0>
 80071f4:	464b      	mov	r3, r9
 80071f6:	e793      	b.n	8007120 <_printf_float+0x1d8>
 80071f8:	2301      	movs	r3, #1
 80071fa:	465a      	mov	r2, fp
 80071fc:	4631      	mov	r1, r6
 80071fe:	4628      	mov	r0, r5
 8007200:	47b8      	blx	r7
 8007202:	3001      	adds	r0, #1
 8007204:	f43f aefb 	beq.w	8006ffe <_printf_float+0xb6>
 8007208:	f10a 0a01 	add.w	sl, sl, #1
 800720c:	e7ee      	b.n	80071ec <_printf_float+0x2a4>
 800720e:	bf00      	nop
 8007210:	7fefffff 	.word	0x7fefffff
 8007214:	0800a8e0 	.word	0x0800a8e0
 8007218:	0800a8dc 	.word	0x0800a8dc
 800721c:	0800a8e8 	.word	0x0800a8e8
 8007220:	0800a8e4 	.word	0x0800a8e4
 8007224:	0800a8ec 	.word	0x0800a8ec
 8007228:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800722a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800722e:	4553      	cmp	r3, sl
 8007230:	bfa8      	it	ge
 8007232:	4653      	movge	r3, sl
 8007234:	2b00      	cmp	r3, #0
 8007236:	4699      	mov	r9, r3
 8007238:	dc36      	bgt.n	80072a8 <_printf_float+0x360>
 800723a:	f04f 0b00 	mov.w	fp, #0
 800723e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007242:	f104 021a 	add.w	r2, r4, #26
 8007246:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007248:	9306      	str	r3, [sp, #24]
 800724a:	eba3 0309 	sub.w	r3, r3, r9
 800724e:	455b      	cmp	r3, fp
 8007250:	dc31      	bgt.n	80072b6 <_printf_float+0x36e>
 8007252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007254:	459a      	cmp	sl, r3
 8007256:	dc3a      	bgt.n	80072ce <_printf_float+0x386>
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	07da      	lsls	r2, r3, #31
 800725c:	d437      	bmi.n	80072ce <_printf_float+0x386>
 800725e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007260:	ebaa 0903 	sub.w	r9, sl, r3
 8007264:	9b06      	ldr	r3, [sp, #24]
 8007266:	ebaa 0303 	sub.w	r3, sl, r3
 800726a:	4599      	cmp	r9, r3
 800726c:	bfa8      	it	ge
 800726e:	4699      	movge	r9, r3
 8007270:	f1b9 0f00 	cmp.w	r9, #0
 8007274:	dc33      	bgt.n	80072de <_printf_float+0x396>
 8007276:	f04f 0800 	mov.w	r8, #0
 800727a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800727e:	f104 0b1a 	add.w	fp, r4, #26
 8007282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007284:	ebaa 0303 	sub.w	r3, sl, r3
 8007288:	eba3 0309 	sub.w	r3, r3, r9
 800728c:	4543      	cmp	r3, r8
 800728e:	f77f af79 	ble.w	8007184 <_printf_float+0x23c>
 8007292:	2301      	movs	r3, #1
 8007294:	465a      	mov	r2, fp
 8007296:	4631      	mov	r1, r6
 8007298:	4628      	mov	r0, r5
 800729a:	47b8      	blx	r7
 800729c:	3001      	adds	r0, #1
 800729e:	f43f aeae 	beq.w	8006ffe <_printf_float+0xb6>
 80072a2:	f108 0801 	add.w	r8, r8, #1
 80072a6:	e7ec      	b.n	8007282 <_printf_float+0x33a>
 80072a8:	4642      	mov	r2, r8
 80072aa:	4631      	mov	r1, r6
 80072ac:	4628      	mov	r0, r5
 80072ae:	47b8      	blx	r7
 80072b0:	3001      	adds	r0, #1
 80072b2:	d1c2      	bne.n	800723a <_printf_float+0x2f2>
 80072b4:	e6a3      	b.n	8006ffe <_printf_float+0xb6>
 80072b6:	2301      	movs	r3, #1
 80072b8:	4631      	mov	r1, r6
 80072ba:	4628      	mov	r0, r5
 80072bc:	9206      	str	r2, [sp, #24]
 80072be:	47b8      	blx	r7
 80072c0:	3001      	adds	r0, #1
 80072c2:	f43f ae9c 	beq.w	8006ffe <_printf_float+0xb6>
 80072c6:	9a06      	ldr	r2, [sp, #24]
 80072c8:	f10b 0b01 	add.w	fp, fp, #1
 80072cc:	e7bb      	b.n	8007246 <_printf_float+0x2fe>
 80072ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072d2:	4631      	mov	r1, r6
 80072d4:	4628      	mov	r0, r5
 80072d6:	47b8      	blx	r7
 80072d8:	3001      	adds	r0, #1
 80072da:	d1c0      	bne.n	800725e <_printf_float+0x316>
 80072dc:	e68f      	b.n	8006ffe <_printf_float+0xb6>
 80072de:	9a06      	ldr	r2, [sp, #24]
 80072e0:	464b      	mov	r3, r9
 80072e2:	4442      	add	r2, r8
 80072e4:	4631      	mov	r1, r6
 80072e6:	4628      	mov	r0, r5
 80072e8:	47b8      	blx	r7
 80072ea:	3001      	adds	r0, #1
 80072ec:	d1c3      	bne.n	8007276 <_printf_float+0x32e>
 80072ee:	e686      	b.n	8006ffe <_printf_float+0xb6>
 80072f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80072f4:	f1ba 0f01 	cmp.w	sl, #1
 80072f8:	dc01      	bgt.n	80072fe <_printf_float+0x3b6>
 80072fa:	07db      	lsls	r3, r3, #31
 80072fc:	d536      	bpl.n	800736c <_printf_float+0x424>
 80072fe:	2301      	movs	r3, #1
 8007300:	4642      	mov	r2, r8
 8007302:	4631      	mov	r1, r6
 8007304:	4628      	mov	r0, r5
 8007306:	47b8      	blx	r7
 8007308:	3001      	adds	r0, #1
 800730a:	f43f ae78 	beq.w	8006ffe <_printf_float+0xb6>
 800730e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007312:	4631      	mov	r1, r6
 8007314:	4628      	mov	r0, r5
 8007316:	47b8      	blx	r7
 8007318:	3001      	adds	r0, #1
 800731a:	f43f ae70 	beq.w	8006ffe <_printf_float+0xb6>
 800731e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007322:	2200      	movs	r2, #0
 8007324:	2300      	movs	r3, #0
 8007326:	f10a 3aff 	add.w	sl, sl, #4294967295
 800732a:	f7f9 fbf5 	bl	8000b18 <__aeabi_dcmpeq>
 800732e:	b9c0      	cbnz	r0, 8007362 <_printf_float+0x41a>
 8007330:	4653      	mov	r3, sl
 8007332:	f108 0201 	add.w	r2, r8, #1
 8007336:	4631      	mov	r1, r6
 8007338:	4628      	mov	r0, r5
 800733a:	47b8      	blx	r7
 800733c:	3001      	adds	r0, #1
 800733e:	d10c      	bne.n	800735a <_printf_float+0x412>
 8007340:	e65d      	b.n	8006ffe <_printf_float+0xb6>
 8007342:	2301      	movs	r3, #1
 8007344:	465a      	mov	r2, fp
 8007346:	4631      	mov	r1, r6
 8007348:	4628      	mov	r0, r5
 800734a:	47b8      	blx	r7
 800734c:	3001      	adds	r0, #1
 800734e:	f43f ae56 	beq.w	8006ffe <_printf_float+0xb6>
 8007352:	f108 0801 	add.w	r8, r8, #1
 8007356:	45d0      	cmp	r8, sl
 8007358:	dbf3      	blt.n	8007342 <_printf_float+0x3fa>
 800735a:	464b      	mov	r3, r9
 800735c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007360:	e6df      	b.n	8007122 <_printf_float+0x1da>
 8007362:	f04f 0800 	mov.w	r8, #0
 8007366:	f104 0b1a 	add.w	fp, r4, #26
 800736a:	e7f4      	b.n	8007356 <_printf_float+0x40e>
 800736c:	2301      	movs	r3, #1
 800736e:	4642      	mov	r2, r8
 8007370:	e7e1      	b.n	8007336 <_printf_float+0x3ee>
 8007372:	2301      	movs	r3, #1
 8007374:	464a      	mov	r2, r9
 8007376:	4631      	mov	r1, r6
 8007378:	4628      	mov	r0, r5
 800737a:	47b8      	blx	r7
 800737c:	3001      	adds	r0, #1
 800737e:	f43f ae3e 	beq.w	8006ffe <_printf_float+0xb6>
 8007382:	f108 0801 	add.w	r8, r8, #1
 8007386:	68e3      	ldr	r3, [r4, #12]
 8007388:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800738a:	1a5b      	subs	r3, r3, r1
 800738c:	4543      	cmp	r3, r8
 800738e:	dcf0      	bgt.n	8007372 <_printf_float+0x42a>
 8007390:	e6fc      	b.n	800718c <_printf_float+0x244>
 8007392:	f04f 0800 	mov.w	r8, #0
 8007396:	f104 0919 	add.w	r9, r4, #25
 800739a:	e7f4      	b.n	8007386 <_printf_float+0x43e>

0800739c <_printf_common>:
 800739c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a0:	4616      	mov	r6, r2
 80073a2:	4698      	mov	r8, r3
 80073a4:	688a      	ldr	r2, [r1, #8]
 80073a6:	690b      	ldr	r3, [r1, #16]
 80073a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073ac:	4293      	cmp	r3, r2
 80073ae:	bfb8      	it	lt
 80073b0:	4613      	movlt	r3, r2
 80073b2:	6033      	str	r3, [r6, #0]
 80073b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073b8:	4607      	mov	r7, r0
 80073ba:	460c      	mov	r4, r1
 80073bc:	b10a      	cbz	r2, 80073c2 <_printf_common+0x26>
 80073be:	3301      	adds	r3, #1
 80073c0:	6033      	str	r3, [r6, #0]
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	0699      	lsls	r1, r3, #26
 80073c6:	bf42      	ittt	mi
 80073c8:	6833      	ldrmi	r3, [r6, #0]
 80073ca:	3302      	addmi	r3, #2
 80073cc:	6033      	strmi	r3, [r6, #0]
 80073ce:	6825      	ldr	r5, [r4, #0]
 80073d0:	f015 0506 	ands.w	r5, r5, #6
 80073d4:	d106      	bne.n	80073e4 <_printf_common+0x48>
 80073d6:	f104 0a19 	add.w	sl, r4, #25
 80073da:	68e3      	ldr	r3, [r4, #12]
 80073dc:	6832      	ldr	r2, [r6, #0]
 80073de:	1a9b      	subs	r3, r3, r2
 80073e0:	42ab      	cmp	r3, r5
 80073e2:	dc26      	bgt.n	8007432 <_printf_common+0x96>
 80073e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073e8:	6822      	ldr	r2, [r4, #0]
 80073ea:	3b00      	subs	r3, #0
 80073ec:	bf18      	it	ne
 80073ee:	2301      	movne	r3, #1
 80073f0:	0692      	lsls	r2, r2, #26
 80073f2:	d42b      	bmi.n	800744c <_printf_common+0xb0>
 80073f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073f8:	4641      	mov	r1, r8
 80073fa:	4638      	mov	r0, r7
 80073fc:	47c8      	blx	r9
 80073fe:	3001      	adds	r0, #1
 8007400:	d01e      	beq.n	8007440 <_printf_common+0xa4>
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	6922      	ldr	r2, [r4, #16]
 8007406:	f003 0306 	and.w	r3, r3, #6
 800740a:	2b04      	cmp	r3, #4
 800740c:	bf02      	ittt	eq
 800740e:	68e5      	ldreq	r5, [r4, #12]
 8007410:	6833      	ldreq	r3, [r6, #0]
 8007412:	1aed      	subeq	r5, r5, r3
 8007414:	68a3      	ldr	r3, [r4, #8]
 8007416:	bf0c      	ite	eq
 8007418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800741c:	2500      	movne	r5, #0
 800741e:	4293      	cmp	r3, r2
 8007420:	bfc4      	itt	gt
 8007422:	1a9b      	subgt	r3, r3, r2
 8007424:	18ed      	addgt	r5, r5, r3
 8007426:	2600      	movs	r6, #0
 8007428:	341a      	adds	r4, #26
 800742a:	42b5      	cmp	r5, r6
 800742c:	d11a      	bne.n	8007464 <_printf_common+0xc8>
 800742e:	2000      	movs	r0, #0
 8007430:	e008      	b.n	8007444 <_printf_common+0xa8>
 8007432:	2301      	movs	r3, #1
 8007434:	4652      	mov	r2, sl
 8007436:	4641      	mov	r1, r8
 8007438:	4638      	mov	r0, r7
 800743a:	47c8      	blx	r9
 800743c:	3001      	adds	r0, #1
 800743e:	d103      	bne.n	8007448 <_printf_common+0xac>
 8007440:	f04f 30ff 	mov.w	r0, #4294967295
 8007444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007448:	3501      	adds	r5, #1
 800744a:	e7c6      	b.n	80073da <_printf_common+0x3e>
 800744c:	18e1      	adds	r1, r4, r3
 800744e:	1c5a      	adds	r2, r3, #1
 8007450:	2030      	movs	r0, #48	@ 0x30
 8007452:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007456:	4422      	add	r2, r4
 8007458:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800745c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007460:	3302      	adds	r3, #2
 8007462:	e7c7      	b.n	80073f4 <_printf_common+0x58>
 8007464:	2301      	movs	r3, #1
 8007466:	4622      	mov	r2, r4
 8007468:	4641      	mov	r1, r8
 800746a:	4638      	mov	r0, r7
 800746c:	47c8      	blx	r9
 800746e:	3001      	adds	r0, #1
 8007470:	d0e6      	beq.n	8007440 <_printf_common+0xa4>
 8007472:	3601      	adds	r6, #1
 8007474:	e7d9      	b.n	800742a <_printf_common+0x8e>
	...

08007478 <_printf_i>:
 8007478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800747c:	7e0f      	ldrb	r7, [r1, #24]
 800747e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007480:	2f78      	cmp	r7, #120	@ 0x78
 8007482:	4691      	mov	r9, r2
 8007484:	4680      	mov	r8, r0
 8007486:	460c      	mov	r4, r1
 8007488:	469a      	mov	sl, r3
 800748a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800748e:	d807      	bhi.n	80074a0 <_printf_i+0x28>
 8007490:	2f62      	cmp	r7, #98	@ 0x62
 8007492:	d80a      	bhi.n	80074aa <_printf_i+0x32>
 8007494:	2f00      	cmp	r7, #0
 8007496:	f000 80d1 	beq.w	800763c <_printf_i+0x1c4>
 800749a:	2f58      	cmp	r7, #88	@ 0x58
 800749c:	f000 80b8 	beq.w	8007610 <_printf_i+0x198>
 80074a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074a8:	e03a      	b.n	8007520 <_printf_i+0xa8>
 80074aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074ae:	2b15      	cmp	r3, #21
 80074b0:	d8f6      	bhi.n	80074a0 <_printf_i+0x28>
 80074b2:	a101      	add	r1, pc, #4	@ (adr r1, 80074b8 <_printf_i+0x40>)
 80074b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074b8:	08007511 	.word	0x08007511
 80074bc:	08007525 	.word	0x08007525
 80074c0:	080074a1 	.word	0x080074a1
 80074c4:	080074a1 	.word	0x080074a1
 80074c8:	080074a1 	.word	0x080074a1
 80074cc:	080074a1 	.word	0x080074a1
 80074d0:	08007525 	.word	0x08007525
 80074d4:	080074a1 	.word	0x080074a1
 80074d8:	080074a1 	.word	0x080074a1
 80074dc:	080074a1 	.word	0x080074a1
 80074e0:	080074a1 	.word	0x080074a1
 80074e4:	08007623 	.word	0x08007623
 80074e8:	0800754f 	.word	0x0800754f
 80074ec:	080075dd 	.word	0x080075dd
 80074f0:	080074a1 	.word	0x080074a1
 80074f4:	080074a1 	.word	0x080074a1
 80074f8:	08007645 	.word	0x08007645
 80074fc:	080074a1 	.word	0x080074a1
 8007500:	0800754f 	.word	0x0800754f
 8007504:	080074a1 	.word	0x080074a1
 8007508:	080074a1 	.word	0x080074a1
 800750c:	080075e5 	.word	0x080075e5
 8007510:	6833      	ldr	r3, [r6, #0]
 8007512:	1d1a      	adds	r2, r3, #4
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6032      	str	r2, [r6, #0]
 8007518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800751c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007520:	2301      	movs	r3, #1
 8007522:	e09c      	b.n	800765e <_printf_i+0x1e6>
 8007524:	6833      	ldr	r3, [r6, #0]
 8007526:	6820      	ldr	r0, [r4, #0]
 8007528:	1d19      	adds	r1, r3, #4
 800752a:	6031      	str	r1, [r6, #0]
 800752c:	0606      	lsls	r6, r0, #24
 800752e:	d501      	bpl.n	8007534 <_printf_i+0xbc>
 8007530:	681d      	ldr	r5, [r3, #0]
 8007532:	e003      	b.n	800753c <_printf_i+0xc4>
 8007534:	0645      	lsls	r5, r0, #25
 8007536:	d5fb      	bpl.n	8007530 <_printf_i+0xb8>
 8007538:	f9b3 5000 	ldrsh.w	r5, [r3]
 800753c:	2d00      	cmp	r5, #0
 800753e:	da03      	bge.n	8007548 <_printf_i+0xd0>
 8007540:	232d      	movs	r3, #45	@ 0x2d
 8007542:	426d      	negs	r5, r5
 8007544:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007548:	4858      	ldr	r0, [pc, #352]	@ (80076ac <_printf_i+0x234>)
 800754a:	230a      	movs	r3, #10
 800754c:	e011      	b.n	8007572 <_printf_i+0xfa>
 800754e:	6821      	ldr	r1, [r4, #0]
 8007550:	6833      	ldr	r3, [r6, #0]
 8007552:	0608      	lsls	r0, r1, #24
 8007554:	f853 5b04 	ldr.w	r5, [r3], #4
 8007558:	d402      	bmi.n	8007560 <_printf_i+0xe8>
 800755a:	0649      	lsls	r1, r1, #25
 800755c:	bf48      	it	mi
 800755e:	b2ad      	uxthmi	r5, r5
 8007560:	2f6f      	cmp	r7, #111	@ 0x6f
 8007562:	4852      	ldr	r0, [pc, #328]	@ (80076ac <_printf_i+0x234>)
 8007564:	6033      	str	r3, [r6, #0]
 8007566:	bf14      	ite	ne
 8007568:	230a      	movne	r3, #10
 800756a:	2308      	moveq	r3, #8
 800756c:	2100      	movs	r1, #0
 800756e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007572:	6866      	ldr	r6, [r4, #4]
 8007574:	60a6      	str	r6, [r4, #8]
 8007576:	2e00      	cmp	r6, #0
 8007578:	db05      	blt.n	8007586 <_printf_i+0x10e>
 800757a:	6821      	ldr	r1, [r4, #0]
 800757c:	432e      	orrs	r6, r5
 800757e:	f021 0104 	bic.w	r1, r1, #4
 8007582:	6021      	str	r1, [r4, #0]
 8007584:	d04b      	beq.n	800761e <_printf_i+0x1a6>
 8007586:	4616      	mov	r6, r2
 8007588:	fbb5 f1f3 	udiv	r1, r5, r3
 800758c:	fb03 5711 	mls	r7, r3, r1, r5
 8007590:	5dc7      	ldrb	r7, [r0, r7]
 8007592:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007596:	462f      	mov	r7, r5
 8007598:	42bb      	cmp	r3, r7
 800759a:	460d      	mov	r5, r1
 800759c:	d9f4      	bls.n	8007588 <_printf_i+0x110>
 800759e:	2b08      	cmp	r3, #8
 80075a0:	d10b      	bne.n	80075ba <_printf_i+0x142>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	07df      	lsls	r7, r3, #31
 80075a6:	d508      	bpl.n	80075ba <_printf_i+0x142>
 80075a8:	6923      	ldr	r3, [r4, #16]
 80075aa:	6861      	ldr	r1, [r4, #4]
 80075ac:	4299      	cmp	r1, r3
 80075ae:	bfde      	ittt	le
 80075b0:	2330      	movle	r3, #48	@ 0x30
 80075b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075ba:	1b92      	subs	r2, r2, r6
 80075bc:	6122      	str	r2, [r4, #16]
 80075be:	f8cd a000 	str.w	sl, [sp]
 80075c2:	464b      	mov	r3, r9
 80075c4:	aa03      	add	r2, sp, #12
 80075c6:	4621      	mov	r1, r4
 80075c8:	4640      	mov	r0, r8
 80075ca:	f7ff fee7 	bl	800739c <_printf_common>
 80075ce:	3001      	adds	r0, #1
 80075d0:	d14a      	bne.n	8007668 <_printf_i+0x1f0>
 80075d2:	f04f 30ff 	mov.w	r0, #4294967295
 80075d6:	b004      	add	sp, #16
 80075d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	f043 0320 	orr.w	r3, r3, #32
 80075e2:	6023      	str	r3, [r4, #0]
 80075e4:	4832      	ldr	r0, [pc, #200]	@ (80076b0 <_printf_i+0x238>)
 80075e6:	2778      	movs	r7, #120	@ 0x78
 80075e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075ec:	6823      	ldr	r3, [r4, #0]
 80075ee:	6831      	ldr	r1, [r6, #0]
 80075f0:	061f      	lsls	r7, r3, #24
 80075f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80075f6:	d402      	bmi.n	80075fe <_printf_i+0x186>
 80075f8:	065f      	lsls	r7, r3, #25
 80075fa:	bf48      	it	mi
 80075fc:	b2ad      	uxthmi	r5, r5
 80075fe:	6031      	str	r1, [r6, #0]
 8007600:	07d9      	lsls	r1, r3, #31
 8007602:	bf44      	itt	mi
 8007604:	f043 0320 	orrmi.w	r3, r3, #32
 8007608:	6023      	strmi	r3, [r4, #0]
 800760a:	b11d      	cbz	r5, 8007614 <_printf_i+0x19c>
 800760c:	2310      	movs	r3, #16
 800760e:	e7ad      	b.n	800756c <_printf_i+0xf4>
 8007610:	4826      	ldr	r0, [pc, #152]	@ (80076ac <_printf_i+0x234>)
 8007612:	e7e9      	b.n	80075e8 <_printf_i+0x170>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	f023 0320 	bic.w	r3, r3, #32
 800761a:	6023      	str	r3, [r4, #0]
 800761c:	e7f6      	b.n	800760c <_printf_i+0x194>
 800761e:	4616      	mov	r6, r2
 8007620:	e7bd      	b.n	800759e <_printf_i+0x126>
 8007622:	6833      	ldr	r3, [r6, #0]
 8007624:	6825      	ldr	r5, [r4, #0]
 8007626:	6961      	ldr	r1, [r4, #20]
 8007628:	1d18      	adds	r0, r3, #4
 800762a:	6030      	str	r0, [r6, #0]
 800762c:	062e      	lsls	r6, r5, #24
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	d501      	bpl.n	8007636 <_printf_i+0x1be>
 8007632:	6019      	str	r1, [r3, #0]
 8007634:	e002      	b.n	800763c <_printf_i+0x1c4>
 8007636:	0668      	lsls	r0, r5, #25
 8007638:	d5fb      	bpl.n	8007632 <_printf_i+0x1ba>
 800763a:	8019      	strh	r1, [r3, #0]
 800763c:	2300      	movs	r3, #0
 800763e:	6123      	str	r3, [r4, #16]
 8007640:	4616      	mov	r6, r2
 8007642:	e7bc      	b.n	80075be <_printf_i+0x146>
 8007644:	6833      	ldr	r3, [r6, #0]
 8007646:	1d1a      	adds	r2, r3, #4
 8007648:	6032      	str	r2, [r6, #0]
 800764a:	681e      	ldr	r6, [r3, #0]
 800764c:	6862      	ldr	r2, [r4, #4]
 800764e:	2100      	movs	r1, #0
 8007650:	4630      	mov	r0, r6
 8007652:	f7f8 fde5 	bl	8000220 <memchr>
 8007656:	b108      	cbz	r0, 800765c <_printf_i+0x1e4>
 8007658:	1b80      	subs	r0, r0, r6
 800765a:	6060      	str	r0, [r4, #4]
 800765c:	6863      	ldr	r3, [r4, #4]
 800765e:	6123      	str	r3, [r4, #16]
 8007660:	2300      	movs	r3, #0
 8007662:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007666:	e7aa      	b.n	80075be <_printf_i+0x146>
 8007668:	6923      	ldr	r3, [r4, #16]
 800766a:	4632      	mov	r2, r6
 800766c:	4649      	mov	r1, r9
 800766e:	4640      	mov	r0, r8
 8007670:	47d0      	blx	sl
 8007672:	3001      	adds	r0, #1
 8007674:	d0ad      	beq.n	80075d2 <_printf_i+0x15a>
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	079b      	lsls	r3, r3, #30
 800767a:	d413      	bmi.n	80076a4 <_printf_i+0x22c>
 800767c:	68e0      	ldr	r0, [r4, #12]
 800767e:	9b03      	ldr	r3, [sp, #12]
 8007680:	4298      	cmp	r0, r3
 8007682:	bfb8      	it	lt
 8007684:	4618      	movlt	r0, r3
 8007686:	e7a6      	b.n	80075d6 <_printf_i+0x15e>
 8007688:	2301      	movs	r3, #1
 800768a:	4632      	mov	r2, r6
 800768c:	4649      	mov	r1, r9
 800768e:	4640      	mov	r0, r8
 8007690:	47d0      	blx	sl
 8007692:	3001      	adds	r0, #1
 8007694:	d09d      	beq.n	80075d2 <_printf_i+0x15a>
 8007696:	3501      	adds	r5, #1
 8007698:	68e3      	ldr	r3, [r4, #12]
 800769a:	9903      	ldr	r1, [sp, #12]
 800769c:	1a5b      	subs	r3, r3, r1
 800769e:	42ab      	cmp	r3, r5
 80076a0:	dcf2      	bgt.n	8007688 <_printf_i+0x210>
 80076a2:	e7eb      	b.n	800767c <_printf_i+0x204>
 80076a4:	2500      	movs	r5, #0
 80076a6:	f104 0619 	add.w	r6, r4, #25
 80076aa:	e7f5      	b.n	8007698 <_printf_i+0x220>
 80076ac:	0800a8ee 	.word	0x0800a8ee
 80076b0:	0800a8ff 	.word	0x0800a8ff

080076b4 <std>:
 80076b4:	2300      	movs	r3, #0
 80076b6:	b510      	push	{r4, lr}
 80076b8:	4604      	mov	r4, r0
 80076ba:	e9c0 3300 	strd	r3, r3, [r0]
 80076be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076c2:	6083      	str	r3, [r0, #8]
 80076c4:	8181      	strh	r1, [r0, #12]
 80076c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80076c8:	81c2      	strh	r2, [r0, #14]
 80076ca:	6183      	str	r3, [r0, #24]
 80076cc:	4619      	mov	r1, r3
 80076ce:	2208      	movs	r2, #8
 80076d0:	305c      	adds	r0, #92	@ 0x5c
 80076d2:	f000 f944 	bl	800795e <memset>
 80076d6:	4b0d      	ldr	r3, [pc, #52]	@ (800770c <std+0x58>)
 80076d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80076da:	4b0d      	ldr	r3, [pc, #52]	@ (8007710 <std+0x5c>)
 80076dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076de:	4b0d      	ldr	r3, [pc, #52]	@ (8007714 <std+0x60>)
 80076e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007718 <std+0x64>)
 80076e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80076e6:	4b0d      	ldr	r3, [pc, #52]	@ (800771c <std+0x68>)
 80076e8:	6224      	str	r4, [r4, #32]
 80076ea:	429c      	cmp	r4, r3
 80076ec:	d006      	beq.n	80076fc <std+0x48>
 80076ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076f2:	4294      	cmp	r4, r2
 80076f4:	d002      	beq.n	80076fc <std+0x48>
 80076f6:	33d0      	adds	r3, #208	@ 0xd0
 80076f8:	429c      	cmp	r4, r3
 80076fa:	d105      	bne.n	8007708 <std+0x54>
 80076fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007704:	f000 b9a8 	b.w	8007a58 <__retarget_lock_init_recursive>
 8007708:	bd10      	pop	{r4, pc}
 800770a:	bf00      	nop
 800770c:	080078a5 	.word	0x080078a5
 8007710:	080078c7 	.word	0x080078c7
 8007714:	080078ff 	.word	0x080078ff
 8007718:	08007923 	.word	0x08007923
 800771c:	200008d0 	.word	0x200008d0

08007720 <stdio_exit_handler>:
 8007720:	4a02      	ldr	r2, [pc, #8]	@ (800772c <stdio_exit_handler+0xc>)
 8007722:	4903      	ldr	r1, [pc, #12]	@ (8007730 <stdio_exit_handler+0x10>)
 8007724:	4803      	ldr	r0, [pc, #12]	@ (8007734 <stdio_exit_handler+0x14>)
 8007726:	f000 b869 	b.w	80077fc <_fwalk_sglue>
 800772a:	bf00      	nop
 800772c:	20000020 	.word	0x20000020
 8007730:	080093dd 	.word	0x080093dd
 8007734:	20000030 	.word	0x20000030

08007738 <cleanup_stdio>:
 8007738:	6841      	ldr	r1, [r0, #4]
 800773a:	4b0c      	ldr	r3, [pc, #48]	@ (800776c <cleanup_stdio+0x34>)
 800773c:	4299      	cmp	r1, r3
 800773e:	b510      	push	{r4, lr}
 8007740:	4604      	mov	r4, r0
 8007742:	d001      	beq.n	8007748 <cleanup_stdio+0x10>
 8007744:	f001 fe4a 	bl	80093dc <_fflush_r>
 8007748:	68a1      	ldr	r1, [r4, #8]
 800774a:	4b09      	ldr	r3, [pc, #36]	@ (8007770 <cleanup_stdio+0x38>)
 800774c:	4299      	cmp	r1, r3
 800774e:	d002      	beq.n	8007756 <cleanup_stdio+0x1e>
 8007750:	4620      	mov	r0, r4
 8007752:	f001 fe43 	bl	80093dc <_fflush_r>
 8007756:	68e1      	ldr	r1, [r4, #12]
 8007758:	4b06      	ldr	r3, [pc, #24]	@ (8007774 <cleanup_stdio+0x3c>)
 800775a:	4299      	cmp	r1, r3
 800775c:	d004      	beq.n	8007768 <cleanup_stdio+0x30>
 800775e:	4620      	mov	r0, r4
 8007760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007764:	f001 be3a 	b.w	80093dc <_fflush_r>
 8007768:	bd10      	pop	{r4, pc}
 800776a:	bf00      	nop
 800776c:	200008d0 	.word	0x200008d0
 8007770:	20000938 	.word	0x20000938
 8007774:	200009a0 	.word	0x200009a0

08007778 <global_stdio_init.part.0>:
 8007778:	b510      	push	{r4, lr}
 800777a:	4b0b      	ldr	r3, [pc, #44]	@ (80077a8 <global_stdio_init.part.0+0x30>)
 800777c:	4c0b      	ldr	r4, [pc, #44]	@ (80077ac <global_stdio_init.part.0+0x34>)
 800777e:	4a0c      	ldr	r2, [pc, #48]	@ (80077b0 <global_stdio_init.part.0+0x38>)
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	4620      	mov	r0, r4
 8007784:	2200      	movs	r2, #0
 8007786:	2104      	movs	r1, #4
 8007788:	f7ff ff94 	bl	80076b4 <std>
 800778c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007790:	2201      	movs	r2, #1
 8007792:	2109      	movs	r1, #9
 8007794:	f7ff ff8e 	bl	80076b4 <std>
 8007798:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800779c:	2202      	movs	r2, #2
 800779e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077a2:	2112      	movs	r1, #18
 80077a4:	f7ff bf86 	b.w	80076b4 <std>
 80077a8:	20000a08 	.word	0x20000a08
 80077ac:	200008d0 	.word	0x200008d0
 80077b0:	08007721 	.word	0x08007721

080077b4 <__sfp_lock_acquire>:
 80077b4:	4801      	ldr	r0, [pc, #4]	@ (80077bc <__sfp_lock_acquire+0x8>)
 80077b6:	f000 b950 	b.w	8007a5a <__retarget_lock_acquire_recursive>
 80077ba:	bf00      	nop
 80077bc:	20000a11 	.word	0x20000a11

080077c0 <__sfp_lock_release>:
 80077c0:	4801      	ldr	r0, [pc, #4]	@ (80077c8 <__sfp_lock_release+0x8>)
 80077c2:	f000 b94b 	b.w	8007a5c <__retarget_lock_release_recursive>
 80077c6:	bf00      	nop
 80077c8:	20000a11 	.word	0x20000a11

080077cc <__sinit>:
 80077cc:	b510      	push	{r4, lr}
 80077ce:	4604      	mov	r4, r0
 80077d0:	f7ff fff0 	bl	80077b4 <__sfp_lock_acquire>
 80077d4:	6a23      	ldr	r3, [r4, #32]
 80077d6:	b11b      	cbz	r3, 80077e0 <__sinit+0x14>
 80077d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077dc:	f7ff bff0 	b.w	80077c0 <__sfp_lock_release>
 80077e0:	4b04      	ldr	r3, [pc, #16]	@ (80077f4 <__sinit+0x28>)
 80077e2:	6223      	str	r3, [r4, #32]
 80077e4:	4b04      	ldr	r3, [pc, #16]	@ (80077f8 <__sinit+0x2c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1f5      	bne.n	80077d8 <__sinit+0xc>
 80077ec:	f7ff ffc4 	bl	8007778 <global_stdio_init.part.0>
 80077f0:	e7f2      	b.n	80077d8 <__sinit+0xc>
 80077f2:	bf00      	nop
 80077f4:	08007739 	.word	0x08007739
 80077f8:	20000a08 	.word	0x20000a08

080077fc <_fwalk_sglue>:
 80077fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007800:	4607      	mov	r7, r0
 8007802:	4688      	mov	r8, r1
 8007804:	4614      	mov	r4, r2
 8007806:	2600      	movs	r6, #0
 8007808:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800780c:	f1b9 0901 	subs.w	r9, r9, #1
 8007810:	d505      	bpl.n	800781e <_fwalk_sglue+0x22>
 8007812:	6824      	ldr	r4, [r4, #0]
 8007814:	2c00      	cmp	r4, #0
 8007816:	d1f7      	bne.n	8007808 <_fwalk_sglue+0xc>
 8007818:	4630      	mov	r0, r6
 800781a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800781e:	89ab      	ldrh	r3, [r5, #12]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d907      	bls.n	8007834 <_fwalk_sglue+0x38>
 8007824:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007828:	3301      	adds	r3, #1
 800782a:	d003      	beq.n	8007834 <_fwalk_sglue+0x38>
 800782c:	4629      	mov	r1, r5
 800782e:	4638      	mov	r0, r7
 8007830:	47c0      	blx	r8
 8007832:	4306      	orrs	r6, r0
 8007834:	3568      	adds	r5, #104	@ 0x68
 8007836:	e7e9      	b.n	800780c <_fwalk_sglue+0x10>

08007838 <sniprintf>:
 8007838:	b40c      	push	{r2, r3}
 800783a:	b530      	push	{r4, r5, lr}
 800783c:	4b18      	ldr	r3, [pc, #96]	@ (80078a0 <sniprintf+0x68>)
 800783e:	1e0c      	subs	r4, r1, #0
 8007840:	681d      	ldr	r5, [r3, #0]
 8007842:	b09d      	sub	sp, #116	@ 0x74
 8007844:	da08      	bge.n	8007858 <sniprintf+0x20>
 8007846:	238b      	movs	r3, #139	@ 0x8b
 8007848:	602b      	str	r3, [r5, #0]
 800784a:	f04f 30ff 	mov.w	r0, #4294967295
 800784e:	b01d      	add	sp, #116	@ 0x74
 8007850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007854:	b002      	add	sp, #8
 8007856:	4770      	bx	lr
 8007858:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800785c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007860:	f04f 0300 	mov.w	r3, #0
 8007864:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007866:	bf14      	ite	ne
 8007868:	f104 33ff 	addne.w	r3, r4, #4294967295
 800786c:	4623      	moveq	r3, r4
 800786e:	9304      	str	r3, [sp, #16]
 8007870:	9307      	str	r3, [sp, #28]
 8007872:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007876:	9002      	str	r0, [sp, #8]
 8007878:	9006      	str	r0, [sp, #24]
 800787a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800787e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007880:	ab21      	add	r3, sp, #132	@ 0x84
 8007882:	a902      	add	r1, sp, #8
 8007884:	4628      	mov	r0, r5
 8007886:	9301      	str	r3, [sp, #4]
 8007888:	f001 fc28 	bl	80090dc <_svfiprintf_r>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	bfbc      	itt	lt
 8007890:	238b      	movlt	r3, #139	@ 0x8b
 8007892:	602b      	strlt	r3, [r5, #0]
 8007894:	2c00      	cmp	r4, #0
 8007896:	d0da      	beq.n	800784e <sniprintf+0x16>
 8007898:	9b02      	ldr	r3, [sp, #8]
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
 800789e:	e7d6      	b.n	800784e <sniprintf+0x16>
 80078a0:	2000002c 	.word	0x2000002c

080078a4 <__sread>:
 80078a4:	b510      	push	{r4, lr}
 80078a6:	460c      	mov	r4, r1
 80078a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ac:	f000 f886 	bl	80079bc <_read_r>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	bfab      	itete	ge
 80078b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078b6:	89a3      	ldrhlt	r3, [r4, #12]
 80078b8:	181b      	addge	r3, r3, r0
 80078ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078be:	bfac      	ite	ge
 80078c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078c2:	81a3      	strhlt	r3, [r4, #12]
 80078c4:	bd10      	pop	{r4, pc}

080078c6 <__swrite>:
 80078c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ca:	461f      	mov	r7, r3
 80078cc:	898b      	ldrh	r3, [r1, #12]
 80078ce:	05db      	lsls	r3, r3, #23
 80078d0:	4605      	mov	r5, r0
 80078d2:	460c      	mov	r4, r1
 80078d4:	4616      	mov	r6, r2
 80078d6:	d505      	bpl.n	80078e4 <__swrite+0x1e>
 80078d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078dc:	2302      	movs	r3, #2
 80078de:	2200      	movs	r2, #0
 80078e0:	f000 f85a 	bl	8007998 <_lseek_r>
 80078e4:	89a3      	ldrh	r3, [r4, #12]
 80078e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078ee:	81a3      	strh	r3, [r4, #12]
 80078f0:	4632      	mov	r2, r6
 80078f2:	463b      	mov	r3, r7
 80078f4:	4628      	mov	r0, r5
 80078f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078fa:	f000 b871 	b.w	80079e0 <_write_r>

080078fe <__sseek>:
 80078fe:	b510      	push	{r4, lr}
 8007900:	460c      	mov	r4, r1
 8007902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007906:	f000 f847 	bl	8007998 <_lseek_r>
 800790a:	1c43      	adds	r3, r0, #1
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	bf15      	itete	ne
 8007910:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007912:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007916:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800791a:	81a3      	strheq	r3, [r4, #12]
 800791c:	bf18      	it	ne
 800791e:	81a3      	strhne	r3, [r4, #12]
 8007920:	bd10      	pop	{r4, pc}

08007922 <__sclose>:
 8007922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007926:	f000 b827 	b.w	8007978 <_close_r>

0800792a <memmove>:
 800792a:	4288      	cmp	r0, r1
 800792c:	b510      	push	{r4, lr}
 800792e:	eb01 0402 	add.w	r4, r1, r2
 8007932:	d902      	bls.n	800793a <memmove+0x10>
 8007934:	4284      	cmp	r4, r0
 8007936:	4623      	mov	r3, r4
 8007938:	d807      	bhi.n	800794a <memmove+0x20>
 800793a:	1e43      	subs	r3, r0, #1
 800793c:	42a1      	cmp	r1, r4
 800793e:	d008      	beq.n	8007952 <memmove+0x28>
 8007940:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007944:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007948:	e7f8      	b.n	800793c <memmove+0x12>
 800794a:	4402      	add	r2, r0
 800794c:	4601      	mov	r1, r0
 800794e:	428a      	cmp	r2, r1
 8007950:	d100      	bne.n	8007954 <memmove+0x2a>
 8007952:	bd10      	pop	{r4, pc}
 8007954:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007958:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800795c:	e7f7      	b.n	800794e <memmove+0x24>

0800795e <memset>:
 800795e:	4402      	add	r2, r0
 8007960:	4603      	mov	r3, r0
 8007962:	4293      	cmp	r3, r2
 8007964:	d100      	bne.n	8007968 <memset+0xa>
 8007966:	4770      	bx	lr
 8007968:	f803 1b01 	strb.w	r1, [r3], #1
 800796c:	e7f9      	b.n	8007962 <memset+0x4>
	...

08007970 <_localeconv_r>:
 8007970:	4800      	ldr	r0, [pc, #0]	@ (8007974 <_localeconv_r+0x4>)
 8007972:	4770      	bx	lr
 8007974:	2000016c 	.word	0x2000016c

08007978 <_close_r>:
 8007978:	b538      	push	{r3, r4, r5, lr}
 800797a:	4d06      	ldr	r5, [pc, #24]	@ (8007994 <_close_r+0x1c>)
 800797c:	2300      	movs	r3, #0
 800797e:	4604      	mov	r4, r0
 8007980:	4608      	mov	r0, r1
 8007982:	602b      	str	r3, [r5, #0]
 8007984:	f7fa f972 	bl	8001c6c <_close>
 8007988:	1c43      	adds	r3, r0, #1
 800798a:	d102      	bne.n	8007992 <_close_r+0x1a>
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	b103      	cbz	r3, 8007992 <_close_r+0x1a>
 8007990:	6023      	str	r3, [r4, #0]
 8007992:	bd38      	pop	{r3, r4, r5, pc}
 8007994:	20000a0c 	.word	0x20000a0c

08007998 <_lseek_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4d07      	ldr	r5, [pc, #28]	@ (80079b8 <_lseek_r+0x20>)
 800799c:	4604      	mov	r4, r0
 800799e:	4608      	mov	r0, r1
 80079a0:	4611      	mov	r1, r2
 80079a2:	2200      	movs	r2, #0
 80079a4:	602a      	str	r2, [r5, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	f7fa f987 	bl	8001cba <_lseek>
 80079ac:	1c43      	adds	r3, r0, #1
 80079ae:	d102      	bne.n	80079b6 <_lseek_r+0x1e>
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	b103      	cbz	r3, 80079b6 <_lseek_r+0x1e>
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	bd38      	pop	{r3, r4, r5, pc}
 80079b8:	20000a0c 	.word	0x20000a0c

080079bc <_read_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4d07      	ldr	r5, [pc, #28]	@ (80079dc <_read_r+0x20>)
 80079c0:	4604      	mov	r4, r0
 80079c2:	4608      	mov	r0, r1
 80079c4:	4611      	mov	r1, r2
 80079c6:	2200      	movs	r2, #0
 80079c8:	602a      	str	r2, [r5, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	f7fa f915 	bl	8001bfa <_read>
 80079d0:	1c43      	adds	r3, r0, #1
 80079d2:	d102      	bne.n	80079da <_read_r+0x1e>
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	b103      	cbz	r3, 80079da <_read_r+0x1e>
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	bd38      	pop	{r3, r4, r5, pc}
 80079dc:	20000a0c 	.word	0x20000a0c

080079e0 <_write_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	4d07      	ldr	r5, [pc, #28]	@ (8007a00 <_write_r+0x20>)
 80079e4:	4604      	mov	r4, r0
 80079e6:	4608      	mov	r0, r1
 80079e8:	4611      	mov	r1, r2
 80079ea:	2200      	movs	r2, #0
 80079ec:	602a      	str	r2, [r5, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	f7fa f920 	bl	8001c34 <_write>
 80079f4:	1c43      	adds	r3, r0, #1
 80079f6:	d102      	bne.n	80079fe <_write_r+0x1e>
 80079f8:	682b      	ldr	r3, [r5, #0]
 80079fa:	b103      	cbz	r3, 80079fe <_write_r+0x1e>
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	20000a0c 	.word	0x20000a0c

08007a04 <__errno>:
 8007a04:	4b01      	ldr	r3, [pc, #4]	@ (8007a0c <__errno+0x8>)
 8007a06:	6818      	ldr	r0, [r3, #0]
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	2000002c 	.word	0x2000002c

08007a10 <__libc_init_array>:
 8007a10:	b570      	push	{r4, r5, r6, lr}
 8007a12:	4d0d      	ldr	r5, [pc, #52]	@ (8007a48 <__libc_init_array+0x38>)
 8007a14:	4c0d      	ldr	r4, [pc, #52]	@ (8007a4c <__libc_init_array+0x3c>)
 8007a16:	1b64      	subs	r4, r4, r5
 8007a18:	10a4      	asrs	r4, r4, #2
 8007a1a:	2600      	movs	r6, #0
 8007a1c:	42a6      	cmp	r6, r4
 8007a1e:	d109      	bne.n	8007a34 <__libc_init_array+0x24>
 8007a20:	4d0b      	ldr	r5, [pc, #44]	@ (8007a50 <__libc_init_array+0x40>)
 8007a22:	4c0c      	ldr	r4, [pc, #48]	@ (8007a54 <__libc_init_array+0x44>)
 8007a24:	f002 f850 	bl	8009ac8 <_init>
 8007a28:	1b64      	subs	r4, r4, r5
 8007a2a:	10a4      	asrs	r4, r4, #2
 8007a2c:	2600      	movs	r6, #0
 8007a2e:	42a6      	cmp	r6, r4
 8007a30:	d105      	bne.n	8007a3e <__libc_init_array+0x2e>
 8007a32:	bd70      	pop	{r4, r5, r6, pc}
 8007a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a38:	4798      	blx	r3
 8007a3a:	3601      	adds	r6, #1
 8007a3c:	e7ee      	b.n	8007a1c <__libc_init_array+0xc>
 8007a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a42:	4798      	blx	r3
 8007a44:	3601      	adds	r6, #1
 8007a46:	e7f2      	b.n	8007a2e <__libc_init_array+0x1e>
 8007a48:	0800ac5c 	.word	0x0800ac5c
 8007a4c:	0800ac5c 	.word	0x0800ac5c
 8007a50:	0800ac5c 	.word	0x0800ac5c
 8007a54:	0800ac60 	.word	0x0800ac60

08007a58 <__retarget_lock_init_recursive>:
 8007a58:	4770      	bx	lr

08007a5a <__retarget_lock_acquire_recursive>:
 8007a5a:	4770      	bx	lr

08007a5c <__retarget_lock_release_recursive>:
 8007a5c:	4770      	bx	lr

08007a5e <memcpy>:
 8007a5e:	440a      	add	r2, r1
 8007a60:	4291      	cmp	r1, r2
 8007a62:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a66:	d100      	bne.n	8007a6a <memcpy+0xc>
 8007a68:	4770      	bx	lr
 8007a6a:	b510      	push	{r4, lr}
 8007a6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a74:	4291      	cmp	r1, r2
 8007a76:	d1f9      	bne.n	8007a6c <memcpy+0xe>
 8007a78:	bd10      	pop	{r4, pc}

08007a7a <quorem>:
 8007a7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7e:	6903      	ldr	r3, [r0, #16]
 8007a80:	690c      	ldr	r4, [r1, #16]
 8007a82:	42a3      	cmp	r3, r4
 8007a84:	4607      	mov	r7, r0
 8007a86:	db7e      	blt.n	8007b86 <quorem+0x10c>
 8007a88:	3c01      	subs	r4, #1
 8007a8a:	f101 0814 	add.w	r8, r1, #20
 8007a8e:	00a3      	lsls	r3, r4, #2
 8007a90:	f100 0514 	add.w	r5, r0, #20
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a9a:	9301      	str	r3, [sp, #4]
 8007a9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007aa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007aac:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ab0:	d32e      	bcc.n	8007b10 <quorem+0x96>
 8007ab2:	f04f 0a00 	mov.w	sl, #0
 8007ab6:	46c4      	mov	ip, r8
 8007ab8:	46ae      	mov	lr, r5
 8007aba:	46d3      	mov	fp, sl
 8007abc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ac0:	b298      	uxth	r0, r3
 8007ac2:	fb06 a000 	mla	r0, r6, r0, sl
 8007ac6:	0c02      	lsrs	r2, r0, #16
 8007ac8:	0c1b      	lsrs	r3, r3, #16
 8007aca:	fb06 2303 	mla	r3, r6, r3, r2
 8007ace:	f8de 2000 	ldr.w	r2, [lr]
 8007ad2:	b280      	uxth	r0, r0
 8007ad4:	b292      	uxth	r2, r2
 8007ad6:	1a12      	subs	r2, r2, r0
 8007ad8:	445a      	add	r2, fp
 8007ada:	f8de 0000 	ldr.w	r0, [lr]
 8007ade:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007ae8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007aec:	b292      	uxth	r2, r2
 8007aee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007af2:	45e1      	cmp	r9, ip
 8007af4:	f84e 2b04 	str.w	r2, [lr], #4
 8007af8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007afc:	d2de      	bcs.n	8007abc <quorem+0x42>
 8007afe:	9b00      	ldr	r3, [sp, #0]
 8007b00:	58eb      	ldr	r3, [r5, r3]
 8007b02:	b92b      	cbnz	r3, 8007b10 <quorem+0x96>
 8007b04:	9b01      	ldr	r3, [sp, #4]
 8007b06:	3b04      	subs	r3, #4
 8007b08:	429d      	cmp	r5, r3
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	d32f      	bcc.n	8007b6e <quorem+0xf4>
 8007b0e:	613c      	str	r4, [r7, #16]
 8007b10:	4638      	mov	r0, r7
 8007b12:	f001 f97f 	bl	8008e14 <__mcmp>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	db25      	blt.n	8007b66 <quorem+0xec>
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b22:	f8d1 c000 	ldr.w	ip, [r1]
 8007b26:	fa1f fe82 	uxth.w	lr, r2
 8007b2a:	fa1f f38c 	uxth.w	r3, ip
 8007b2e:	eba3 030e 	sub.w	r3, r3, lr
 8007b32:	4403      	add	r3, r0
 8007b34:	0c12      	lsrs	r2, r2, #16
 8007b36:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007b3a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b44:	45c1      	cmp	r9, r8
 8007b46:	f841 3b04 	str.w	r3, [r1], #4
 8007b4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b4e:	d2e6      	bcs.n	8007b1e <quorem+0xa4>
 8007b50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b58:	b922      	cbnz	r2, 8007b64 <quorem+0xea>
 8007b5a:	3b04      	subs	r3, #4
 8007b5c:	429d      	cmp	r5, r3
 8007b5e:	461a      	mov	r2, r3
 8007b60:	d30b      	bcc.n	8007b7a <quorem+0x100>
 8007b62:	613c      	str	r4, [r7, #16]
 8007b64:	3601      	adds	r6, #1
 8007b66:	4630      	mov	r0, r6
 8007b68:	b003      	add	sp, #12
 8007b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b6e:	6812      	ldr	r2, [r2, #0]
 8007b70:	3b04      	subs	r3, #4
 8007b72:	2a00      	cmp	r2, #0
 8007b74:	d1cb      	bne.n	8007b0e <quorem+0x94>
 8007b76:	3c01      	subs	r4, #1
 8007b78:	e7c6      	b.n	8007b08 <quorem+0x8e>
 8007b7a:	6812      	ldr	r2, [r2, #0]
 8007b7c:	3b04      	subs	r3, #4
 8007b7e:	2a00      	cmp	r2, #0
 8007b80:	d1ef      	bne.n	8007b62 <quorem+0xe8>
 8007b82:	3c01      	subs	r4, #1
 8007b84:	e7ea      	b.n	8007b5c <quorem+0xe2>
 8007b86:	2000      	movs	r0, #0
 8007b88:	e7ee      	b.n	8007b68 <quorem+0xee>
 8007b8a:	0000      	movs	r0, r0
 8007b8c:	0000      	movs	r0, r0
	...

08007b90 <_dtoa_r>:
 8007b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b94:	69c7      	ldr	r7, [r0, #28]
 8007b96:	b097      	sub	sp, #92	@ 0x5c
 8007b98:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007b9c:	ec55 4b10 	vmov	r4, r5, d0
 8007ba0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007ba2:	9107      	str	r1, [sp, #28]
 8007ba4:	4681      	mov	r9, r0
 8007ba6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ba8:	9311      	str	r3, [sp, #68]	@ 0x44
 8007baa:	b97f      	cbnz	r7, 8007bcc <_dtoa_r+0x3c>
 8007bac:	2010      	movs	r0, #16
 8007bae:	f000 fe09 	bl	80087c4 <malloc>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	f8c9 001c 	str.w	r0, [r9, #28]
 8007bb8:	b920      	cbnz	r0, 8007bc4 <_dtoa_r+0x34>
 8007bba:	4ba9      	ldr	r3, [pc, #676]	@ (8007e60 <_dtoa_r+0x2d0>)
 8007bbc:	21ef      	movs	r1, #239	@ 0xef
 8007bbe:	48a9      	ldr	r0, [pc, #676]	@ (8007e64 <_dtoa_r+0x2d4>)
 8007bc0:	f001 fc44 	bl	800944c <__assert_func>
 8007bc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007bc8:	6007      	str	r7, [r0, #0]
 8007bca:	60c7      	str	r7, [r0, #12]
 8007bcc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007bd0:	6819      	ldr	r1, [r3, #0]
 8007bd2:	b159      	cbz	r1, 8007bec <_dtoa_r+0x5c>
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	604a      	str	r2, [r1, #4]
 8007bd8:	2301      	movs	r3, #1
 8007bda:	4093      	lsls	r3, r2
 8007bdc:	608b      	str	r3, [r1, #8]
 8007bde:	4648      	mov	r0, r9
 8007be0:	f000 fee6 	bl	80089b0 <_Bfree>
 8007be4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]
 8007bec:	1e2b      	subs	r3, r5, #0
 8007bee:	bfb9      	ittee	lt
 8007bf0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007bf4:	9305      	strlt	r3, [sp, #20]
 8007bf6:	2300      	movge	r3, #0
 8007bf8:	6033      	strge	r3, [r6, #0]
 8007bfa:	9f05      	ldr	r7, [sp, #20]
 8007bfc:	4b9a      	ldr	r3, [pc, #616]	@ (8007e68 <_dtoa_r+0x2d8>)
 8007bfe:	bfbc      	itt	lt
 8007c00:	2201      	movlt	r2, #1
 8007c02:	6032      	strlt	r2, [r6, #0]
 8007c04:	43bb      	bics	r3, r7
 8007c06:	d112      	bne.n	8007c2e <_dtoa_r+0x9e>
 8007c08:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007c0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007c0e:	6013      	str	r3, [r2, #0]
 8007c10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c14:	4323      	orrs	r3, r4
 8007c16:	f000 855a 	beq.w	80086ce <_dtoa_r+0xb3e>
 8007c1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c1c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007e7c <_dtoa_r+0x2ec>
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 855c 	beq.w	80086de <_dtoa_r+0xb4e>
 8007c26:	f10a 0303 	add.w	r3, sl, #3
 8007c2a:	f000 bd56 	b.w	80086da <_dtoa_r+0xb4a>
 8007c2e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007c32:	2200      	movs	r2, #0
 8007c34:	ec51 0b17 	vmov	r0, r1, d7
 8007c38:	2300      	movs	r3, #0
 8007c3a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007c3e:	f7f8 ff6b 	bl	8000b18 <__aeabi_dcmpeq>
 8007c42:	4680      	mov	r8, r0
 8007c44:	b158      	cbz	r0, 8007c5e <_dtoa_r+0xce>
 8007c46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007c48:	2301      	movs	r3, #1
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c4e:	b113      	cbz	r3, 8007c56 <_dtoa_r+0xc6>
 8007c50:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007c52:	4b86      	ldr	r3, [pc, #536]	@ (8007e6c <_dtoa_r+0x2dc>)
 8007c54:	6013      	str	r3, [r2, #0]
 8007c56:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007e80 <_dtoa_r+0x2f0>
 8007c5a:	f000 bd40 	b.w	80086de <_dtoa_r+0xb4e>
 8007c5e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007c62:	aa14      	add	r2, sp, #80	@ 0x50
 8007c64:	a915      	add	r1, sp, #84	@ 0x54
 8007c66:	4648      	mov	r0, r9
 8007c68:	f001 f984 	bl	8008f74 <__d2b>
 8007c6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007c70:	9002      	str	r0, [sp, #8]
 8007c72:	2e00      	cmp	r6, #0
 8007c74:	d078      	beq.n	8007d68 <_dtoa_r+0x1d8>
 8007c76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c78:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007c84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007c88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007c8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007c90:	4619      	mov	r1, r3
 8007c92:	2200      	movs	r2, #0
 8007c94:	4b76      	ldr	r3, [pc, #472]	@ (8007e70 <_dtoa_r+0x2e0>)
 8007c96:	f7f8 fb1f 	bl	80002d8 <__aeabi_dsub>
 8007c9a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007e48 <_dtoa_r+0x2b8>)
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	f7f8 fcd2 	bl	8000648 <__aeabi_dmul>
 8007ca4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007e50 <_dtoa_r+0x2c0>)
 8007ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007caa:	f7f8 fb17 	bl	80002dc <__adddf3>
 8007cae:	4604      	mov	r4, r0
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	460d      	mov	r5, r1
 8007cb4:	f7f8 fc5e 	bl	8000574 <__aeabi_i2d>
 8007cb8:	a367      	add	r3, pc, #412	@ (adr r3, 8007e58 <_dtoa_r+0x2c8>)
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	f7f8 fcc3 	bl	8000648 <__aeabi_dmul>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	4629      	mov	r1, r5
 8007cca:	f7f8 fb07 	bl	80002dc <__adddf3>
 8007cce:	4604      	mov	r4, r0
 8007cd0:	460d      	mov	r5, r1
 8007cd2:	f7f8 ff69 	bl	8000ba8 <__aeabi_d2iz>
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	4607      	mov	r7, r0
 8007cda:	2300      	movs	r3, #0
 8007cdc:	4620      	mov	r0, r4
 8007cde:	4629      	mov	r1, r5
 8007ce0:	f7f8 ff24 	bl	8000b2c <__aeabi_dcmplt>
 8007ce4:	b140      	cbz	r0, 8007cf8 <_dtoa_r+0x168>
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	f7f8 fc44 	bl	8000574 <__aeabi_i2d>
 8007cec:	4622      	mov	r2, r4
 8007cee:	462b      	mov	r3, r5
 8007cf0:	f7f8 ff12 	bl	8000b18 <__aeabi_dcmpeq>
 8007cf4:	b900      	cbnz	r0, 8007cf8 <_dtoa_r+0x168>
 8007cf6:	3f01      	subs	r7, #1
 8007cf8:	2f16      	cmp	r7, #22
 8007cfa:	d852      	bhi.n	8007da2 <_dtoa_r+0x212>
 8007cfc:	4b5d      	ldr	r3, [pc, #372]	@ (8007e74 <_dtoa_r+0x2e4>)
 8007cfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d0a:	f7f8 ff0f 	bl	8000b2c <__aeabi_dcmplt>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	d049      	beq.n	8007da6 <_dtoa_r+0x216>
 8007d12:	3f01      	subs	r7, #1
 8007d14:	2300      	movs	r3, #0
 8007d16:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007d1a:	1b9b      	subs	r3, r3, r6
 8007d1c:	1e5a      	subs	r2, r3, #1
 8007d1e:	bf45      	ittet	mi
 8007d20:	f1c3 0301 	rsbmi	r3, r3, #1
 8007d24:	9300      	strmi	r3, [sp, #0]
 8007d26:	2300      	movpl	r3, #0
 8007d28:	2300      	movmi	r3, #0
 8007d2a:	9206      	str	r2, [sp, #24]
 8007d2c:	bf54      	ite	pl
 8007d2e:	9300      	strpl	r3, [sp, #0]
 8007d30:	9306      	strmi	r3, [sp, #24]
 8007d32:	2f00      	cmp	r7, #0
 8007d34:	db39      	blt.n	8007daa <_dtoa_r+0x21a>
 8007d36:	9b06      	ldr	r3, [sp, #24]
 8007d38:	970d      	str	r7, [sp, #52]	@ 0x34
 8007d3a:	443b      	add	r3, r7
 8007d3c:	9306      	str	r3, [sp, #24]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	9308      	str	r3, [sp, #32]
 8007d42:	9b07      	ldr	r3, [sp, #28]
 8007d44:	2b09      	cmp	r3, #9
 8007d46:	d863      	bhi.n	8007e10 <_dtoa_r+0x280>
 8007d48:	2b05      	cmp	r3, #5
 8007d4a:	bfc4      	itt	gt
 8007d4c:	3b04      	subgt	r3, #4
 8007d4e:	9307      	strgt	r3, [sp, #28]
 8007d50:	9b07      	ldr	r3, [sp, #28]
 8007d52:	f1a3 0302 	sub.w	r3, r3, #2
 8007d56:	bfcc      	ite	gt
 8007d58:	2400      	movgt	r4, #0
 8007d5a:	2401      	movle	r4, #1
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d863      	bhi.n	8007e28 <_dtoa_r+0x298>
 8007d60:	e8df f003 	tbb	[pc, r3]
 8007d64:	2b375452 	.word	0x2b375452
 8007d68:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007d6c:	441e      	add	r6, r3
 8007d6e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007d72:	2b20      	cmp	r3, #32
 8007d74:	bfc1      	itttt	gt
 8007d76:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007d7a:	409f      	lslgt	r7, r3
 8007d7c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007d80:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007d84:	bfd6      	itet	le
 8007d86:	f1c3 0320 	rsble	r3, r3, #32
 8007d8a:	ea47 0003 	orrgt.w	r0, r7, r3
 8007d8e:	fa04 f003 	lslle.w	r0, r4, r3
 8007d92:	f7f8 fbdf 	bl	8000554 <__aeabi_ui2d>
 8007d96:	2201      	movs	r2, #1
 8007d98:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007d9c:	3e01      	subs	r6, #1
 8007d9e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007da0:	e776      	b.n	8007c90 <_dtoa_r+0x100>
 8007da2:	2301      	movs	r3, #1
 8007da4:	e7b7      	b.n	8007d16 <_dtoa_r+0x186>
 8007da6:	9010      	str	r0, [sp, #64]	@ 0x40
 8007da8:	e7b6      	b.n	8007d18 <_dtoa_r+0x188>
 8007daa:	9b00      	ldr	r3, [sp, #0]
 8007dac:	1bdb      	subs	r3, r3, r7
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	427b      	negs	r3, r7
 8007db2:	9308      	str	r3, [sp, #32]
 8007db4:	2300      	movs	r3, #0
 8007db6:	930d      	str	r3, [sp, #52]	@ 0x34
 8007db8:	e7c3      	b.n	8007d42 <_dtoa_r+0x1b2>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007dc0:	eb07 0b03 	add.w	fp, r7, r3
 8007dc4:	f10b 0301 	add.w	r3, fp, #1
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	9303      	str	r3, [sp, #12]
 8007dcc:	bfb8      	it	lt
 8007dce:	2301      	movlt	r3, #1
 8007dd0:	e006      	b.n	8007de0 <_dtoa_r+0x250>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	dd28      	ble.n	8007e2e <_dtoa_r+0x29e>
 8007ddc:	469b      	mov	fp, r3
 8007dde:	9303      	str	r3, [sp, #12]
 8007de0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007de4:	2100      	movs	r1, #0
 8007de6:	2204      	movs	r2, #4
 8007de8:	f102 0514 	add.w	r5, r2, #20
 8007dec:	429d      	cmp	r5, r3
 8007dee:	d926      	bls.n	8007e3e <_dtoa_r+0x2ae>
 8007df0:	6041      	str	r1, [r0, #4]
 8007df2:	4648      	mov	r0, r9
 8007df4:	f000 fd9c 	bl	8008930 <_Balloc>
 8007df8:	4682      	mov	sl, r0
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	d142      	bne.n	8007e84 <_dtoa_r+0x2f4>
 8007dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8007e78 <_dtoa_r+0x2e8>)
 8007e00:	4602      	mov	r2, r0
 8007e02:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e06:	e6da      	b.n	8007bbe <_dtoa_r+0x2e>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e7e3      	b.n	8007dd4 <_dtoa_r+0x244>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	e7d5      	b.n	8007dbc <_dtoa_r+0x22c>
 8007e10:	2401      	movs	r4, #1
 8007e12:	2300      	movs	r3, #0
 8007e14:	9307      	str	r3, [sp, #28]
 8007e16:	9409      	str	r4, [sp, #36]	@ 0x24
 8007e18:	f04f 3bff 	mov.w	fp, #4294967295
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007e22:	2312      	movs	r3, #18
 8007e24:	920c      	str	r2, [sp, #48]	@ 0x30
 8007e26:	e7db      	b.n	8007de0 <_dtoa_r+0x250>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e2c:	e7f4      	b.n	8007e18 <_dtoa_r+0x288>
 8007e2e:	f04f 0b01 	mov.w	fp, #1
 8007e32:	f8cd b00c 	str.w	fp, [sp, #12]
 8007e36:	465b      	mov	r3, fp
 8007e38:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007e3c:	e7d0      	b.n	8007de0 <_dtoa_r+0x250>
 8007e3e:	3101      	adds	r1, #1
 8007e40:	0052      	lsls	r2, r2, #1
 8007e42:	e7d1      	b.n	8007de8 <_dtoa_r+0x258>
 8007e44:	f3af 8000 	nop.w
 8007e48:	636f4361 	.word	0x636f4361
 8007e4c:	3fd287a7 	.word	0x3fd287a7
 8007e50:	8b60c8b3 	.word	0x8b60c8b3
 8007e54:	3fc68a28 	.word	0x3fc68a28
 8007e58:	509f79fb 	.word	0x509f79fb
 8007e5c:	3fd34413 	.word	0x3fd34413
 8007e60:	0800a91d 	.word	0x0800a91d
 8007e64:	0800a934 	.word	0x0800a934
 8007e68:	7ff00000 	.word	0x7ff00000
 8007e6c:	0800a8ed 	.word	0x0800a8ed
 8007e70:	3ff80000 	.word	0x3ff80000
 8007e74:	0800aa88 	.word	0x0800aa88
 8007e78:	0800a98c 	.word	0x0800a98c
 8007e7c:	0800a919 	.word	0x0800a919
 8007e80:	0800a8ec 	.word	0x0800a8ec
 8007e84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e88:	6018      	str	r0, [r3, #0]
 8007e8a:	9b03      	ldr	r3, [sp, #12]
 8007e8c:	2b0e      	cmp	r3, #14
 8007e8e:	f200 80a1 	bhi.w	8007fd4 <_dtoa_r+0x444>
 8007e92:	2c00      	cmp	r4, #0
 8007e94:	f000 809e 	beq.w	8007fd4 <_dtoa_r+0x444>
 8007e98:	2f00      	cmp	r7, #0
 8007e9a:	dd33      	ble.n	8007f04 <_dtoa_r+0x374>
 8007e9c:	4b9c      	ldr	r3, [pc, #624]	@ (8008110 <_dtoa_r+0x580>)
 8007e9e:	f007 020f 	and.w	r2, r7, #15
 8007ea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ea6:	ed93 7b00 	vldr	d7, [r3]
 8007eaa:	05f8      	lsls	r0, r7, #23
 8007eac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007eb0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007eb4:	d516      	bpl.n	8007ee4 <_dtoa_r+0x354>
 8007eb6:	4b97      	ldr	r3, [pc, #604]	@ (8008114 <_dtoa_r+0x584>)
 8007eb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007ebc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ec0:	f7f8 fcec 	bl	800089c <__aeabi_ddiv>
 8007ec4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ec8:	f004 040f 	and.w	r4, r4, #15
 8007ecc:	2603      	movs	r6, #3
 8007ece:	4d91      	ldr	r5, [pc, #580]	@ (8008114 <_dtoa_r+0x584>)
 8007ed0:	b954      	cbnz	r4, 8007ee8 <_dtoa_r+0x358>
 8007ed2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007ed6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007eda:	f7f8 fcdf 	bl	800089c <__aeabi_ddiv>
 8007ede:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ee2:	e028      	b.n	8007f36 <_dtoa_r+0x3a6>
 8007ee4:	2602      	movs	r6, #2
 8007ee6:	e7f2      	b.n	8007ece <_dtoa_r+0x33e>
 8007ee8:	07e1      	lsls	r1, r4, #31
 8007eea:	d508      	bpl.n	8007efe <_dtoa_r+0x36e>
 8007eec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007ef0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ef4:	f7f8 fba8 	bl	8000648 <__aeabi_dmul>
 8007ef8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007efc:	3601      	adds	r6, #1
 8007efe:	1064      	asrs	r4, r4, #1
 8007f00:	3508      	adds	r5, #8
 8007f02:	e7e5      	b.n	8007ed0 <_dtoa_r+0x340>
 8007f04:	f000 80af 	beq.w	8008066 <_dtoa_r+0x4d6>
 8007f08:	427c      	negs	r4, r7
 8007f0a:	4b81      	ldr	r3, [pc, #516]	@ (8008110 <_dtoa_r+0x580>)
 8007f0c:	4d81      	ldr	r5, [pc, #516]	@ (8008114 <_dtoa_r+0x584>)
 8007f0e:	f004 020f 	and.w	r2, r4, #15
 8007f12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007f1e:	f7f8 fb93 	bl	8000648 <__aeabi_dmul>
 8007f22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f26:	1124      	asrs	r4, r4, #4
 8007f28:	2300      	movs	r3, #0
 8007f2a:	2602      	movs	r6, #2
 8007f2c:	2c00      	cmp	r4, #0
 8007f2e:	f040 808f 	bne.w	8008050 <_dtoa_r+0x4c0>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1d3      	bne.n	8007ede <_dtoa_r+0x34e>
 8007f36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f38:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 8094 	beq.w	800806a <_dtoa_r+0x4da>
 8007f42:	4b75      	ldr	r3, [pc, #468]	@ (8008118 <_dtoa_r+0x588>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	4620      	mov	r0, r4
 8007f48:	4629      	mov	r1, r5
 8007f4a:	f7f8 fdef 	bl	8000b2c <__aeabi_dcmplt>
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	f000 808b 	beq.w	800806a <_dtoa_r+0x4da>
 8007f54:	9b03      	ldr	r3, [sp, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 8087 	beq.w	800806a <_dtoa_r+0x4da>
 8007f5c:	f1bb 0f00 	cmp.w	fp, #0
 8007f60:	dd34      	ble.n	8007fcc <_dtoa_r+0x43c>
 8007f62:	4620      	mov	r0, r4
 8007f64:	4b6d      	ldr	r3, [pc, #436]	@ (800811c <_dtoa_r+0x58c>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	4629      	mov	r1, r5
 8007f6a:	f7f8 fb6d 	bl	8000648 <__aeabi_dmul>
 8007f6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f72:	f107 38ff 	add.w	r8, r7, #4294967295
 8007f76:	3601      	adds	r6, #1
 8007f78:	465c      	mov	r4, fp
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f7f8 fafa 	bl	8000574 <__aeabi_i2d>
 8007f80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f84:	f7f8 fb60 	bl	8000648 <__aeabi_dmul>
 8007f88:	4b65      	ldr	r3, [pc, #404]	@ (8008120 <_dtoa_r+0x590>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f7f8 f9a6 	bl	80002dc <__adddf3>
 8007f90:	4605      	mov	r5, r0
 8007f92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007f96:	2c00      	cmp	r4, #0
 8007f98:	d16a      	bne.n	8008070 <_dtoa_r+0x4e0>
 8007f9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f9e:	4b61      	ldr	r3, [pc, #388]	@ (8008124 <_dtoa_r+0x594>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f7f8 f999 	bl	80002d8 <__aeabi_dsub>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fae:	462a      	mov	r2, r5
 8007fb0:	4633      	mov	r3, r6
 8007fb2:	f7f8 fdd9 	bl	8000b68 <__aeabi_dcmpgt>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	f040 8298 	bne.w	80084ec <_dtoa_r+0x95c>
 8007fbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fc0:	462a      	mov	r2, r5
 8007fc2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007fc6:	f7f8 fdb1 	bl	8000b2c <__aeabi_dcmplt>
 8007fca:	bb38      	cbnz	r0, 800801c <_dtoa_r+0x48c>
 8007fcc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007fd0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007fd4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f2c0 8157 	blt.w	800828a <_dtoa_r+0x6fa>
 8007fdc:	2f0e      	cmp	r7, #14
 8007fde:	f300 8154 	bgt.w	800828a <_dtoa_r+0x6fa>
 8007fe2:	4b4b      	ldr	r3, [pc, #300]	@ (8008110 <_dtoa_r+0x580>)
 8007fe4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007fe8:	ed93 7b00 	vldr	d7, [r3]
 8007fec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	ed8d 7b00 	vstr	d7, [sp]
 8007ff4:	f280 80e5 	bge.w	80081c2 <_dtoa_r+0x632>
 8007ff8:	9b03      	ldr	r3, [sp, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f300 80e1 	bgt.w	80081c2 <_dtoa_r+0x632>
 8008000:	d10c      	bne.n	800801c <_dtoa_r+0x48c>
 8008002:	4b48      	ldr	r3, [pc, #288]	@ (8008124 <_dtoa_r+0x594>)
 8008004:	2200      	movs	r2, #0
 8008006:	ec51 0b17 	vmov	r0, r1, d7
 800800a:	f7f8 fb1d 	bl	8000648 <__aeabi_dmul>
 800800e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008012:	f7f8 fd9f 	bl	8000b54 <__aeabi_dcmpge>
 8008016:	2800      	cmp	r0, #0
 8008018:	f000 8266 	beq.w	80084e8 <_dtoa_r+0x958>
 800801c:	2400      	movs	r4, #0
 800801e:	4625      	mov	r5, r4
 8008020:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008022:	4656      	mov	r6, sl
 8008024:	ea6f 0803 	mvn.w	r8, r3
 8008028:	2700      	movs	r7, #0
 800802a:	4621      	mov	r1, r4
 800802c:	4648      	mov	r0, r9
 800802e:	f000 fcbf 	bl	80089b0 <_Bfree>
 8008032:	2d00      	cmp	r5, #0
 8008034:	f000 80bd 	beq.w	80081b2 <_dtoa_r+0x622>
 8008038:	b12f      	cbz	r7, 8008046 <_dtoa_r+0x4b6>
 800803a:	42af      	cmp	r7, r5
 800803c:	d003      	beq.n	8008046 <_dtoa_r+0x4b6>
 800803e:	4639      	mov	r1, r7
 8008040:	4648      	mov	r0, r9
 8008042:	f000 fcb5 	bl	80089b0 <_Bfree>
 8008046:	4629      	mov	r1, r5
 8008048:	4648      	mov	r0, r9
 800804a:	f000 fcb1 	bl	80089b0 <_Bfree>
 800804e:	e0b0      	b.n	80081b2 <_dtoa_r+0x622>
 8008050:	07e2      	lsls	r2, r4, #31
 8008052:	d505      	bpl.n	8008060 <_dtoa_r+0x4d0>
 8008054:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008058:	f7f8 faf6 	bl	8000648 <__aeabi_dmul>
 800805c:	3601      	adds	r6, #1
 800805e:	2301      	movs	r3, #1
 8008060:	1064      	asrs	r4, r4, #1
 8008062:	3508      	adds	r5, #8
 8008064:	e762      	b.n	8007f2c <_dtoa_r+0x39c>
 8008066:	2602      	movs	r6, #2
 8008068:	e765      	b.n	8007f36 <_dtoa_r+0x3a6>
 800806a:	9c03      	ldr	r4, [sp, #12]
 800806c:	46b8      	mov	r8, r7
 800806e:	e784      	b.n	8007f7a <_dtoa_r+0x3ea>
 8008070:	4b27      	ldr	r3, [pc, #156]	@ (8008110 <_dtoa_r+0x580>)
 8008072:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008074:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008078:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800807c:	4454      	add	r4, sl
 800807e:	2900      	cmp	r1, #0
 8008080:	d054      	beq.n	800812c <_dtoa_r+0x59c>
 8008082:	4929      	ldr	r1, [pc, #164]	@ (8008128 <_dtoa_r+0x598>)
 8008084:	2000      	movs	r0, #0
 8008086:	f7f8 fc09 	bl	800089c <__aeabi_ddiv>
 800808a:	4633      	mov	r3, r6
 800808c:	462a      	mov	r2, r5
 800808e:	f7f8 f923 	bl	80002d8 <__aeabi_dsub>
 8008092:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008096:	4656      	mov	r6, sl
 8008098:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800809c:	f7f8 fd84 	bl	8000ba8 <__aeabi_d2iz>
 80080a0:	4605      	mov	r5, r0
 80080a2:	f7f8 fa67 	bl	8000574 <__aeabi_i2d>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080ae:	f7f8 f913 	bl	80002d8 <__aeabi_dsub>
 80080b2:	3530      	adds	r5, #48	@ 0x30
 80080b4:	4602      	mov	r2, r0
 80080b6:	460b      	mov	r3, r1
 80080b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80080bc:	f806 5b01 	strb.w	r5, [r6], #1
 80080c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80080c4:	f7f8 fd32 	bl	8000b2c <__aeabi_dcmplt>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d172      	bne.n	80081b2 <_dtoa_r+0x622>
 80080cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080d0:	4911      	ldr	r1, [pc, #68]	@ (8008118 <_dtoa_r+0x588>)
 80080d2:	2000      	movs	r0, #0
 80080d4:	f7f8 f900 	bl	80002d8 <__aeabi_dsub>
 80080d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80080dc:	f7f8 fd26 	bl	8000b2c <__aeabi_dcmplt>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	f040 80b4 	bne.w	800824e <_dtoa_r+0x6be>
 80080e6:	42a6      	cmp	r6, r4
 80080e8:	f43f af70 	beq.w	8007fcc <_dtoa_r+0x43c>
 80080ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80080f0:	4b0a      	ldr	r3, [pc, #40]	@ (800811c <_dtoa_r+0x58c>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	f7f8 faa8 	bl	8000648 <__aeabi_dmul>
 80080f8:	4b08      	ldr	r3, [pc, #32]	@ (800811c <_dtoa_r+0x58c>)
 80080fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80080fe:	2200      	movs	r2, #0
 8008100:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008104:	f7f8 faa0 	bl	8000648 <__aeabi_dmul>
 8008108:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800810c:	e7c4      	b.n	8008098 <_dtoa_r+0x508>
 800810e:	bf00      	nop
 8008110:	0800aa88 	.word	0x0800aa88
 8008114:	0800aa60 	.word	0x0800aa60
 8008118:	3ff00000 	.word	0x3ff00000
 800811c:	40240000 	.word	0x40240000
 8008120:	401c0000 	.word	0x401c0000
 8008124:	40140000 	.word	0x40140000
 8008128:	3fe00000 	.word	0x3fe00000
 800812c:	4631      	mov	r1, r6
 800812e:	4628      	mov	r0, r5
 8008130:	f7f8 fa8a 	bl	8000648 <__aeabi_dmul>
 8008134:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008138:	9413      	str	r4, [sp, #76]	@ 0x4c
 800813a:	4656      	mov	r6, sl
 800813c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008140:	f7f8 fd32 	bl	8000ba8 <__aeabi_d2iz>
 8008144:	4605      	mov	r5, r0
 8008146:	f7f8 fa15 	bl	8000574 <__aeabi_i2d>
 800814a:	4602      	mov	r2, r0
 800814c:	460b      	mov	r3, r1
 800814e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008152:	f7f8 f8c1 	bl	80002d8 <__aeabi_dsub>
 8008156:	3530      	adds	r5, #48	@ 0x30
 8008158:	f806 5b01 	strb.w	r5, [r6], #1
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	42a6      	cmp	r6, r4
 8008162:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008166:	f04f 0200 	mov.w	r2, #0
 800816a:	d124      	bne.n	80081b6 <_dtoa_r+0x626>
 800816c:	4baf      	ldr	r3, [pc, #700]	@ (800842c <_dtoa_r+0x89c>)
 800816e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008172:	f7f8 f8b3 	bl	80002dc <__adddf3>
 8008176:	4602      	mov	r2, r0
 8008178:	460b      	mov	r3, r1
 800817a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800817e:	f7f8 fcf3 	bl	8000b68 <__aeabi_dcmpgt>
 8008182:	2800      	cmp	r0, #0
 8008184:	d163      	bne.n	800824e <_dtoa_r+0x6be>
 8008186:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800818a:	49a8      	ldr	r1, [pc, #672]	@ (800842c <_dtoa_r+0x89c>)
 800818c:	2000      	movs	r0, #0
 800818e:	f7f8 f8a3 	bl	80002d8 <__aeabi_dsub>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800819a:	f7f8 fcc7 	bl	8000b2c <__aeabi_dcmplt>
 800819e:	2800      	cmp	r0, #0
 80081a0:	f43f af14 	beq.w	8007fcc <_dtoa_r+0x43c>
 80081a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80081a6:	1e73      	subs	r3, r6, #1
 80081a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80081aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80081ae:	2b30      	cmp	r3, #48	@ 0x30
 80081b0:	d0f8      	beq.n	80081a4 <_dtoa_r+0x614>
 80081b2:	4647      	mov	r7, r8
 80081b4:	e03b      	b.n	800822e <_dtoa_r+0x69e>
 80081b6:	4b9e      	ldr	r3, [pc, #632]	@ (8008430 <_dtoa_r+0x8a0>)
 80081b8:	f7f8 fa46 	bl	8000648 <__aeabi_dmul>
 80081bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081c0:	e7bc      	b.n	800813c <_dtoa_r+0x5ac>
 80081c2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80081c6:	4656      	mov	r6, sl
 80081c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081cc:	4620      	mov	r0, r4
 80081ce:	4629      	mov	r1, r5
 80081d0:	f7f8 fb64 	bl	800089c <__aeabi_ddiv>
 80081d4:	f7f8 fce8 	bl	8000ba8 <__aeabi_d2iz>
 80081d8:	4680      	mov	r8, r0
 80081da:	f7f8 f9cb 	bl	8000574 <__aeabi_i2d>
 80081de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081e2:	f7f8 fa31 	bl	8000648 <__aeabi_dmul>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	4620      	mov	r0, r4
 80081ec:	4629      	mov	r1, r5
 80081ee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80081f2:	f7f8 f871 	bl	80002d8 <__aeabi_dsub>
 80081f6:	f806 4b01 	strb.w	r4, [r6], #1
 80081fa:	9d03      	ldr	r5, [sp, #12]
 80081fc:	eba6 040a 	sub.w	r4, r6, sl
 8008200:	42a5      	cmp	r5, r4
 8008202:	4602      	mov	r2, r0
 8008204:	460b      	mov	r3, r1
 8008206:	d133      	bne.n	8008270 <_dtoa_r+0x6e0>
 8008208:	f7f8 f868 	bl	80002dc <__adddf3>
 800820c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008210:	4604      	mov	r4, r0
 8008212:	460d      	mov	r5, r1
 8008214:	f7f8 fca8 	bl	8000b68 <__aeabi_dcmpgt>
 8008218:	b9c0      	cbnz	r0, 800824c <_dtoa_r+0x6bc>
 800821a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800821e:	4620      	mov	r0, r4
 8008220:	4629      	mov	r1, r5
 8008222:	f7f8 fc79 	bl	8000b18 <__aeabi_dcmpeq>
 8008226:	b110      	cbz	r0, 800822e <_dtoa_r+0x69e>
 8008228:	f018 0f01 	tst.w	r8, #1
 800822c:	d10e      	bne.n	800824c <_dtoa_r+0x6bc>
 800822e:	9902      	ldr	r1, [sp, #8]
 8008230:	4648      	mov	r0, r9
 8008232:	f000 fbbd 	bl	80089b0 <_Bfree>
 8008236:	2300      	movs	r3, #0
 8008238:	7033      	strb	r3, [r6, #0]
 800823a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800823c:	3701      	adds	r7, #1
 800823e:	601f      	str	r7, [r3, #0]
 8008240:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 824b 	beq.w	80086de <_dtoa_r+0xb4e>
 8008248:	601e      	str	r6, [r3, #0]
 800824a:	e248      	b.n	80086de <_dtoa_r+0xb4e>
 800824c:	46b8      	mov	r8, r7
 800824e:	4633      	mov	r3, r6
 8008250:	461e      	mov	r6, r3
 8008252:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008256:	2a39      	cmp	r2, #57	@ 0x39
 8008258:	d106      	bne.n	8008268 <_dtoa_r+0x6d8>
 800825a:	459a      	cmp	sl, r3
 800825c:	d1f8      	bne.n	8008250 <_dtoa_r+0x6c0>
 800825e:	2230      	movs	r2, #48	@ 0x30
 8008260:	f108 0801 	add.w	r8, r8, #1
 8008264:	f88a 2000 	strb.w	r2, [sl]
 8008268:	781a      	ldrb	r2, [r3, #0]
 800826a:	3201      	adds	r2, #1
 800826c:	701a      	strb	r2, [r3, #0]
 800826e:	e7a0      	b.n	80081b2 <_dtoa_r+0x622>
 8008270:	4b6f      	ldr	r3, [pc, #444]	@ (8008430 <_dtoa_r+0x8a0>)
 8008272:	2200      	movs	r2, #0
 8008274:	f7f8 f9e8 	bl	8000648 <__aeabi_dmul>
 8008278:	2200      	movs	r2, #0
 800827a:	2300      	movs	r3, #0
 800827c:	4604      	mov	r4, r0
 800827e:	460d      	mov	r5, r1
 8008280:	f7f8 fc4a 	bl	8000b18 <__aeabi_dcmpeq>
 8008284:	2800      	cmp	r0, #0
 8008286:	d09f      	beq.n	80081c8 <_dtoa_r+0x638>
 8008288:	e7d1      	b.n	800822e <_dtoa_r+0x69e>
 800828a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800828c:	2a00      	cmp	r2, #0
 800828e:	f000 80ea 	beq.w	8008466 <_dtoa_r+0x8d6>
 8008292:	9a07      	ldr	r2, [sp, #28]
 8008294:	2a01      	cmp	r2, #1
 8008296:	f300 80cd 	bgt.w	8008434 <_dtoa_r+0x8a4>
 800829a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800829c:	2a00      	cmp	r2, #0
 800829e:	f000 80c1 	beq.w	8008424 <_dtoa_r+0x894>
 80082a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80082a6:	9c08      	ldr	r4, [sp, #32]
 80082a8:	9e00      	ldr	r6, [sp, #0]
 80082aa:	9a00      	ldr	r2, [sp, #0]
 80082ac:	441a      	add	r2, r3
 80082ae:	9200      	str	r2, [sp, #0]
 80082b0:	9a06      	ldr	r2, [sp, #24]
 80082b2:	2101      	movs	r1, #1
 80082b4:	441a      	add	r2, r3
 80082b6:	4648      	mov	r0, r9
 80082b8:	9206      	str	r2, [sp, #24]
 80082ba:	f000 fc2d 	bl	8008b18 <__i2b>
 80082be:	4605      	mov	r5, r0
 80082c0:	b166      	cbz	r6, 80082dc <_dtoa_r+0x74c>
 80082c2:	9b06      	ldr	r3, [sp, #24]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	dd09      	ble.n	80082dc <_dtoa_r+0x74c>
 80082c8:	42b3      	cmp	r3, r6
 80082ca:	9a00      	ldr	r2, [sp, #0]
 80082cc:	bfa8      	it	ge
 80082ce:	4633      	movge	r3, r6
 80082d0:	1ad2      	subs	r2, r2, r3
 80082d2:	9200      	str	r2, [sp, #0]
 80082d4:	9a06      	ldr	r2, [sp, #24]
 80082d6:	1af6      	subs	r6, r6, r3
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	9306      	str	r3, [sp, #24]
 80082dc:	9b08      	ldr	r3, [sp, #32]
 80082de:	b30b      	cbz	r3, 8008324 <_dtoa_r+0x794>
 80082e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 80c6 	beq.w	8008474 <_dtoa_r+0x8e4>
 80082e8:	2c00      	cmp	r4, #0
 80082ea:	f000 80c0 	beq.w	800846e <_dtoa_r+0x8de>
 80082ee:	4629      	mov	r1, r5
 80082f0:	4622      	mov	r2, r4
 80082f2:	4648      	mov	r0, r9
 80082f4:	f000 fcc8 	bl	8008c88 <__pow5mult>
 80082f8:	9a02      	ldr	r2, [sp, #8]
 80082fa:	4601      	mov	r1, r0
 80082fc:	4605      	mov	r5, r0
 80082fe:	4648      	mov	r0, r9
 8008300:	f000 fc20 	bl	8008b44 <__multiply>
 8008304:	9902      	ldr	r1, [sp, #8]
 8008306:	4680      	mov	r8, r0
 8008308:	4648      	mov	r0, r9
 800830a:	f000 fb51 	bl	80089b0 <_Bfree>
 800830e:	9b08      	ldr	r3, [sp, #32]
 8008310:	1b1b      	subs	r3, r3, r4
 8008312:	9308      	str	r3, [sp, #32]
 8008314:	f000 80b1 	beq.w	800847a <_dtoa_r+0x8ea>
 8008318:	9a08      	ldr	r2, [sp, #32]
 800831a:	4641      	mov	r1, r8
 800831c:	4648      	mov	r0, r9
 800831e:	f000 fcb3 	bl	8008c88 <__pow5mult>
 8008322:	9002      	str	r0, [sp, #8]
 8008324:	2101      	movs	r1, #1
 8008326:	4648      	mov	r0, r9
 8008328:	f000 fbf6 	bl	8008b18 <__i2b>
 800832c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800832e:	4604      	mov	r4, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 81d8 	beq.w	80086e6 <_dtoa_r+0xb56>
 8008336:	461a      	mov	r2, r3
 8008338:	4601      	mov	r1, r0
 800833a:	4648      	mov	r0, r9
 800833c:	f000 fca4 	bl	8008c88 <__pow5mult>
 8008340:	9b07      	ldr	r3, [sp, #28]
 8008342:	2b01      	cmp	r3, #1
 8008344:	4604      	mov	r4, r0
 8008346:	f300 809f 	bgt.w	8008488 <_dtoa_r+0x8f8>
 800834a:	9b04      	ldr	r3, [sp, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	f040 8097 	bne.w	8008480 <_dtoa_r+0x8f0>
 8008352:	9b05      	ldr	r3, [sp, #20]
 8008354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008358:	2b00      	cmp	r3, #0
 800835a:	f040 8093 	bne.w	8008484 <_dtoa_r+0x8f4>
 800835e:	9b05      	ldr	r3, [sp, #20]
 8008360:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008364:	0d1b      	lsrs	r3, r3, #20
 8008366:	051b      	lsls	r3, r3, #20
 8008368:	b133      	cbz	r3, 8008378 <_dtoa_r+0x7e8>
 800836a:	9b00      	ldr	r3, [sp, #0]
 800836c:	3301      	adds	r3, #1
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	9b06      	ldr	r3, [sp, #24]
 8008372:	3301      	adds	r3, #1
 8008374:	9306      	str	r3, [sp, #24]
 8008376:	2301      	movs	r3, #1
 8008378:	9308      	str	r3, [sp, #32]
 800837a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 81b8 	beq.w	80086f2 <_dtoa_r+0xb62>
 8008382:	6923      	ldr	r3, [r4, #16]
 8008384:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008388:	6918      	ldr	r0, [r3, #16]
 800838a:	f000 fb79 	bl	8008a80 <__hi0bits>
 800838e:	f1c0 0020 	rsb	r0, r0, #32
 8008392:	9b06      	ldr	r3, [sp, #24]
 8008394:	4418      	add	r0, r3
 8008396:	f010 001f 	ands.w	r0, r0, #31
 800839a:	f000 8082 	beq.w	80084a2 <_dtoa_r+0x912>
 800839e:	f1c0 0320 	rsb	r3, r0, #32
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	dd73      	ble.n	800848e <_dtoa_r+0x8fe>
 80083a6:	9b00      	ldr	r3, [sp, #0]
 80083a8:	f1c0 001c 	rsb	r0, r0, #28
 80083ac:	4403      	add	r3, r0
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	9b06      	ldr	r3, [sp, #24]
 80083b2:	4403      	add	r3, r0
 80083b4:	4406      	add	r6, r0
 80083b6:	9306      	str	r3, [sp, #24]
 80083b8:	9b00      	ldr	r3, [sp, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	dd05      	ble.n	80083ca <_dtoa_r+0x83a>
 80083be:	9902      	ldr	r1, [sp, #8]
 80083c0:	461a      	mov	r2, r3
 80083c2:	4648      	mov	r0, r9
 80083c4:	f000 fcba 	bl	8008d3c <__lshift>
 80083c8:	9002      	str	r0, [sp, #8]
 80083ca:	9b06      	ldr	r3, [sp, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	dd05      	ble.n	80083dc <_dtoa_r+0x84c>
 80083d0:	4621      	mov	r1, r4
 80083d2:	461a      	mov	r2, r3
 80083d4:	4648      	mov	r0, r9
 80083d6:	f000 fcb1 	bl	8008d3c <__lshift>
 80083da:	4604      	mov	r4, r0
 80083dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d061      	beq.n	80084a6 <_dtoa_r+0x916>
 80083e2:	9802      	ldr	r0, [sp, #8]
 80083e4:	4621      	mov	r1, r4
 80083e6:	f000 fd15 	bl	8008e14 <__mcmp>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	da5b      	bge.n	80084a6 <_dtoa_r+0x916>
 80083ee:	2300      	movs	r3, #0
 80083f0:	9902      	ldr	r1, [sp, #8]
 80083f2:	220a      	movs	r2, #10
 80083f4:	4648      	mov	r0, r9
 80083f6:	f000 fafd 	bl	80089f4 <__multadd>
 80083fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083fc:	9002      	str	r0, [sp, #8]
 80083fe:	f107 38ff 	add.w	r8, r7, #4294967295
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 8177 	beq.w	80086f6 <_dtoa_r+0xb66>
 8008408:	4629      	mov	r1, r5
 800840a:	2300      	movs	r3, #0
 800840c:	220a      	movs	r2, #10
 800840e:	4648      	mov	r0, r9
 8008410:	f000 faf0 	bl	80089f4 <__multadd>
 8008414:	f1bb 0f00 	cmp.w	fp, #0
 8008418:	4605      	mov	r5, r0
 800841a:	dc6f      	bgt.n	80084fc <_dtoa_r+0x96c>
 800841c:	9b07      	ldr	r3, [sp, #28]
 800841e:	2b02      	cmp	r3, #2
 8008420:	dc49      	bgt.n	80084b6 <_dtoa_r+0x926>
 8008422:	e06b      	b.n	80084fc <_dtoa_r+0x96c>
 8008424:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008426:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800842a:	e73c      	b.n	80082a6 <_dtoa_r+0x716>
 800842c:	3fe00000 	.word	0x3fe00000
 8008430:	40240000 	.word	0x40240000
 8008434:	9b03      	ldr	r3, [sp, #12]
 8008436:	1e5c      	subs	r4, r3, #1
 8008438:	9b08      	ldr	r3, [sp, #32]
 800843a:	42a3      	cmp	r3, r4
 800843c:	db09      	blt.n	8008452 <_dtoa_r+0x8c2>
 800843e:	1b1c      	subs	r4, r3, r4
 8008440:	9b03      	ldr	r3, [sp, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	f6bf af30 	bge.w	80082a8 <_dtoa_r+0x718>
 8008448:	9b00      	ldr	r3, [sp, #0]
 800844a:	9a03      	ldr	r2, [sp, #12]
 800844c:	1a9e      	subs	r6, r3, r2
 800844e:	2300      	movs	r3, #0
 8008450:	e72b      	b.n	80082aa <_dtoa_r+0x71a>
 8008452:	9b08      	ldr	r3, [sp, #32]
 8008454:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008456:	9408      	str	r4, [sp, #32]
 8008458:	1ae3      	subs	r3, r4, r3
 800845a:	441a      	add	r2, r3
 800845c:	9e00      	ldr	r6, [sp, #0]
 800845e:	9b03      	ldr	r3, [sp, #12]
 8008460:	920d      	str	r2, [sp, #52]	@ 0x34
 8008462:	2400      	movs	r4, #0
 8008464:	e721      	b.n	80082aa <_dtoa_r+0x71a>
 8008466:	9c08      	ldr	r4, [sp, #32]
 8008468:	9e00      	ldr	r6, [sp, #0]
 800846a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800846c:	e728      	b.n	80082c0 <_dtoa_r+0x730>
 800846e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008472:	e751      	b.n	8008318 <_dtoa_r+0x788>
 8008474:	9a08      	ldr	r2, [sp, #32]
 8008476:	9902      	ldr	r1, [sp, #8]
 8008478:	e750      	b.n	800831c <_dtoa_r+0x78c>
 800847a:	f8cd 8008 	str.w	r8, [sp, #8]
 800847e:	e751      	b.n	8008324 <_dtoa_r+0x794>
 8008480:	2300      	movs	r3, #0
 8008482:	e779      	b.n	8008378 <_dtoa_r+0x7e8>
 8008484:	9b04      	ldr	r3, [sp, #16]
 8008486:	e777      	b.n	8008378 <_dtoa_r+0x7e8>
 8008488:	2300      	movs	r3, #0
 800848a:	9308      	str	r3, [sp, #32]
 800848c:	e779      	b.n	8008382 <_dtoa_r+0x7f2>
 800848e:	d093      	beq.n	80083b8 <_dtoa_r+0x828>
 8008490:	9a00      	ldr	r2, [sp, #0]
 8008492:	331c      	adds	r3, #28
 8008494:	441a      	add	r2, r3
 8008496:	9200      	str	r2, [sp, #0]
 8008498:	9a06      	ldr	r2, [sp, #24]
 800849a:	441a      	add	r2, r3
 800849c:	441e      	add	r6, r3
 800849e:	9206      	str	r2, [sp, #24]
 80084a0:	e78a      	b.n	80083b8 <_dtoa_r+0x828>
 80084a2:	4603      	mov	r3, r0
 80084a4:	e7f4      	b.n	8008490 <_dtoa_r+0x900>
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	46b8      	mov	r8, r7
 80084ac:	dc20      	bgt.n	80084f0 <_dtoa_r+0x960>
 80084ae:	469b      	mov	fp, r3
 80084b0:	9b07      	ldr	r3, [sp, #28]
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	dd1e      	ble.n	80084f4 <_dtoa_r+0x964>
 80084b6:	f1bb 0f00 	cmp.w	fp, #0
 80084ba:	f47f adb1 	bne.w	8008020 <_dtoa_r+0x490>
 80084be:	4621      	mov	r1, r4
 80084c0:	465b      	mov	r3, fp
 80084c2:	2205      	movs	r2, #5
 80084c4:	4648      	mov	r0, r9
 80084c6:	f000 fa95 	bl	80089f4 <__multadd>
 80084ca:	4601      	mov	r1, r0
 80084cc:	4604      	mov	r4, r0
 80084ce:	9802      	ldr	r0, [sp, #8]
 80084d0:	f000 fca0 	bl	8008e14 <__mcmp>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	f77f ada3 	ble.w	8008020 <_dtoa_r+0x490>
 80084da:	4656      	mov	r6, sl
 80084dc:	2331      	movs	r3, #49	@ 0x31
 80084de:	f806 3b01 	strb.w	r3, [r6], #1
 80084e2:	f108 0801 	add.w	r8, r8, #1
 80084e6:	e59f      	b.n	8008028 <_dtoa_r+0x498>
 80084e8:	9c03      	ldr	r4, [sp, #12]
 80084ea:	46b8      	mov	r8, r7
 80084ec:	4625      	mov	r5, r4
 80084ee:	e7f4      	b.n	80084da <_dtoa_r+0x94a>
 80084f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80084f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 8101 	beq.w	80086fe <_dtoa_r+0xb6e>
 80084fc:	2e00      	cmp	r6, #0
 80084fe:	dd05      	ble.n	800850c <_dtoa_r+0x97c>
 8008500:	4629      	mov	r1, r5
 8008502:	4632      	mov	r2, r6
 8008504:	4648      	mov	r0, r9
 8008506:	f000 fc19 	bl	8008d3c <__lshift>
 800850a:	4605      	mov	r5, r0
 800850c:	9b08      	ldr	r3, [sp, #32]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d05c      	beq.n	80085cc <_dtoa_r+0xa3c>
 8008512:	6869      	ldr	r1, [r5, #4]
 8008514:	4648      	mov	r0, r9
 8008516:	f000 fa0b 	bl	8008930 <_Balloc>
 800851a:	4606      	mov	r6, r0
 800851c:	b928      	cbnz	r0, 800852a <_dtoa_r+0x99a>
 800851e:	4b82      	ldr	r3, [pc, #520]	@ (8008728 <_dtoa_r+0xb98>)
 8008520:	4602      	mov	r2, r0
 8008522:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008526:	f7ff bb4a 	b.w	8007bbe <_dtoa_r+0x2e>
 800852a:	692a      	ldr	r2, [r5, #16]
 800852c:	3202      	adds	r2, #2
 800852e:	0092      	lsls	r2, r2, #2
 8008530:	f105 010c 	add.w	r1, r5, #12
 8008534:	300c      	adds	r0, #12
 8008536:	f7ff fa92 	bl	8007a5e <memcpy>
 800853a:	2201      	movs	r2, #1
 800853c:	4631      	mov	r1, r6
 800853e:	4648      	mov	r0, r9
 8008540:	f000 fbfc 	bl	8008d3c <__lshift>
 8008544:	f10a 0301 	add.w	r3, sl, #1
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	eb0a 030b 	add.w	r3, sl, fp
 800854e:	9308      	str	r3, [sp, #32]
 8008550:	9b04      	ldr	r3, [sp, #16]
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	462f      	mov	r7, r5
 8008558:	9306      	str	r3, [sp, #24]
 800855a:	4605      	mov	r5, r0
 800855c:	9b00      	ldr	r3, [sp, #0]
 800855e:	9802      	ldr	r0, [sp, #8]
 8008560:	4621      	mov	r1, r4
 8008562:	f103 3bff 	add.w	fp, r3, #4294967295
 8008566:	f7ff fa88 	bl	8007a7a <quorem>
 800856a:	4603      	mov	r3, r0
 800856c:	3330      	adds	r3, #48	@ 0x30
 800856e:	9003      	str	r0, [sp, #12]
 8008570:	4639      	mov	r1, r7
 8008572:	9802      	ldr	r0, [sp, #8]
 8008574:	9309      	str	r3, [sp, #36]	@ 0x24
 8008576:	f000 fc4d 	bl	8008e14 <__mcmp>
 800857a:	462a      	mov	r2, r5
 800857c:	9004      	str	r0, [sp, #16]
 800857e:	4621      	mov	r1, r4
 8008580:	4648      	mov	r0, r9
 8008582:	f000 fc63 	bl	8008e4c <__mdiff>
 8008586:	68c2      	ldr	r2, [r0, #12]
 8008588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800858a:	4606      	mov	r6, r0
 800858c:	bb02      	cbnz	r2, 80085d0 <_dtoa_r+0xa40>
 800858e:	4601      	mov	r1, r0
 8008590:	9802      	ldr	r0, [sp, #8]
 8008592:	f000 fc3f 	bl	8008e14 <__mcmp>
 8008596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008598:	4602      	mov	r2, r0
 800859a:	4631      	mov	r1, r6
 800859c:	4648      	mov	r0, r9
 800859e:	920c      	str	r2, [sp, #48]	@ 0x30
 80085a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80085a2:	f000 fa05 	bl	80089b0 <_Bfree>
 80085a6:	9b07      	ldr	r3, [sp, #28]
 80085a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80085aa:	9e00      	ldr	r6, [sp, #0]
 80085ac:	ea42 0103 	orr.w	r1, r2, r3
 80085b0:	9b06      	ldr	r3, [sp, #24]
 80085b2:	4319      	orrs	r1, r3
 80085b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b6:	d10d      	bne.n	80085d4 <_dtoa_r+0xa44>
 80085b8:	2b39      	cmp	r3, #57	@ 0x39
 80085ba:	d027      	beq.n	800860c <_dtoa_r+0xa7c>
 80085bc:	9a04      	ldr	r2, [sp, #16]
 80085be:	2a00      	cmp	r2, #0
 80085c0:	dd01      	ble.n	80085c6 <_dtoa_r+0xa36>
 80085c2:	9b03      	ldr	r3, [sp, #12]
 80085c4:	3331      	adds	r3, #49	@ 0x31
 80085c6:	f88b 3000 	strb.w	r3, [fp]
 80085ca:	e52e      	b.n	800802a <_dtoa_r+0x49a>
 80085cc:	4628      	mov	r0, r5
 80085ce:	e7b9      	b.n	8008544 <_dtoa_r+0x9b4>
 80085d0:	2201      	movs	r2, #1
 80085d2:	e7e2      	b.n	800859a <_dtoa_r+0xa0a>
 80085d4:	9904      	ldr	r1, [sp, #16]
 80085d6:	2900      	cmp	r1, #0
 80085d8:	db04      	blt.n	80085e4 <_dtoa_r+0xa54>
 80085da:	9807      	ldr	r0, [sp, #28]
 80085dc:	4301      	orrs	r1, r0
 80085de:	9806      	ldr	r0, [sp, #24]
 80085e0:	4301      	orrs	r1, r0
 80085e2:	d120      	bne.n	8008626 <_dtoa_r+0xa96>
 80085e4:	2a00      	cmp	r2, #0
 80085e6:	ddee      	ble.n	80085c6 <_dtoa_r+0xa36>
 80085e8:	9902      	ldr	r1, [sp, #8]
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	2201      	movs	r2, #1
 80085ee:	4648      	mov	r0, r9
 80085f0:	f000 fba4 	bl	8008d3c <__lshift>
 80085f4:	4621      	mov	r1, r4
 80085f6:	9002      	str	r0, [sp, #8]
 80085f8:	f000 fc0c 	bl	8008e14 <__mcmp>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	9b00      	ldr	r3, [sp, #0]
 8008600:	dc02      	bgt.n	8008608 <_dtoa_r+0xa78>
 8008602:	d1e0      	bne.n	80085c6 <_dtoa_r+0xa36>
 8008604:	07da      	lsls	r2, r3, #31
 8008606:	d5de      	bpl.n	80085c6 <_dtoa_r+0xa36>
 8008608:	2b39      	cmp	r3, #57	@ 0x39
 800860a:	d1da      	bne.n	80085c2 <_dtoa_r+0xa32>
 800860c:	2339      	movs	r3, #57	@ 0x39
 800860e:	f88b 3000 	strb.w	r3, [fp]
 8008612:	4633      	mov	r3, r6
 8008614:	461e      	mov	r6, r3
 8008616:	3b01      	subs	r3, #1
 8008618:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800861c:	2a39      	cmp	r2, #57	@ 0x39
 800861e:	d04e      	beq.n	80086be <_dtoa_r+0xb2e>
 8008620:	3201      	adds	r2, #1
 8008622:	701a      	strb	r2, [r3, #0]
 8008624:	e501      	b.n	800802a <_dtoa_r+0x49a>
 8008626:	2a00      	cmp	r2, #0
 8008628:	dd03      	ble.n	8008632 <_dtoa_r+0xaa2>
 800862a:	2b39      	cmp	r3, #57	@ 0x39
 800862c:	d0ee      	beq.n	800860c <_dtoa_r+0xa7c>
 800862e:	3301      	adds	r3, #1
 8008630:	e7c9      	b.n	80085c6 <_dtoa_r+0xa36>
 8008632:	9a00      	ldr	r2, [sp, #0]
 8008634:	9908      	ldr	r1, [sp, #32]
 8008636:	f802 3c01 	strb.w	r3, [r2, #-1]
 800863a:	428a      	cmp	r2, r1
 800863c:	d028      	beq.n	8008690 <_dtoa_r+0xb00>
 800863e:	9902      	ldr	r1, [sp, #8]
 8008640:	2300      	movs	r3, #0
 8008642:	220a      	movs	r2, #10
 8008644:	4648      	mov	r0, r9
 8008646:	f000 f9d5 	bl	80089f4 <__multadd>
 800864a:	42af      	cmp	r7, r5
 800864c:	9002      	str	r0, [sp, #8]
 800864e:	f04f 0300 	mov.w	r3, #0
 8008652:	f04f 020a 	mov.w	r2, #10
 8008656:	4639      	mov	r1, r7
 8008658:	4648      	mov	r0, r9
 800865a:	d107      	bne.n	800866c <_dtoa_r+0xadc>
 800865c:	f000 f9ca 	bl	80089f4 <__multadd>
 8008660:	4607      	mov	r7, r0
 8008662:	4605      	mov	r5, r0
 8008664:	9b00      	ldr	r3, [sp, #0]
 8008666:	3301      	adds	r3, #1
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	e777      	b.n	800855c <_dtoa_r+0x9cc>
 800866c:	f000 f9c2 	bl	80089f4 <__multadd>
 8008670:	4629      	mov	r1, r5
 8008672:	4607      	mov	r7, r0
 8008674:	2300      	movs	r3, #0
 8008676:	220a      	movs	r2, #10
 8008678:	4648      	mov	r0, r9
 800867a:	f000 f9bb 	bl	80089f4 <__multadd>
 800867e:	4605      	mov	r5, r0
 8008680:	e7f0      	b.n	8008664 <_dtoa_r+0xad4>
 8008682:	f1bb 0f00 	cmp.w	fp, #0
 8008686:	bfcc      	ite	gt
 8008688:	465e      	movgt	r6, fp
 800868a:	2601      	movle	r6, #1
 800868c:	4456      	add	r6, sl
 800868e:	2700      	movs	r7, #0
 8008690:	9902      	ldr	r1, [sp, #8]
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	2201      	movs	r2, #1
 8008696:	4648      	mov	r0, r9
 8008698:	f000 fb50 	bl	8008d3c <__lshift>
 800869c:	4621      	mov	r1, r4
 800869e:	9002      	str	r0, [sp, #8]
 80086a0:	f000 fbb8 	bl	8008e14 <__mcmp>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	dcb4      	bgt.n	8008612 <_dtoa_r+0xa82>
 80086a8:	d102      	bne.n	80086b0 <_dtoa_r+0xb20>
 80086aa:	9b00      	ldr	r3, [sp, #0]
 80086ac:	07db      	lsls	r3, r3, #31
 80086ae:	d4b0      	bmi.n	8008612 <_dtoa_r+0xa82>
 80086b0:	4633      	mov	r3, r6
 80086b2:	461e      	mov	r6, r3
 80086b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086b8:	2a30      	cmp	r2, #48	@ 0x30
 80086ba:	d0fa      	beq.n	80086b2 <_dtoa_r+0xb22>
 80086bc:	e4b5      	b.n	800802a <_dtoa_r+0x49a>
 80086be:	459a      	cmp	sl, r3
 80086c0:	d1a8      	bne.n	8008614 <_dtoa_r+0xa84>
 80086c2:	2331      	movs	r3, #49	@ 0x31
 80086c4:	f108 0801 	add.w	r8, r8, #1
 80086c8:	f88a 3000 	strb.w	r3, [sl]
 80086cc:	e4ad      	b.n	800802a <_dtoa_r+0x49a>
 80086ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800872c <_dtoa_r+0xb9c>
 80086d4:	b11b      	cbz	r3, 80086de <_dtoa_r+0xb4e>
 80086d6:	f10a 0308 	add.w	r3, sl, #8
 80086da:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80086dc:	6013      	str	r3, [r2, #0]
 80086de:	4650      	mov	r0, sl
 80086e0:	b017      	add	sp, #92	@ 0x5c
 80086e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e6:	9b07      	ldr	r3, [sp, #28]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	f77f ae2e 	ble.w	800834a <_dtoa_r+0x7ba>
 80086ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086f0:	9308      	str	r3, [sp, #32]
 80086f2:	2001      	movs	r0, #1
 80086f4:	e64d      	b.n	8008392 <_dtoa_r+0x802>
 80086f6:	f1bb 0f00 	cmp.w	fp, #0
 80086fa:	f77f aed9 	ble.w	80084b0 <_dtoa_r+0x920>
 80086fe:	4656      	mov	r6, sl
 8008700:	9802      	ldr	r0, [sp, #8]
 8008702:	4621      	mov	r1, r4
 8008704:	f7ff f9b9 	bl	8007a7a <quorem>
 8008708:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800870c:	f806 3b01 	strb.w	r3, [r6], #1
 8008710:	eba6 020a 	sub.w	r2, r6, sl
 8008714:	4593      	cmp	fp, r2
 8008716:	ddb4      	ble.n	8008682 <_dtoa_r+0xaf2>
 8008718:	9902      	ldr	r1, [sp, #8]
 800871a:	2300      	movs	r3, #0
 800871c:	220a      	movs	r2, #10
 800871e:	4648      	mov	r0, r9
 8008720:	f000 f968 	bl	80089f4 <__multadd>
 8008724:	9002      	str	r0, [sp, #8]
 8008726:	e7eb      	b.n	8008700 <_dtoa_r+0xb70>
 8008728:	0800a98c 	.word	0x0800a98c
 800872c:	0800a910 	.word	0x0800a910

08008730 <_free_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4605      	mov	r5, r0
 8008734:	2900      	cmp	r1, #0
 8008736:	d041      	beq.n	80087bc <_free_r+0x8c>
 8008738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800873c:	1f0c      	subs	r4, r1, #4
 800873e:	2b00      	cmp	r3, #0
 8008740:	bfb8      	it	lt
 8008742:	18e4      	addlt	r4, r4, r3
 8008744:	f000 f8e8 	bl	8008918 <__malloc_lock>
 8008748:	4a1d      	ldr	r2, [pc, #116]	@ (80087c0 <_free_r+0x90>)
 800874a:	6813      	ldr	r3, [r2, #0]
 800874c:	b933      	cbnz	r3, 800875c <_free_r+0x2c>
 800874e:	6063      	str	r3, [r4, #4]
 8008750:	6014      	str	r4, [r2, #0]
 8008752:	4628      	mov	r0, r5
 8008754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008758:	f000 b8e4 	b.w	8008924 <__malloc_unlock>
 800875c:	42a3      	cmp	r3, r4
 800875e:	d908      	bls.n	8008772 <_free_r+0x42>
 8008760:	6820      	ldr	r0, [r4, #0]
 8008762:	1821      	adds	r1, r4, r0
 8008764:	428b      	cmp	r3, r1
 8008766:	bf01      	itttt	eq
 8008768:	6819      	ldreq	r1, [r3, #0]
 800876a:	685b      	ldreq	r3, [r3, #4]
 800876c:	1809      	addeq	r1, r1, r0
 800876e:	6021      	streq	r1, [r4, #0]
 8008770:	e7ed      	b.n	800874e <_free_r+0x1e>
 8008772:	461a      	mov	r2, r3
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	b10b      	cbz	r3, 800877c <_free_r+0x4c>
 8008778:	42a3      	cmp	r3, r4
 800877a:	d9fa      	bls.n	8008772 <_free_r+0x42>
 800877c:	6811      	ldr	r1, [r2, #0]
 800877e:	1850      	adds	r0, r2, r1
 8008780:	42a0      	cmp	r0, r4
 8008782:	d10b      	bne.n	800879c <_free_r+0x6c>
 8008784:	6820      	ldr	r0, [r4, #0]
 8008786:	4401      	add	r1, r0
 8008788:	1850      	adds	r0, r2, r1
 800878a:	4283      	cmp	r3, r0
 800878c:	6011      	str	r1, [r2, #0]
 800878e:	d1e0      	bne.n	8008752 <_free_r+0x22>
 8008790:	6818      	ldr	r0, [r3, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	6053      	str	r3, [r2, #4]
 8008796:	4408      	add	r0, r1
 8008798:	6010      	str	r0, [r2, #0]
 800879a:	e7da      	b.n	8008752 <_free_r+0x22>
 800879c:	d902      	bls.n	80087a4 <_free_r+0x74>
 800879e:	230c      	movs	r3, #12
 80087a0:	602b      	str	r3, [r5, #0]
 80087a2:	e7d6      	b.n	8008752 <_free_r+0x22>
 80087a4:	6820      	ldr	r0, [r4, #0]
 80087a6:	1821      	adds	r1, r4, r0
 80087a8:	428b      	cmp	r3, r1
 80087aa:	bf04      	itt	eq
 80087ac:	6819      	ldreq	r1, [r3, #0]
 80087ae:	685b      	ldreq	r3, [r3, #4]
 80087b0:	6063      	str	r3, [r4, #4]
 80087b2:	bf04      	itt	eq
 80087b4:	1809      	addeq	r1, r1, r0
 80087b6:	6021      	streq	r1, [r4, #0]
 80087b8:	6054      	str	r4, [r2, #4]
 80087ba:	e7ca      	b.n	8008752 <_free_r+0x22>
 80087bc:	bd38      	pop	{r3, r4, r5, pc}
 80087be:	bf00      	nop
 80087c0:	20000a18 	.word	0x20000a18

080087c4 <malloc>:
 80087c4:	4b02      	ldr	r3, [pc, #8]	@ (80087d0 <malloc+0xc>)
 80087c6:	4601      	mov	r1, r0
 80087c8:	6818      	ldr	r0, [r3, #0]
 80087ca:	f000 b825 	b.w	8008818 <_malloc_r>
 80087ce:	bf00      	nop
 80087d0:	2000002c 	.word	0x2000002c

080087d4 <sbrk_aligned>:
 80087d4:	b570      	push	{r4, r5, r6, lr}
 80087d6:	4e0f      	ldr	r6, [pc, #60]	@ (8008814 <sbrk_aligned+0x40>)
 80087d8:	460c      	mov	r4, r1
 80087da:	6831      	ldr	r1, [r6, #0]
 80087dc:	4605      	mov	r5, r0
 80087de:	b911      	cbnz	r1, 80087e6 <sbrk_aligned+0x12>
 80087e0:	f000 fe24 	bl	800942c <_sbrk_r>
 80087e4:	6030      	str	r0, [r6, #0]
 80087e6:	4621      	mov	r1, r4
 80087e8:	4628      	mov	r0, r5
 80087ea:	f000 fe1f 	bl	800942c <_sbrk_r>
 80087ee:	1c43      	adds	r3, r0, #1
 80087f0:	d103      	bne.n	80087fa <sbrk_aligned+0x26>
 80087f2:	f04f 34ff 	mov.w	r4, #4294967295
 80087f6:	4620      	mov	r0, r4
 80087f8:	bd70      	pop	{r4, r5, r6, pc}
 80087fa:	1cc4      	adds	r4, r0, #3
 80087fc:	f024 0403 	bic.w	r4, r4, #3
 8008800:	42a0      	cmp	r0, r4
 8008802:	d0f8      	beq.n	80087f6 <sbrk_aligned+0x22>
 8008804:	1a21      	subs	r1, r4, r0
 8008806:	4628      	mov	r0, r5
 8008808:	f000 fe10 	bl	800942c <_sbrk_r>
 800880c:	3001      	adds	r0, #1
 800880e:	d1f2      	bne.n	80087f6 <sbrk_aligned+0x22>
 8008810:	e7ef      	b.n	80087f2 <sbrk_aligned+0x1e>
 8008812:	bf00      	nop
 8008814:	20000a14 	.word	0x20000a14

08008818 <_malloc_r>:
 8008818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800881c:	1ccd      	adds	r5, r1, #3
 800881e:	f025 0503 	bic.w	r5, r5, #3
 8008822:	3508      	adds	r5, #8
 8008824:	2d0c      	cmp	r5, #12
 8008826:	bf38      	it	cc
 8008828:	250c      	movcc	r5, #12
 800882a:	2d00      	cmp	r5, #0
 800882c:	4606      	mov	r6, r0
 800882e:	db01      	blt.n	8008834 <_malloc_r+0x1c>
 8008830:	42a9      	cmp	r1, r5
 8008832:	d904      	bls.n	800883e <_malloc_r+0x26>
 8008834:	230c      	movs	r3, #12
 8008836:	6033      	str	r3, [r6, #0]
 8008838:	2000      	movs	r0, #0
 800883a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800883e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008914 <_malloc_r+0xfc>
 8008842:	f000 f869 	bl	8008918 <__malloc_lock>
 8008846:	f8d8 3000 	ldr.w	r3, [r8]
 800884a:	461c      	mov	r4, r3
 800884c:	bb44      	cbnz	r4, 80088a0 <_malloc_r+0x88>
 800884e:	4629      	mov	r1, r5
 8008850:	4630      	mov	r0, r6
 8008852:	f7ff ffbf 	bl	80087d4 <sbrk_aligned>
 8008856:	1c43      	adds	r3, r0, #1
 8008858:	4604      	mov	r4, r0
 800885a:	d158      	bne.n	800890e <_malloc_r+0xf6>
 800885c:	f8d8 4000 	ldr.w	r4, [r8]
 8008860:	4627      	mov	r7, r4
 8008862:	2f00      	cmp	r7, #0
 8008864:	d143      	bne.n	80088ee <_malloc_r+0xd6>
 8008866:	2c00      	cmp	r4, #0
 8008868:	d04b      	beq.n	8008902 <_malloc_r+0xea>
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	4639      	mov	r1, r7
 800886e:	4630      	mov	r0, r6
 8008870:	eb04 0903 	add.w	r9, r4, r3
 8008874:	f000 fdda 	bl	800942c <_sbrk_r>
 8008878:	4581      	cmp	r9, r0
 800887a:	d142      	bne.n	8008902 <_malloc_r+0xea>
 800887c:	6821      	ldr	r1, [r4, #0]
 800887e:	1a6d      	subs	r5, r5, r1
 8008880:	4629      	mov	r1, r5
 8008882:	4630      	mov	r0, r6
 8008884:	f7ff ffa6 	bl	80087d4 <sbrk_aligned>
 8008888:	3001      	adds	r0, #1
 800888a:	d03a      	beq.n	8008902 <_malloc_r+0xea>
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	442b      	add	r3, r5
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	f8d8 3000 	ldr.w	r3, [r8]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	bb62      	cbnz	r2, 80088f4 <_malloc_r+0xdc>
 800889a:	f8c8 7000 	str.w	r7, [r8]
 800889e:	e00f      	b.n	80088c0 <_malloc_r+0xa8>
 80088a0:	6822      	ldr	r2, [r4, #0]
 80088a2:	1b52      	subs	r2, r2, r5
 80088a4:	d420      	bmi.n	80088e8 <_malloc_r+0xd0>
 80088a6:	2a0b      	cmp	r2, #11
 80088a8:	d917      	bls.n	80088da <_malloc_r+0xc2>
 80088aa:	1961      	adds	r1, r4, r5
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	6025      	str	r5, [r4, #0]
 80088b0:	bf18      	it	ne
 80088b2:	6059      	strne	r1, [r3, #4]
 80088b4:	6863      	ldr	r3, [r4, #4]
 80088b6:	bf08      	it	eq
 80088b8:	f8c8 1000 	streq.w	r1, [r8]
 80088bc:	5162      	str	r2, [r4, r5]
 80088be:	604b      	str	r3, [r1, #4]
 80088c0:	4630      	mov	r0, r6
 80088c2:	f000 f82f 	bl	8008924 <__malloc_unlock>
 80088c6:	f104 000b 	add.w	r0, r4, #11
 80088ca:	1d23      	adds	r3, r4, #4
 80088cc:	f020 0007 	bic.w	r0, r0, #7
 80088d0:	1ac2      	subs	r2, r0, r3
 80088d2:	bf1c      	itt	ne
 80088d4:	1a1b      	subne	r3, r3, r0
 80088d6:	50a3      	strne	r3, [r4, r2]
 80088d8:	e7af      	b.n	800883a <_malloc_r+0x22>
 80088da:	6862      	ldr	r2, [r4, #4]
 80088dc:	42a3      	cmp	r3, r4
 80088de:	bf0c      	ite	eq
 80088e0:	f8c8 2000 	streq.w	r2, [r8]
 80088e4:	605a      	strne	r2, [r3, #4]
 80088e6:	e7eb      	b.n	80088c0 <_malloc_r+0xa8>
 80088e8:	4623      	mov	r3, r4
 80088ea:	6864      	ldr	r4, [r4, #4]
 80088ec:	e7ae      	b.n	800884c <_malloc_r+0x34>
 80088ee:	463c      	mov	r4, r7
 80088f0:	687f      	ldr	r7, [r7, #4]
 80088f2:	e7b6      	b.n	8008862 <_malloc_r+0x4a>
 80088f4:	461a      	mov	r2, r3
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	42a3      	cmp	r3, r4
 80088fa:	d1fb      	bne.n	80088f4 <_malloc_r+0xdc>
 80088fc:	2300      	movs	r3, #0
 80088fe:	6053      	str	r3, [r2, #4]
 8008900:	e7de      	b.n	80088c0 <_malloc_r+0xa8>
 8008902:	230c      	movs	r3, #12
 8008904:	6033      	str	r3, [r6, #0]
 8008906:	4630      	mov	r0, r6
 8008908:	f000 f80c 	bl	8008924 <__malloc_unlock>
 800890c:	e794      	b.n	8008838 <_malloc_r+0x20>
 800890e:	6005      	str	r5, [r0, #0]
 8008910:	e7d6      	b.n	80088c0 <_malloc_r+0xa8>
 8008912:	bf00      	nop
 8008914:	20000a18 	.word	0x20000a18

08008918 <__malloc_lock>:
 8008918:	4801      	ldr	r0, [pc, #4]	@ (8008920 <__malloc_lock+0x8>)
 800891a:	f7ff b89e 	b.w	8007a5a <__retarget_lock_acquire_recursive>
 800891e:	bf00      	nop
 8008920:	20000a10 	.word	0x20000a10

08008924 <__malloc_unlock>:
 8008924:	4801      	ldr	r0, [pc, #4]	@ (800892c <__malloc_unlock+0x8>)
 8008926:	f7ff b899 	b.w	8007a5c <__retarget_lock_release_recursive>
 800892a:	bf00      	nop
 800892c:	20000a10 	.word	0x20000a10

08008930 <_Balloc>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	69c6      	ldr	r6, [r0, #28]
 8008934:	4604      	mov	r4, r0
 8008936:	460d      	mov	r5, r1
 8008938:	b976      	cbnz	r6, 8008958 <_Balloc+0x28>
 800893a:	2010      	movs	r0, #16
 800893c:	f7ff ff42 	bl	80087c4 <malloc>
 8008940:	4602      	mov	r2, r0
 8008942:	61e0      	str	r0, [r4, #28]
 8008944:	b920      	cbnz	r0, 8008950 <_Balloc+0x20>
 8008946:	4b18      	ldr	r3, [pc, #96]	@ (80089a8 <_Balloc+0x78>)
 8008948:	4818      	ldr	r0, [pc, #96]	@ (80089ac <_Balloc+0x7c>)
 800894a:	216b      	movs	r1, #107	@ 0x6b
 800894c:	f000 fd7e 	bl	800944c <__assert_func>
 8008950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008954:	6006      	str	r6, [r0, #0]
 8008956:	60c6      	str	r6, [r0, #12]
 8008958:	69e6      	ldr	r6, [r4, #28]
 800895a:	68f3      	ldr	r3, [r6, #12]
 800895c:	b183      	cbz	r3, 8008980 <_Balloc+0x50>
 800895e:	69e3      	ldr	r3, [r4, #28]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008966:	b9b8      	cbnz	r0, 8008998 <_Balloc+0x68>
 8008968:	2101      	movs	r1, #1
 800896a:	fa01 f605 	lsl.w	r6, r1, r5
 800896e:	1d72      	adds	r2, r6, #5
 8008970:	0092      	lsls	r2, r2, #2
 8008972:	4620      	mov	r0, r4
 8008974:	f000 fd88 	bl	8009488 <_calloc_r>
 8008978:	b160      	cbz	r0, 8008994 <_Balloc+0x64>
 800897a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800897e:	e00e      	b.n	800899e <_Balloc+0x6e>
 8008980:	2221      	movs	r2, #33	@ 0x21
 8008982:	2104      	movs	r1, #4
 8008984:	4620      	mov	r0, r4
 8008986:	f000 fd7f 	bl	8009488 <_calloc_r>
 800898a:	69e3      	ldr	r3, [r4, #28]
 800898c:	60f0      	str	r0, [r6, #12]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1e4      	bne.n	800895e <_Balloc+0x2e>
 8008994:	2000      	movs	r0, #0
 8008996:	bd70      	pop	{r4, r5, r6, pc}
 8008998:	6802      	ldr	r2, [r0, #0]
 800899a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800899e:	2300      	movs	r3, #0
 80089a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089a4:	e7f7      	b.n	8008996 <_Balloc+0x66>
 80089a6:	bf00      	nop
 80089a8:	0800a91d 	.word	0x0800a91d
 80089ac:	0800a99d 	.word	0x0800a99d

080089b0 <_Bfree>:
 80089b0:	b570      	push	{r4, r5, r6, lr}
 80089b2:	69c6      	ldr	r6, [r0, #28]
 80089b4:	4605      	mov	r5, r0
 80089b6:	460c      	mov	r4, r1
 80089b8:	b976      	cbnz	r6, 80089d8 <_Bfree+0x28>
 80089ba:	2010      	movs	r0, #16
 80089bc:	f7ff ff02 	bl	80087c4 <malloc>
 80089c0:	4602      	mov	r2, r0
 80089c2:	61e8      	str	r0, [r5, #28]
 80089c4:	b920      	cbnz	r0, 80089d0 <_Bfree+0x20>
 80089c6:	4b09      	ldr	r3, [pc, #36]	@ (80089ec <_Bfree+0x3c>)
 80089c8:	4809      	ldr	r0, [pc, #36]	@ (80089f0 <_Bfree+0x40>)
 80089ca:	218f      	movs	r1, #143	@ 0x8f
 80089cc:	f000 fd3e 	bl	800944c <__assert_func>
 80089d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089d4:	6006      	str	r6, [r0, #0]
 80089d6:	60c6      	str	r6, [r0, #12]
 80089d8:	b13c      	cbz	r4, 80089ea <_Bfree+0x3a>
 80089da:	69eb      	ldr	r3, [r5, #28]
 80089dc:	6862      	ldr	r2, [r4, #4]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089e4:	6021      	str	r1, [r4, #0]
 80089e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089ea:	bd70      	pop	{r4, r5, r6, pc}
 80089ec:	0800a91d 	.word	0x0800a91d
 80089f0:	0800a99d 	.word	0x0800a99d

080089f4 <__multadd>:
 80089f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f8:	690d      	ldr	r5, [r1, #16]
 80089fa:	4607      	mov	r7, r0
 80089fc:	460c      	mov	r4, r1
 80089fe:	461e      	mov	r6, r3
 8008a00:	f101 0c14 	add.w	ip, r1, #20
 8008a04:	2000      	movs	r0, #0
 8008a06:	f8dc 3000 	ldr.w	r3, [ip]
 8008a0a:	b299      	uxth	r1, r3
 8008a0c:	fb02 6101 	mla	r1, r2, r1, r6
 8008a10:	0c1e      	lsrs	r6, r3, #16
 8008a12:	0c0b      	lsrs	r3, r1, #16
 8008a14:	fb02 3306 	mla	r3, r2, r6, r3
 8008a18:	b289      	uxth	r1, r1
 8008a1a:	3001      	adds	r0, #1
 8008a1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a20:	4285      	cmp	r5, r0
 8008a22:	f84c 1b04 	str.w	r1, [ip], #4
 8008a26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a2a:	dcec      	bgt.n	8008a06 <__multadd+0x12>
 8008a2c:	b30e      	cbz	r6, 8008a72 <__multadd+0x7e>
 8008a2e:	68a3      	ldr	r3, [r4, #8]
 8008a30:	42ab      	cmp	r3, r5
 8008a32:	dc19      	bgt.n	8008a68 <__multadd+0x74>
 8008a34:	6861      	ldr	r1, [r4, #4]
 8008a36:	4638      	mov	r0, r7
 8008a38:	3101      	adds	r1, #1
 8008a3a:	f7ff ff79 	bl	8008930 <_Balloc>
 8008a3e:	4680      	mov	r8, r0
 8008a40:	b928      	cbnz	r0, 8008a4e <__multadd+0x5a>
 8008a42:	4602      	mov	r2, r0
 8008a44:	4b0c      	ldr	r3, [pc, #48]	@ (8008a78 <__multadd+0x84>)
 8008a46:	480d      	ldr	r0, [pc, #52]	@ (8008a7c <__multadd+0x88>)
 8008a48:	21ba      	movs	r1, #186	@ 0xba
 8008a4a:	f000 fcff 	bl	800944c <__assert_func>
 8008a4e:	6922      	ldr	r2, [r4, #16]
 8008a50:	3202      	adds	r2, #2
 8008a52:	f104 010c 	add.w	r1, r4, #12
 8008a56:	0092      	lsls	r2, r2, #2
 8008a58:	300c      	adds	r0, #12
 8008a5a:	f7ff f800 	bl	8007a5e <memcpy>
 8008a5e:	4621      	mov	r1, r4
 8008a60:	4638      	mov	r0, r7
 8008a62:	f7ff ffa5 	bl	80089b0 <_Bfree>
 8008a66:	4644      	mov	r4, r8
 8008a68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a6c:	3501      	adds	r5, #1
 8008a6e:	615e      	str	r6, [r3, #20]
 8008a70:	6125      	str	r5, [r4, #16]
 8008a72:	4620      	mov	r0, r4
 8008a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a78:	0800a98c 	.word	0x0800a98c
 8008a7c:	0800a99d 	.word	0x0800a99d

08008a80 <__hi0bits>:
 8008a80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a84:	4603      	mov	r3, r0
 8008a86:	bf36      	itet	cc
 8008a88:	0403      	lslcc	r3, r0, #16
 8008a8a:	2000      	movcs	r0, #0
 8008a8c:	2010      	movcc	r0, #16
 8008a8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a92:	bf3c      	itt	cc
 8008a94:	021b      	lslcc	r3, r3, #8
 8008a96:	3008      	addcc	r0, #8
 8008a98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a9c:	bf3c      	itt	cc
 8008a9e:	011b      	lslcc	r3, r3, #4
 8008aa0:	3004      	addcc	r0, #4
 8008aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aa6:	bf3c      	itt	cc
 8008aa8:	009b      	lslcc	r3, r3, #2
 8008aaa:	3002      	addcc	r0, #2
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	db05      	blt.n	8008abc <__hi0bits+0x3c>
 8008ab0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008ab4:	f100 0001 	add.w	r0, r0, #1
 8008ab8:	bf08      	it	eq
 8008aba:	2020      	moveq	r0, #32
 8008abc:	4770      	bx	lr

08008abe <__lo0bits>:
 8008abe:	6803      	ldr	r3, [r0, #0]
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	f013 0007 	ands.w	r0, r3, #7
 8008ac6:	d00b      	beq.n	8008ae0 <__lo0bits+0x22>
 8008ac8:	07d9      	lsls	r1, r3, #31
 8008aca:	d421      	bmi.n	8008b10 <__lo0bits+0x52>
 8008acc:	0798      	lsls	r0, r3, #30
 8008ace:	bf49      	itett	mi
 8008ad0:	085b      	lsrmi	r3, r3, #1
 8008ad2:	089b      	lsrpl	r3, r3, #2
 8008ad4:	2001      	movmi	r0, #1
 8008ad6:	6013      	strmi	r3, [r2, #0]
 8008ad8:	bf5c      	itt	pl
 8008ada:	6013      	strpl	r3, [r2, #0]
 8008adc:	2002      	movpl	r0, #2
 8008ade:	4770      	bx	lr
 8008ae0:	b299      	uxth	r1, r3
 8008ae2:	b909      	cbnz	r1, 8008ae8 <__lo0bits+0x2a>
 8008ae4:	0c1b      	lsrs	r3, r3, #16
 8008ae6:	2010      	movs	r0, #16
 8008ae8:	b2d9      	uxtb	r1, r3
 8008aea:	b909      	cbnz	r1, 8008af0 <__lo0bits+0x32>
 8008aec:	3008      	adds	r0, #8
 8008aee:	0a1b      	lsrs	r3, r3, #8
 8008af0:	0719      	lsls	r1, r3, #28
 8008af2:	bf04      	itt	eq
 8008af4:	091b      	lsreq	r3, r3, #4
 8008af6:	3004      	addeq	r0, #4
 8008af8:	0799      	lsls	r1, r3, #30
 8008afa:	bf04      	itt	eq
 8008afc:	089b      	lsreq	r3, r3, #2
 8008afe:	3002      	addeq	r0, #2
 8008b00:	07d9      	lsls	r1, r3, #31
 8008b02:	d403      	bmi.n	8008b0c <__lo0bits+0x4e>
 8008b04:	085b      	lsrs	r3, r3, #1
 8008b06:	f100 0001 	add.w	r0, r0, #1
 8008b0a:	d003      	beq.n	8008b14 <__lo0bits+0x56>
 8008b0c:	6013      	str	r3, [r2, #0]
 8008b0e:	4770      	bx	lr
 8008b10:	2000      	movs	r0, #0
 8008b12:	4770      	bx	lr
 8008b14:	2020      	movs	r0, #32
 8008b16:	4770      	bx	lr

08008b18 <__i2b>:
 8008b18:	b510      	push	{r4, lr}
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	f7ff ff07 	bl	8008930 <_Balloc>
 8008b22:	4602      	mov	r2, r0
 8008b24:	b928      	cbnz	r0, 8008b32 <__i2b+0x1a>
 8008b26:	4b05      	ldr	r3, [pc, #20]	@ (8008b3c <__i2b+0x24>)
 8008b28:	4805      	ldr	r0, [pc, #20]	@ (8008b40 <__i2b+0x28>)
 8008b2a:	f240 1145 	movw	r1, #325	@ 0x145
 8008b2e:	f000 fc8d 	bl	800944c <__assert_func>
 8008b32:	2301      	movs	r3, #1
 8008b34:	6144      	str	r4, [r0, #20]
 8008b36:	6103      	str	r3, [r0, #16]
 8008b38:	bd10      	pop	{r4, pc}
 8008b3a:	bf00      	nop
 8008b3c:	0800a98c 	.word	0x0800a98c
 8008b40:	0800a99d 	.word	0x0800a99d

08008b44 <__multiply>:
 8008b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b48:	4617      	mov	r7, r2
 8008b4a:	690a      	ldr	r2, [r1, #16]
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	bfa8      	it	ge
 8008b52:	463b      	movge	r3, r7
 8008b54:	4689      	mov	r9, r1
 8008b56:	bfa4      	itt	ge
 8008b58:	460f      	movge	r7, r1
 8008b5a:	4699      	movge	r9, r3
 8008b5c:	693d      	ldr	r5, [r7, #16]
 8008b5e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	6879      	ldr	r1, [r7, #4]
 8008b66:	eb05 060a 	add.w	r6, r5, sl
 8008b6a:	42b3      	cmp	r3, r6
 8008b6c:	b085      	sub	sp, #20
 8008b6e:	bfb8      	it	lt
 8008b70:	3101      	addlt	r1, #1
 8008b72:	f7ff fedd 	bl	8008930 <_Balloc>
 8008b76:	b930      	cbnz	r0, 8008b86 <__multiply+0x42>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	4b41      	ldr	r3, [pc, #260]	@ (8008c80 <__multiply+0x13c>)
 8008b7c:	4841      	ldr	r0, [pc, #260]	@ (8008c84 <__multiply+0x140>)
 8008b7e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008b82:	f000 fc63 	bl	800944c <__assert_func>
 8008b86:	f100 0414 	add.w	r4, r0, #20
 8008b8a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008b8e:	4623      	mov	r3, r4
 8008b90:	2200      	movs	r2, #0
 8008b92:	4573      	cmp	r3, lr
 8008b94:	d320      	bcc.n	8008bd8 <__multiply+0x94>
 8008b96:	f107 0814 	add.w	r8, r7, #20
 8008b9a:	f109 0114 	add.w	r1, r9, #20
 8008b9e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008ba2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008ba6:	9302      	str	r3, [sp, #8]
 8008ba8:	1beb      	subs	r3, r5, r7
 8008baa:	3b15      	subs	r3, #21
 8008bac:	f023 0303 	bic.w	r3, r3, #3
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	3715      	adds	r7, #21
 8008bb4:	42bd      	cmp	r5, r7
 8008bb6:	bf38      	it	cc
 8008bb8:	2304      	movcc	r3, #4
 8008bba:	9301      	str	r3, [sp, #4]
 8008bbc:	9b02      	ldr	r3, [sp, #8]
 8008bbe:	9103      	str	r1, [sp, #12]
 8008bc0:	428b      	cmp	r3, r1
 8008bc2:	d80c      	bhi.n	8008bde <__multiply+0x9a>
 8008bc4:	2e00      	cmp	r6, #0
 8008bc6:	dd03      	ble.n	8008bd0 <__multiply+0x8c>
 8008bc8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d055      	beq.n	8008c7c <__multiply+0x138>
 8008bd0:	6106      	str	r6, [r0, #16]
 8008bd2:	b005      	add	sp, #20
 8008bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd8:	f843 2b04 	str.w	r2, [r3], #4
 8008bdc:	e7d9      	b.n	8008b92 <__multiply+0x4e>
 8008bde:	f8b1 a000 	ldrh.w	sl, [r1]
 8008be2:	f1ba 0f00 	cmp.w	sl, #0
 8008be6:	d01f      	beq.n	8008c28 <__multiply+0xe4>
 8008be8:	46c4      	mov	ip, r8
 8008bea:	46a1      	mov	r9, r4
 8008bec:	2700      	movs	r7, #0
 8008bee:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008bf2:	f8d9 3000 	ldr.w	r3, [r9]
 8008bf6:	fa1f fb82 	uxth.w	fp, r2
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	fb0a 330b 	mla	r3, sl, fp, r3
 8008c00:	443b      	add	r3, r7
 8008c02:	f8d9 7000 	ldr.w	r7, [r9]
 8008c06:	0c12      	lsrs	r2, r2, #16
 8008c08:	0c3f      	lsrs	r7, r7, #16
 8008c0a:	fb0a 7202 	mla	r2, sl, r2, r7
 8008c0e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c18:	4565      	cmp	r5, ip
 8008c1a:	f849 3b04 	str.w	r3, [r9], #4
 8008c1e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008c22:	d8e4      	bhi.n	8008bee <__multiply+0xaa>
 8008c24:	9b01      	ldr	r3, [sp, #4]
 8008c26:	50e7      	str	r7, [r4, r3]
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008c2e:	3104      	adds	r1, #4
 8008c30:	f1b9 0f00 	cmp.w	r9, #0
 8008c34:	d020      	beq.n	8008c78 <__multiply+0x134>
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	4647      	mov	r7, r8
 8008c3a:	46a4      	mov	ip, r4
 8008c3c:	f04f 0a00 	mov.w	sl, #0
 8008c40:	f8b7 b000 	ldrh.w	fp, [r7]
 8008c44:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008c48:	fb09 220b 	mla	r2, r9, fp, r2
 8008c4c:	4452      	add	r2, sl
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c54:	f84c 3b04 	str.w	r3, [ip], #4
 8008c58:	f857 3b04 	ldr.w	r3, [r7], #4
 8008c5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c60:	f8bc 3000 	ldrh.w	r3, [ip]
 8008c64:	fb09 330a 	mla	r3, r9, sl, r3
 8008c68:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008c6c:	42bd      	cmp	r5, r7
 8008c6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c72:	d8e5      	bhi.n	8008c40 <__multiply+0xfc>
 8008c74:	9a01      	ldr	r2, [sp, #4]
 8008c76:	50a3      	str	r3, [r4, r2]
 8008c78:	3404      	adds	r4, #4
 8008c7a:	e79f      	b.n	8008bbc <__multiply+0x78>
 8008c7c:	3e01      	subs	r6, #1
 8008c7e:	e7a1      	b.n	8008bc4 <__multiply+0x80>
 8008c80:	0800a98c 	.word	0x0800a98c
 8008c84:	0800a99d 	.word	0x0800a99d

08008c88 <__pow5mult>:
 8008c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c8c:	4615      	mov	r5, r2
 8008c8e:	f012 0203 	ands.w	r2, r2, #3
 8008c92:	4607      	mov	r7, r0
 8008c94:	460e      	mov	r6, r1
 8008c96:	d007      	beq.n	8008ca8 <__pow5mult+0x20>
 8008c98:	4c25      	ldr	r4, [pc, #148]	@ (8008d30 <__pow5mult+0xa8>)
 8008c9a:	3a01      	subs	r2, #1
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ca2:	f7ff fea7 	bl	80089f4 <__multadd>
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	10ad      	asrs	r5, r5, #2
 8008caa:	d03d      	beq.n	8008d28 <__pow5mult+0xa0>
 8008cac:	69fc      	ldr	r4, [r7, #28]
 8008cae:	b97c      	cbnz	r4, 8008cd0 <__pow5mult+0x48>
 8008cb0:	2010      	movs	r0, #16
 8008cb2:	f7ff fd87 	bl	80087c4 <malloc>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	61f8      	str	r0, [r7, #28]
 8008cba:	b928      	cbnz	r0, 8008cc8 <__pow5mult+0x40>
 8008cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8008d34 <__pow5mult+0xac>)
 8008cbe:	481e      	ldr	r0, [pc, #120]	@ (8008d38 <__pow5mult+0xb0>)
 8008cc0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008cc4:	f000 fbc2 	bl	800944c <__assert_func>
 8008cc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ccc:	6004      	str	r4, [r0, #0]
 8008cce:	60c4      	str	r4, [r0, #12]
 8008cd0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008cd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cd8:	b94c      	cbnz	r4, 8008cee <__pow5mult+0x66>
 8008cda:	f240 2171 	movw	r1, #625	@ 0x271
 8008cde:	4638      	mov	r0, r7
 8008ce0:	f7ff ff1a 	bl	8008b18 <__i2b>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cea:	4604      	mov	r4, r0
 8008cec:	6003      	str	r3, [r0, #0]
 8008cee:	f04f 0900 	mov.w	r9, #0
 8008cf2:	07eb      	lsls	r3, r5, #31
 8008cf4:	d50a      	bpl.n	8008d0c <__pow5mult+0x84>
 8008cf6:	4631      	mov	r1, r6
 8008cf8:	4622      	mov	r2, r4
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	f7ff ff22 	bl	8008b44 <__multiply>
 8008d00:	4631      	mov	r1, r6
 8008d02:	4680      	mov	r8, r0
 8008d04:	4638      	mov	r0, r7
 8008d06:	f7ff fe53 	bl	80089b0 <_Bfree>
 8008d0a:	4646      	mov	r6, r8
 8008d0c:	106d      	asrs	r5, r5, #1
 8008d0e:	d00b      	beq.n	8008d28 <__pow5mult+0xa0>
 8008d10:	6820      	ldr	r0, [r4, #0]
 8008d12:	b938      	cbnz	r0, 8008d24 <__pow5mult+0x9c>
 8008d14:	4622      	mov	r2, r4
 8008d16:	4621      	mov	r1, r4
 8008d18:	4638      	mov	r0, r7
 8008d1a:	f7ff ff13 	bl	8008b44 <__multiply>
 8008d1e:	6020      	str	r0, [r4, #0]
 8008d20:	f8c0 9000 	str.w	r9, [r0]
 8008d24:	4604      	mov	r4, r0
 8008d26:	e7e4      	b.n	8008cf2 <__pow5mult+0x6a>
 8008d28:	4630      	mov	r0, r6
 8008d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d2e:	bf00      	nop
 8008d30:	0800aa50 	.word	0x0800aa50
 8008d34:	0800a91d 	.word	0x0800a91d
 8008d38:	0800a99d 	.word	0x0800a99d

08008d3c <__lshift>:
 8008d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d40:	460c      	mov	r4, r1
 8008d42:	6849      	ldr	r1, [r1, #4]
 8008d44:	6923      	ldr	r3, [r4, #16]
 8008d46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d4a:	68a3      	ldr	r3, [r4, #8]
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	4691      	mov	r9, r2
 8008d50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d54:	f108 0601 	add.w	r6, r8, #1
 8008d58:	42b3      	cmp	r3, r6
 8008d5a:	db0b      	blt.n	8008d74 <__lshift+0x38>
 8008d5c:	4638      	mov	r0, r7
 8008d5e:	f7ff fde7 	bl	8008930 <_Balloc>
 8008d62:	4605      	mov	r5, r0
 8008d64:	b948      	cbnz	r0, 8008d7a <__lshift+0x3e>
 8008d66:	4602      	mov	r2, r0
 8008d68:	4b28      	ldr	r3, [pc, #160]	@ (8008e0c <__lshift+0xd0>)
 8008d6a:	4829      	ldr	r0, [pc, #164]	@ (8008e10 <__lshift+0xd4>)
 8008d6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008d70:	f000 fb6c 	bl	800944c <__assert_func>
 8008d74:	3101      	adds	r1, #1
 8008d76:	005b      	lsls	r3, r3, #1
 8008d78:	e7ee      	b.n	8008d58 <__lshift+0x1c>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f100 0114 	add.w	r1, r0, #20
 8008d80:	f100 0210 	add.w	r2, r0, #16
 8008d84:	4618      	mov	r0, r3
 8008d86:	4553      	cmp	r3, sl
 8008d88:	db33      	blt.n	8008df2 <__lshift+0xb6>
 8008d8a:	6920      	ldr	r0, [r4, #16]
 8008d8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d90:	f104 0314 	add.w	r3, r4, #20
 8008d94:	f019 091f 	ands.w	r9, r9, #31
 8008d98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008da0:	d02b      	beq.n	8008dfa <__lshift+0xbe>
 8008da2:	f1c9 0e20 	rsb	lr, r9, #32
 8008da6:	468a      	mov	sl, r1
 8008da8:	2200      	movs	r2, #0
 8008daa:	6818      	ldr	r0, [r3, #0]
 8008dac:	fa00 f009 	lsl.w	r0, r0, r9
 8008db0:	4310      	orrs	r0, r2
 8008db2:	f84a 0b04 	str.w	r0, [sl], #4
 8008db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dba:	459c      	cmp	ip, r3
 8008dbc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008dc0:	d8f3      	bhi.n	8008daa <__lshift+0x6e>
 8008dc2:	ebac 0304 	sub.w	r3, ip, r4
 8008dc6:	3b15      	subs	r3, #21
 8008dc8:	f023 0303 	bic.w	r3, r3, #3
 8008dcc:	3304      	adds	r3, #4
 8008dce:	f104 0015 	add.w	r0, r4, #21
 8008dd2:	4560      	cmp	r0, ip
 8008dd4:	bf88      	it	hi
 8008dd6:	2304      	movhi	r3, #4
 8008dd8:	50ca      	str	r2, [r1, r3]
 8008dda:	b10a      	cbz	r2, 8008de0 <__lshift+0xa4>
 8008ddc:	f108 0602 	add.w	r6, r8, #2
 8008de0:	3e01      	subs	r6, #1
 8008de2:	4638      	mov	r0, r7
 8008de4:	612e      	str	r6, [r5, #16]
 8008de6:	4621      	mov	r1, r4
 8008de8:	f7ff fde2 	bl	80089b0 <_Bfree>
 8008dec:	4628      	mov	r0, r5
 8008dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008df6:	3301      	adds	r3, #1
 8008df8:	e7c5      	b.n	8008d86 <__lshift+0x4a>
 8008dfa:	3904      	subs	r1, #4
 8008dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e00:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e04:	459c      	cmp	ip, r3
 8008e06:	d8f9      	bhi.n	8008dfc <__lshift+0xc0>
 8008e08:	e7ea      	b.n	8008de0 <__lshift+0xa4>
 8008e0a:	bf00      	nop
 8008e0c:	0800a98c 	.word	0x0800a98c
 8008e10:	0800a99d 	.word	0x0800a99d

08008e14 <__mcmp>:
 8008e14:	690a      	ldr	r2, [r1, #16]
 8008e16:	4603      	mov	r3, r0
 8008e18:	6900      	ldr	r0, [r0, #16]
 8008e1a:	1a80      	subs	r0, r0, r2
 8008e1c:	b530      	push	{r4, r5, lr}
 8008e1e:	d10e      	bne.n	8008e3e <__mcmp+0x2a>
 8008e20:	3314      	adds	r3, #20
 8008e22:	3114      	adds	r1, #20
 8008e24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e34:	4295      	cmp	r5, r2
 8008e36:	d003      	beq.n	8008e40 <__mcmp+0x2c>
 8008e38:	d205      	bcs.n	8008e46 <__mcmp+0x32>
 8008e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3e:	bd30      	pop	{r4, r5, pc}
 8008e40:	42a3      	cmp	r3, r4
 8008e42:	d3f3      	bcc.n	8008e2c <__mcmp+0x18>
 8008e44:	e7fb      	b.n	8008e3e <__mcmp+0x2a>
 8008e46:	2001      	movs	r0, #1
 8008e48:	e7f9      	b.n	8008e3e <__mcmp+0x2a>
	...

08008e4c <__mdiff>:
 8008e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e50:	4689      	mov	r9, r1
 8008e52:	4606      	mov	r6, r0
 8008e54:	4611      	mov	r1, r2
 8008e56:	4648      	mov	r0, r9
 8008e58:	4614      	mov	r4, r2
 8008e5a:	f7ff ffdb 	bl	8008e14 <__mcmp>
 8008e5e:	1e05      	subs	r5, r0, #0
 8008e60:	d112      	bne.n	8008e88 <__mdiff+0x3c>
 8008e62:	4629      	mov	r1, r5
 8008e64:	4630      	mov	r0, r6
 8008e66:	f7ff fd63 	bl	8008930 <_Balloc>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	b928      	cbnz	r0, 8008e7a <__mdiff+0x2e>
 8008e6e:	4b3f      	ldr	r3, [pc, #252]	@ (8008f6c <__mdiff+0x120>)
 8008e70:	f240 2137 	movw	r1, #567	@ 0x237
 8008e74:	483e      	ldr	r0, [pc, #248]	@ (8008f70 <__mdiff+0x124>)
 8008e76:	f000 fae9 	bl	800944c <__assert_func>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e80:	4610      	mov	r0, r2
 8008e82:	b003      	add	sp, #12
 8008e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e88:	bfbc      	itt	lt
 8008e8a:	464b      	movlt	r3, r9
 8008e8c:	46a1      	movlt	r9, r4
 8008e8e:	4630      	mov	r0, r6
 8008e90:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008e94:	bfba      	itte	lt
 8008e96:	461c      	movlt	r4, r3
 8008e98:	2501      	movlt	r5, #1
 8008e9a:	2500      	movge	r5, #0
 8008e9c:	f7ff fd48 	bl	8008930 <_Balloc>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	b918      	cbnz	r0, 8008eac <__mdiff+0x60>
 8008ea4:	4b31      	ldr	r3, [pc, #196]	@ (8008f6c <__mdiff+0x120>)
 8008ea6:	f240 2145 	movw	r1, #581	@ 0x245
 8008eaa:	e7e3      	b.n	8008e74 <__mdiff+0x28>
 8008eac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008eb0:	6926      	ldr	r6, [r4, #16]
 8008eb2:	60c5      	str	r5, [r0, #12]
 8008eb4:	f109 0310 	add.w	r3, r9, #16
 8008eb8:	f109 0514 	add.w	r5, r9, #20
 8008ebc:	f104 0e14 	add.w	lr, r4, #20
 8008ec0:	f100 0b14 	add.w	fp, r0, #20
 8008ec4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008ec8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ecc:	9301      	str	r3, [sp, #4]
 8008ece:	46d9      	mov	r9, fp
 8008ed0:	f04f 0c00 	mov.w	ip, #0
 8008ed4:	9b01      	ldr	r3, [sp, #4]
 8008ed6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008eda:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008ede:	9301      	str	r3, [sp, #4]
 8008ee0:	fa1f f38a 	uxth.w	r3, sl
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	b283      	uxth	r3, r0
 8008ee8:	1acb      	subs	r3, r1, r3
 8008eea:	0c00      	lsrs	r0, r0, #16
 8008eec:	4463      	add	r3, ip
 8008eee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008ef2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008efc:	4576      	cmp	r6, lr
 8008efe:	f849 3b04 	str.w	r3, [r9], #4
 8008f02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f06:	d8e5      	bhi.n	8008ed4 <__mdiff+0x88>
 8008f08:	1b33      	subs	r3, r6, r4
 8008f0a:	3b15      	subs	r3, #21
 8008f0c:	f023 0303 	bic.w	r3, r3, #3
 8008f10:	3415      	adds	r4, #21
 8008f12:	3304      	adds	r3, #4
 8008f14:	42a6      	cmp	r6, r4
 8008f16:	bf38      	it	cc
 8008f18:	2304      	movcc	r3, #4
 8008f1a:	441d      	add	r5, r3
 8008f1c:	445b      	add	r3, fp
 8008f1e:	461e      	mov	r6, r3
 8008f20:	462c      	mov	r4, r5
 8008f22:	4544      	cmp	r4, r8
 8008f24:	d30e      	bcc.n	8008f44 <__mdiff+0xf8>
 8008f26:	f108 0103 	add.w	r1, r8, #3
 8008f2a:	1b49      	subs	r1, r1, r5
 8008f2c:	f021 0103 	bic.w	r1, r1, #3
 8008f30:	3d03      	subs	r5, #3
 8008f32:	45a8      	cmp	r8, r5
 8008f34:	bf38      	it	cc
 8008f36:	2100      	movcc	r1, #0
 8008f38:	440b      	add	r3, r1
 8008f3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f3e:	b191      	cbz	r1, 8008f66 <__mdiff+0x11a>
 8008f40:	6117      	str	r7, [r2, #16]
 8008f42:	e79d      	b.n	8008e80 <__mdiff+0x34>
 8008f44:	f854 1b04 	ldr.w	r1, [r4], #4
 8008f48:	46e6      	mov	lr, ip
 8008f4a:	0c08      	lsrs	r0, r1, #16
 8008f4c:	fa1c fc81 	uxtah	ip, ip, r1
 8008f50:	4471      	add	r1, lr
 8008f52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008f56:	b289      	uxth	r1, r1
 8008f58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f5c:	f846 1b04 	str.w	r1, [r6], #4
 8008f60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f64:	e7dd      	b.n	8008f22 <__mdiff+0xd6>
 8008f66:	3f01      	subs	r7, #1
 8008f68:	e7e7      	b.n	8008f3a <__mdiff+0xee>
 8008f6a:	bf00      	nop
 8008f6c:	0800a98c 	.word	0x0800a98c
 8008f70:	0800a99d 	.word	0x0800a99d

08008f74 <__d2b>:
 8008f74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f78:	460f      	mov	r7, r1
 8008f7a:	2101      	movs	r1, #1
 8008f7c:	ec59 8b10 	vmov	r8, r9, d0
 8008f80:	4616      	mov	r6, r2
 8008f82:	f7ff fcd5 	bl	8008930 <_Balloc>
 8008f86:	4604      	mov	r4, r0
 8008f88:	b930      	cbnz	r0, 8008f98 <__d2b+0x24>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	4b23      	ldr	r3, [pc, #140]	@ (800901c <__d2b+0xa8>)
 8008f8e:	4824      	ldr	r0, [pc, #144]	@ (8009020 <__d2b+0xac>)
 8008f90:	f240 310f 	movw	r1, #783	@ 0x30f
 8008f94:	f000 fa5a 	bl	800944c <__assert_func>
 8008f98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fa0:	b10d      	cbz	r5, 8008fa6 <__d2b+0x32>
 8008fa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fa6:	9301      	str	r3, [sp, #4]
 8008fa8:	f1b8 0300 	subs.w	r3, r8, #0
 8008fac:	d023      	beq.n	8008ff6 <__d2b+0x82>
 8008fae:	4668      	mov	r0, sp
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	f7ff fd84 	bl	8008abe <__lo0bits>
 8008fb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008fba:	b1d0      	cbz	r0, 8008ff2 <__d2b+0x7e>
 8008fbc:	f1c0 0320 	rsb	r3, r0, #32
 8008fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc4:	430b      	orrs	r3, r1
 8008fc6:	40c2      	lsrs	r2, r0
 8008fc8:	6163      	str	r3, [r4, #20]
 8008fca:	9201      	str	r2, [sp, #4]
 8008fcc:	9b01      	ldr	r3, [sp, #4]
 8008fce:	61a3      	str	r3, [r4, #24]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	bf0c      	ite	eq
 8008fd4:	2201      	moveq	r2, #1
 8008fd6:	2202      	movne	r2, #2
 8008fd8:	6122      	str	r2, [r4, #16]
 8008fda:	b1a5      	cbz	r5, 8009006 <__d2b+0x92>
 8008fdc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008fe0:	4405      	add	r5, r0
 8008fe2:	603d      	str	r5, [r7, #0]
 8008fe4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008fe8:	6030      	str	r0, [r6, #0]
 8008fea:	4620      	mov	r0, r4
 8008fec:	b003      	add	sp, #12
 8008fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ff2:	6161      	str	r1, [r4, #20]
 8008ff4:	e7ea      	b.n	8008fcc <__d2b+0x58>
 8008ff6:	a801      	add	r0, sp, #4
 8008ff8:	f7ff fd61 	bl	8008abe <__lo0bits>
 8008ffc:	9b01      	ldr	r3, [sp, #4]
 8008ffe:	6163      	str	r3, [r4, #20]
 8009000:	3020      	adds	r0, #32
 8009002:	2201      	movs	r2, #1
 8009004:	e7e8      	b.n	8008fd8 <__d2b+0x64>
 8009006:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800900a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800900e:	6038      	str	r0, [r7, #0]
 8009010:	6918      	ldr	r0, [r3, #16]
 8009012:	f7ff fd35 	bl	8008a80 <__hi0bits>
 8009016:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800901a:	e7e5      	b.n	8008fe8 <__d2b+0x74>
 800901c:	0800a98c 	.word	0x0800a98c
 8009020:	0800a99d 	.word	0x0800a99d

08009024 <__ssputs_r>:
 8009024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009028:	688e      	ldr	r6, [r1, #8]
 800902a:	461f      	mov	r7, r3
 800902c:	42be      	cmp	r6, r7
 800902e:	680b      	ldr	r3, [r1, #0]
 8009030:	4682      	mov	sl, r0
 8009032:	460c      	mov	r4, r1
 8009034:	4690      	mov	r8, r2
 8009036:	d82d      	bhi.n	8009094 <__ssputs_r+0x70>
 8009038:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800903c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009040:	d026      	beq.n	8009090 <__ssputs_r+0x6c>
 8009042:	6965      	ldr	r5, [r4, #20]
 8009044:	6909      	ldr	r1, [r1, #16]
 8009046:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800904a:	eba3 0901 	sub.w	r9, r3, r1
 800904e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009052:	1c7b      	adds	r3, r7, #1
 8009054:	444b      	add	r3, r9
 8009056:	106d      	asrs	r5, r5, #1
 8009058:	429d      	cmp	r5, r3
 800905a:	bf38      	it	cc
 800905c:	461d      	movcc	r5, r3
 800905e:	0553      	lsls	r3, r2, #21
 8009060:	d527      	bpl.n	80090b2 <__ssputs_r+0x8e>
 8009062:	4629      	mov	r1, r5
 8009064:	f7ff fbd8 	bl	8008818 <_malloc_r>
 8009068:	4606      	mov	r6, r0
 800906a:	b360      	cbz	r0, 80090c6 <__ssputs_r+0xa2>
 800906c:	6921      	ldr	r1, [r4, #16]
 800906e:	464a      	mov	r2, r9
 8009070:	f7fe fcf5 	bl	8007a5e <memcpy>
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800907a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800907e:	81a3      	strh	r3, [r4, #12]
 8009080:	6126      	str	r6, [r4, #16]
 8009082:	6165      	str	r5, [r4, #20]
 8009084:	444e      	add	r6, r9
 8009086:	eba5 0509 	sub.w	r5, r5, r9
 800908a:	6026      	str	r6, [r4, #0]
 800908c:	60a5      	str	r5, [r4, #8]
 800908e:	463e      	mov	r6, r7
 8009090:	42be      	cmp	r6, r7
 8009092:	d900      	bls.n	8009096 <__ssputs_r+0x72>
 8009094:	463e      	mov	r6, r7
 8009096:	6820      	ldr	r0, [r4, #0]
 8009098:	4632      	mov	r2, r6
 800909a:	4641      	mov	r1, r8
 800909c:	f7fe fc45 	bl	800792a <memmove>
 80090a0:	68a3      	ldr	r3, [r4, #8]
 80090a2:	1b9b      	subs	r3, r3, r6
 80090a4:	60a3      	str	r3, [r4, #8]
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	4433      	add	r3, r6
 80090aa:	6023      	str	r3, [r4, #0]
 80090ac:	2000      	movs	r0, #0
 80090ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b2:	462a      	mov	r2, r5
 80090b4:	f000 fa0e 	bl	80094d4 <_realloc_r>
 80090b8:	4606      	mov	r6, r0
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d1e0      	bne.n	8009080 <__ssputs_r+0x5c>
 80090be:	6921      	ldr	r1, [r4, #16]
 80090c0:	4650      	mov	r0, sl
 80090c2:	f7ff fb35 	bl	8008730 <_free_r>
 80090c6:	230c      	movs	r3, #12
 80090c8:	f8ca 3000 	str.w	r3, [sl]
 80090cc:	89a3      	ldrh	r3, [r4, #12]
 80090ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090d2:	81a3      	strh	r3, [r4, #12]
 80090d4:	f04f 30ff 	mov.w	r0, #4294967295
 80090d8:	e7e9      	b.n	80090ae <__ssputs_r+0x8a>
	...

080090dc <_svfiprintf_r>:
 80090dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e0:	4698      	mov	r8, r3
 80090e2:	898b      	ldrh	r3, [r1, #12]
 80090e4:	061b      	lsls	r3, r3, #24
 80090e6:	b09d      	sub	sp, #116	@ 0x74
 80090e8:	4607      	mov	r7, r0
 80090ea:	460d      	mov	r5, r1
 80090ec:	4614      	mov	r4, r2
 80090ee:	d510      	bpl.n	8009112 <_svfiprintf_r+0x36>
 80090f0:	690b      	ldr	r3, [r1, #16]
 80090f2:	b973      	cbnz	r3, 8009112 <_svfiprintf_r+0x36>
 80090f4:	2140      	movs	r1, #64	@ 0x40
 80090f6:	f7ff fb8f 	bl	8008818 <_malloc_r>
 80090fa:	6028      	str	r0, [r5, #0]
 80090fc:	6128      	str	r0, [r5, #16]
 80090fe:	b930      	cbnz	r0, 800910e <_svfiprintf_r+0x32>
 8009100:	230c      	movs	r3, #12
 8009102:	603b      	str	r3, [r7, #0]
 8009104:	f04f 30ff 	mov.w	r0, #4294967295
 8009108:	b01d      	add	sp, #116	@ 0x74
 800910a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800910e:	2340      	movs	r3, #64	@ 0x40
 8009110:	616b      	str	r3, [r5, #20]
 8009112:	2300      	movs	r3, #0
 8009114:	9309      	str	r3, [sp, #36]	@ 0x24
 8009116:	2320      	movs	r3, #32
 8009118:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800911c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009120:	2330      	movs	r3, #48	@ 0x30
 8009122:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80092c0 <_svfiprintf_r+0x1e4>
 8009126:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800912a:	f04f 0901 	mov.w	r9, #1
 800912e:	4623      	mov	r3, r4
 8009130:	469a      	mov	sl, r3
 8009132:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009136:	b10a      	cbz	r2, 800913c <_svfiprintf_r+0x60>
 8009138:	2a25      	cmp	r2, #37	@ 0x25
 800913a:	d1f9      	bne.n	8009130 <_svfiprintf_r+0x54>
 800913c:	ebba 0b04 	subs.w	fp, sl, r4
 8009140:	d00b      	beq.n	800915a <_svfiprintf_r+0x7e>
 8009142:	465b      	mov	r3, fp
 8009144:	4622      	mov	r2, r4
 8009146:	4629      	mov	r1, r5
 8009148:	4638      	mov	r0, r7
 800914a:	f7ff ff6b 	bl	8009024 <__ssputs_r>
 800914e:	3001      	adds	r0, #1
 8009150:	f000 80a7 	beq.w	80092a2 <_svfiprintf_r+0x1c6>
 8009154:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009156:	445a      	add	r2, fp
 8009158:	9209      	str	r2, [sp, #36]	@ 0x24
 800915a:	f89a 3000 	ldrb.w	r3, [sl]
 800915e:	2b00      	cmp	r3, #0
 8009160:	f000 809f 	beq.w	80092a2 <_svfiprintf_r+0x1c6>
 8009164:	2300      	movs	r3, #0
 8009166:	f04f 32ff 	mov.w	r2, #4294967295
 800916a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800916e:	f10a 0a01 	add.w	sl, sl, #1
 8009172:	9304      	str	r3, [sp, #16]
 8009174:	9307      	str	r3, [sp, #28]
 8009176:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800917a:	931a      	str	r3, [sp, #104]	@ 0x68
 800917c:	4654      	mov	r4, sl
 800917e:	2205      	movs	r2, #5
 8009180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009184:	484e      	ldr	r0, [pc, #312]	@ (80092c0 <_svfiprintf_r+0x1e4>)
 8009186:	f7f7 f84b 	bl	8000220 <memchr>
 800918a:	9a04      	ldr	r2, [sp, #16]
 800918c:	b9d8      	cbnz	r0, 80091c6 <_svfiprintf_r+0xea>
 800918e:	06d0      	lsls	r0, r2, #27
 8009190:	bf44      	itt	mi
 8009192:	2320      	movmi	r3, #32
 8009194:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009198:	0711      	lsls	r1, r2, #28
 800919a:	bf44      	itt	mi
 800919c:	232b      	movmi	r3, #43	@ 0x2b
 800919e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091a2:	f89a 3000 	ldrb.w	r3, [sl]
 80091a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80091a8:	d015      	beq.n	80091d6 <_svfiprintf_r+0xfa>
 80091aa:	9a07      	ldr	r2, [sp, #28]
 80091ac:	4654      	mov	r4, sl
 80091ae:	2000      	movs	r0, #0
 80091b0:	f04f 0c0a 	mov.w	ip, #10
 80091b4:	4621      	mov	r1, r4
 80091b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091ba:	3b30      	subs	r3, #48	@ 0x30
 80091bc:	2b09      	cmp	r3, #9
 80091be:	d94b      	bls.n	8009258 <_svfiprintf_r+0x17c>
 80091c0:	b1b0      	cbz	r0, 80091f0 <_svfiprintf_r+0x114>
 80091c2:	9207      	str	r2, [sp, #28]
 80091c4:	e014      	b.n	80091f0 <_svfiprintf_r+0x114>
 80091c6:	eba0 0308 	sub.w	r3, r0, r8
 80091ca:	fa09 f303 	lsl.w	r3, r9, r3
 80091ce:	4313      	orrs	r3, r2
 80091d0:	9304      	str	r3, [sp, #16]
 80091d2:	46a2      	mov	sl, r4
 80091d4:	e7d2      	b.n	800917c <_svfiprintf_r+0xa0>
 80091d6:	9b03      	ldr	r3, [sp, #12]
 80091d8:	1d19      	adds	r1, r3, #4
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	9103      	str	r1, [sp, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	bfbb      	ittet	lt
 80091e2:	425b      	neglt	r3, r3
 80091e4:	f042 0202 	orrlt.w	r2, r2, #2
 80091e8:	9307      	strge	r3, [sp, #28]
 80091ea:	9307      	strlt	r3, [sp, #28]
 80091ec:	bfb8      	it	lt
 80091ee:	9204      	strlt	r2, [sp, #16]
 80091f0:	7823      	ldrb	r3, [r4, #0]
 80091f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80091f4:	d10a      	bne.n	800920c <_svfiprintf_r+0x130>
 80091f6:	7863      	ldrb	r3, [r4, #1]
 80091f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80091fa:	d132      	bne.n	8009262 <_svfiprintf_r+0x186>
 80091fc:	9b03      	ldr	r3, [sp, #12]
 80091fe:	1d1a      	adds	r2, r3, #4
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	9203      	str	r2, [sp, #12]
 8009204:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009208:	3402      	adds	r4, #2
 800920a:	9305      	str	r3, [sp, #20]
 800920c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80092d0 <_svfiprintf_r+0x1f4>
 8009210:	7821      	ldrb	r1, [r4, #0]
 8009212:	2203      	movs	r2, #3
 8009214:	4650      	mov	r0, sl
 8009216:	f7f7 f803 	bl	8000220 <memchr>
 800921a:	b138      	cbz	r0, 800922c <_svfiprintf_r+0x150>
 800921c:	9b04      	ldr	r3, [sp, #16]
 800921e:	eba0 000a 	sub.w	r0, r0, sl
 8009222:	2240      	movs	r2, #64	@ 0x40
 8009224:	4082      	lsls	r2, r0
 8009226:	4313      	orrs	r3, r2
 8009228:	3401      	adds	r4, #1
 800922a:	9304      	str	r3, [sp, #16]
 800922c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009230:	4824      	ldr	r0, [pc, #144]	@ (80092c4 <_svfiprintf_r+0x1e8>)
 8009232:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009236:	2206      	movs	r2, #6
 8009238:	f7f6 fff2 	bl	8000220 <memchr>
 800923c:	2800      	cmp	r0, #0
 800923e:	d036      	beq.n	80092ae <_svfiprintf_r+0x1d2>
 8009240:	4b21      	ldr	r3, [pc, #132]	@ (80092c8 <_svfiprintf_r+0x1ec>)
 8009242:	bb1b      	cbnz	r3, 800928c <_svfiprintf_r+0x1b0>
 8009244:	9b03      	ldr	r3, [sp, #12]
 8009246:	3307      	adds	r3, #7
 8009248:	f023 0307 	bic.w	r3, r3, #7
 800924c:	3308      	adds	r3, #8
 800924e:	9303      	str	r3, [sp, #12]
 8009250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009252:	4433      	add	r3, r6
 8009254:	9309      	str	r3, [sp, #36]	@ 0x24
 8009256:	e76a      	b.n	800912e <_svfiprintf_r+0x52>
 8009258:	fb0c 3202 	mla	r2, ip, r2, r3
 800925c:	460c      	mov	r4, r1
 800925e:	2001      	movs	r0, #1
 8009260:	e7a8      	b.n	80091b4 <_svfiprintf_r+0xd8>
 8009262:	2300      	movs	r3, #0
 8009264:	3401      	adds	r4, #1
 8009266:	9305      	str	r3, [sp, #20]
 8009268:	4619      	mov	r1, r3
 800926a:	f04f 0c0a 	mov.w	ip, #10
 800926e:	4620      	mov	r0, r4
 8009270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009274:	3a30      	subs	r2, #48	@ 0x30
 8009276:	2a09      	cmp	r2, #9
 8009278:	d903      	bls.n	8009282 <_svfiprintf_r+0x1a6>
 800927a:	2b00      	cmp	r3, #0
 800927c:	d0c6      	beq.n	800920c <_svfiprintf_r+0x130>
 800927e:	9105      	str	r1, [sp, #20]
 8009280:	e7c4      	b.n	800920c <_svfiprintf_r+0x130>
 8009282:	fb0c 2101 	mla	r1, ip, r1, r2
 8009286:	4604      	mov	r4, r0
 8009288:	2301      	movs	r3, #1
 800928a:	e7f0      	b.n	800926e <_svfiprintf_r+0x192>
 800928c:	ab03      	add	r3, sp, #12
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	462a      	mov	r2, r5
 8009292:	4b0e      	ldr	r3, [pc, #56]	@ (80092cc <_svfiprintf_r+0x1f0>)
 8009294:	a904      	add	r1, sp, #16
 8009296:	4638      	mov	r0, r7
 8009298:	f7fd fe56 	bl	8006f48 <_printf_float>
 800929c:	1c42      	adds	r2, r0, #1
 800929e:	4606      	mov	r6, r0
 80092a0:	d1d6      	bne.n	8009250 <_svfiprintf_r+0x174>
 80092a2:	89ab      	ldrh	r3, [r5, #12]
 80092a4:	065b      	lsls	r3, r3, #25
 80092a6:	f53f af2d 	bmi.w	8009104 <_svfiprintf_r+0x28>
 80092aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092ac:	e72c      	b.n	8009108 <_svfiprintf_r+0x2c>
 80092ae:	ab03      	add	r3, sp, #12
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	462a      	mov	r2, r5
 80092b4:	4b05      	ldr	r3, [pc, #20]	@ (80092cc <_svfiprintf_r+0x1f0>)
 80092b6:	a904      	add	r1, sp, #16
 80092b8:	4638      	mov	r0, r7
 80092ba:	f7fe f8dd 	bl	8007478 <_printf_i>
 80092be:	e7ed      	b.n	800929c <_svfiprintf_r+0x1c0>
 80092c0:	0800a9f6 	.word	0x0800a9f6
 80092c4:	0800aa00 	.word	0x0800aa00
 80092c8:	08006f49 	.word	0x08006f49
 80092cc:	08009025 	.word	0x08009025
 80092d0:	0800a9fc 	.word	0x0800a9fc

080092d4 <__sflush_r>:
 80092d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092dc:	0716      	lsls	r6, r2, #28
 80092de:	4605      	mov	r5, r0
 80092e0:	460c      	mov	r4, r1
 80092e2:	d454      	bmi.n	800938e <__sflush_r+0xba>
 80092e4:	684b      	ldr	r3, [r1, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	dc02      	bgt.n	80092f0 <__sflush_r+0x1c>
 80092ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	dd48      	ble.n	8009382 <__sflush_r+0xae>
 80092f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092f2:	2e00      	cmp	r6, #0
 80092f4:	d045      	beq.n	8009382 <__sflush_r+0xae>
 80092f6:	2300      	movs	r3, #0
 80092f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80092fc:	682f      	ldr	r7, [r5, #0]
 80092fe:	6a21      	ldr	r1, [r4, #32]
 8009300:	602b      	str	r3, [r5, #0]
 8009302:	d030      	beq.n	8009366 <__sflush_r+0x92>
 8009304:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009306:	89a3      	ldrh	r3, [r4, #12]
 8009308:	0759      	lsls	r1, r3, #29
 800930a:	d505      	bpl.n	8009318 <__sflush_r+0x44>
 800930c:	6863      	ldr	r3, [r4, #4]
 800930e:	1ad2      	subs	r2, r2, r3
 8009310:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009312:	b10b      	cbz	r3, 8009318 <__sflush_r+0x44>
 8009314:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009316:	1ad2      	subs	r2, r2, r3
 8009318:	2300      	movs	r3, #0
 800931a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800931c:	6a21      	ldr	r1, [r4, #32]
 800931e:	4628      	mov	r0, r5
 8009320:	47b0      	blx	r6
 8009322:	1c43      	adds	r3, r0, #1
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	d106      	bne.n	8009336 <__sflush_r+0x62>
 8009328:	6829      	ldr	r1, [r5, #0]
 800932a:	291d      	cmp	r1, #29
 800932c:	d82b      	bhi.n	8009386 <__sflush_r+0xb2>
 800932e:	4a2a      	ldr	r2, [pc, #168]	@ (80093d8 <__sflush_r+0x104>)
 8009330:	40ca      	lsrs	r2, r1
 8009332:	07d6      	lsls	r6, r2, #31
 8009334:	d527      	bpl.n	8009386 <__sflush_r+0xb2>
 8009336:	2200      	movs	r2, #0
 8009338:	6062      	str	r2, [r4, #4]
 800933a:	04d9      	lsls	r1, r3, #19
 800933c:	6922      	ldr	r2, [r4, #16]
 800933e:	6022      	str	r2, [r4, #0]
 8009340:	d504      	bpl.n	800934c <__sflush_r+0x78>
 8009342:	1c42      	adds	r2, r0, #1
 8009344:	d101      	bne.n	800934a <__sflush_r+0x76>
 8009346:	682b      	ldr	r3, [r5, #0]
 8009348:	b903      	cbnz	r3, 800934c <__sflush_r+0x78>
 800934a:	6560      	str	r0, [r4, #84]	@ 0x54
 800934c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800934e:	602f      	str	r7, [r5, #0]
 8009350:	b1b9      	cbz	r1, 8009382 <__sflush_r+0xae>
 8009352:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009356:	4299      	cmp	r1, r3
 8009358:	d002      	beq.n	8009360 <__sflush_r+0x8c>
 800935a:	4628      	mov	r0, r5
 800935c:	f7ff f9e8 	bl	8008730 <_free_r>
 8009360:	2300      	movs	r3, #0
 8009362:	6363      	str	r3, [r4, #52]	@ 0x34
 8009364:	e00d      	b.n	8009382 <__sflush_r+0xae>
 8009366:	2301      	movs	r3, #1
 8009368:	4628      	mov	r0, r5
 800936a:	47b0      	blx	r6
 800936c:	4602      	mov	r2, r0
 800936e:	1c50      	adds	r0, r2, #1
 8009370:	d1c9      	bne.n	8009306 <__sflush_r+0x32>
 8009372:	682b      	ldr	r3, [r5, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d0c6      	beq.n	8009306 <__sflush_r+0x32>
 8009378:	2b1d      	cmp	r3, #29
 800937a:	d001      	beq.n	8009380 <__sflush_r+0xac>
 800937c:	2b16      	cmp	r3, #22
 800937e:	d11e      	bne.n	80093be <__sflush_r+0xea>
 8009380:	602f      	str	r7, [r5, #0]
 8009382:	2000      	movs	r0, #0
 8009384:	e022      	b.n	80093cc <__sflush_r+0xf8>
 8009386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800938a:	b21b      	sxth	r3, r3
 800938c:	e01b      	b.n	80093c6 <__sflush_r+0xf2>
 800938e:	690f      	ldr	r7, [r1, #16]
 8009390:	2f00      	cmp	r7, #0
 8009392:	d0f6      	beq.n	8009382 <__sflush_r+0xae>
 8009394:	0793      	lsls	r3, r2, #30
 8009396:	680e      	ldr	r6, [r1, #0]
 8009398:	bf08      	it	eq
 800939a:	694b      	ldreq	r3, [r1, #20]
 800939c:	600f      	str	r7, [r1, #0]
 800939e:	bf18      	it	ne
 80093a0:	2300      	movne	r3, #0
 80093a2:	eba6 0807 	sub.w	r8, r6, r7
 80093a6:	608b      	str	r3, [r1, #8]
 80093a8:	f1b8 0f00 	cmp.w	r8, #0
 80093ac:	dde9      	ble.n	8009382 <__sflush_r+0xae>
 80093ae:	6a21      	ldr	r1, [r4, #32]
 80093b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80093b2:	4643      	mov	r3, r8
 80093b4:	463a      	mov	r2, r7
 80093b6:	4628      	mov	r0, r5
 80093b8:	47b0      	blx	r6
 80093ba:	2800      	cmp	r0, #0
 80093bc:	dc08      	bgt.n	80093d0 <__sflush_r+0xfc>
 80093be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093c6:	81a3      	strh	r3, [r4, #12]
 80093c8:	f04f 30ff 	mov.w	r0, #4294967295
 80093cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d0:	4407      	add	r7, r0
 80093d2:	eba8 0800 	sub.w	r8, r8, r0
 80093d6:	e7e7      	b.n	80093a8 <__sflush_r+0xd4>
 80093d8:	20400001 	.word	0x20400001

080093dc <_fflush_r>:
 80093dc:	b538      	push	{r3, r4, r5, lr}
 80093de:	690b      	ldr	r3, [r1, #16]
 80093e0:	4605      	mov	r5, r0
 80093e2:	460c      	mov	r4, r1
 80093e4:	b913      	cbnz	r3, 80093ec <_fflush_r+0x10>
 80093e6:	2500      	movs	r5, #0
 80093e8:	4628      	mov	r0, r5
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	b118      	cbz	r0, 80093f6 <_fflush_r+0x1a>
 80093ee:	6a03      	ldr	r3, [r0, #32]
 80093f0:	b90b      	cbnz	r3, 80093f6 <_fflush_r+0x1a>
 80093f2:	f7fe f9eb 	bl	80077cc <__sinit>
 80093f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d0f3      	beq.n	80093e6 <_fflush_r+0xa>
 80093fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009400:	07d0      	lsls	r0, r2, #31
 8009402:	d404      	bmi.n	800940e <_fflush_r+0x32>
 8009404:	0599      	lsls	r1, r3, #22
 8009406:	d402      	bmi.n	800940e <_fflush_r+0x32>
 8009408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800940a:	f7fe fb26 	bl	8007a5a <__retarget_lock_acquire_recursive>
 800940e:	4628      	mov	r0, r5
 8009410:	4621      	mov	r1, r4
 8009412:	f7ff ff5f 	bl	80092d4 <__sflush_r>
 8009416:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009418:	07da      	lsls	r2, r3, #31
 800941a:	4605      	mov	r5, r0
 800941c:	d4e4      	bmi.n	80093e8 <_fflush_r+0xc>
 800941e:	89a3      	ldrh	r3, [r4, #12]
 8009420:	059b      	lsls	r3, r3, #22
 8009422:	d4e1      	bmi.n	80093e8 <_fflush_r+0xc>
 8009424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009426:	f7fe fb19 	bl	8007a5c <__retarget_lock_release_recursive>
 800942a:	e7dd      	b.n	80093e8 <_fflush_r+0xc>

0800942c <_sbrk_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4d06      	ldr	r5, [pc, #24]	@ (8009448 <_sbrk_r+0x1c>)
 8009430:	2300      	movs	r3, #0
 8009432:	4604      	mov	r4, r0
 8009434:	4608      	mov	r0, r1
 8009436:	602b      	str	r3, [r5, #0]
 8009438:	f7f8 fc4c 	bl	8001cd4 <_sbrk>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	d102      	bne.n	8009446 <_sbrk_r+0x1a>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	b103      	cbz	r3, 8009446 <_sbrk_r+0x1a>
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	bd38      	pop	{r3, r4, r5, pc}
 8009448:	20000a0c 	.word	0x20000a0c

0800944c <__assert_func>:
 800944c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800944e:	4614      	mov	r4, r2
 8009450:	461a      	mov	r2, r3
 8009452:	4b09      	ldr	r3, [pc, #36]	@ (8009478 <__assert_func+0x2c>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4605      	mov	r5, r0
 8009458:	68d8      	ldr	r0, [r3, #12]
 800945a:	b14c      	cbz	r4, 8009470 <__assert_func+0x24>
 800945c:	4b07      	ldr	r3, [pc, #28]	@ (800947c <__assert_func+0x30>)
 800945e:	9100      	str	r1, [sp, #0]
 8009460:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009464:	4906      	ldr	r1, [pc, #24]	@ (8009480 <__assert_func+0x34>)
 8009466:	462b      	mov	r3, r5
 8009468:	f000 f870 	bl	800954c <fiprintf>
 800946c:	f000 f880 	bl	8009570 <abort>
 8009470:	4b04      	ldr	r3, [pc, #16]	@ (8009484 <__assert_func+0x38>)
 8009472:	461c      	mov	r4, r3
 8009474:	e7f3      	b.n	800945e <__assert_func+0x12>
 8009476:	bf00      	nop
 8009478:	2000002c 	.word	0x2000002c
 800947c:	0800aa11 	.word	0x0800aa11
 8009480:	0800aa1e 	.word	0x0800aa1e
 8009484:	0800aa4c 	.word	0x0800aa4c

08009488 <_calloc_r>:
 8009488:	b570      	push	{r4, r5, r6, lr}
 800948a:	fba1 5402 	umull	r5, r4, r1, r2
 800948e:	b934      	cbnz	r4, 800949e <_calloc_r+0x16>
 8009490:	4629      	mov	r1, r5
 8009492:	f7ff f9c1 	bl	8008818 <_malloc_r>
 8009496:	4606      	mov	r6, r0
 8009498:	b928      	cbnz	r0, 80094a6 <_calloc_r+0x1e>
 800949a:	4630      	mov	r0, r6
 800949c:	bd70      	pop	{r4, r5, r6, pc}
 800949e:	220c      	movs	r2, #12
 80094a0:	6002      	str	r2, [r0, #0]
 80094a2:	2600      	movs	r6, #0
 80094a4:	e7f9      	b.n	800949a <_calloc_r+0x12>
 80094a6:	462a      	mov	r2, r5
 80094a8:	4621      	mov	r1, r4
 80094aa:	f7fe fa58 	bl	800795e <memset>
 80094ae:	e7f4      	b.n	800949a <_calloc_r+0x12>

080094b0 <__ascii_mbtowc>:
 80094b0:	b082      	sub	sp, #8
 80094b2:	b901      	cbnz	r1, 80094b6 <__ascii_mbtowc+0x6>
 80094b4:	a901      	add	r1, sp, #4
 80094b6:	b142      	cbz	r2, 80094ca <__ascii_mbtowc+0x1a>
 80094b8:	b14b      	cbz	r3, 80094ce <__ascii_mbtowc+0x1e>
 80094ba:	7813      	ldrb	r3, [r2, #0]
 80094bc:	600b      	str	r3, [r1, #0]
 80094be:	7812      	ldrb	r2, [r2, #0]
 80094c0:	1e10      	subs	r0, r2, #0
 80094c2:	bf18      	it	ne
 80094c4:	2001      	movne	r0, #1
 80094c6:	b002      	add	sp, #8
 80094c8:	4770      	bx	lr
 80094ca:	4610      	mov	r0, r2
 80094cc:	e7fb      	b.n	80094c6 <__ascii_mbtowc+0x16>
 80094ce:	f06f 0001 	mvn.w	r0, #1
 80094d2:	e7f8      	b.n	80094c6 <__ascii_mbtowc+0x16>

080094d4 <_realloc_r>:
 80094d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d8:	4607      	mov	r7, r0
 80094da:	4614      	mov	r4, r2
 80094dc:	460d      	mov	r5, r1
 80094de:	b921      	cbnz	r1, 80094ea <_realloc_r+0x16>
 80094e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094e4:	4611      	mov	r1, r2
 80094e6:	f7ff b997 	b.w	8008818 <_malloc_r>
 80094ea:	b92a      	cbnz	r2, 80094f8 <_realloc_r+0x24>
 80094ec:	f7ff f920 	bl	8008730 <_free_r>
 80094f0:	4625      	mov	r5, r4
 80094f2:	4628      	mov	r0, r5
 80094f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094f8:	f000 f841 	bl	800957e <_malloc_usable_size_r>
 80094fc:	4284      	cmp	r4, r0
 80094fe:	4606      	mov	r6, r0
 8009500:	d802      	bhi.n	8009508 <_realloc_r+0x34>
 8009502:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009506:	d8f4      	bhi.n	80094f2 <_realloc_r+0x1e>
 8009508:	4621      	mov	r1, r4
 800950a:	4638      	mov	r0, r7
 800950c:	f7ff f984 	bl	8008818 <_malloc_r>
 8009510:	4680      	mov	r8, r0
 8009512:	b908      	cbnz	r0, 8009518 <_realloc_r+0x44>
 8009514:	4645      	mov	r5, r8
 8009516:	e7ec      	b.n	80094f2 <_realloc_r+0x1e>
 8009518:	42b4      	cmp	r4, r6
 800951a:	4622      	mov	r2, r4
 800951c:	4629      	mov	r1, r5
 800951e:	bf28      	it	cs
 8009520:	4632      	movcs	r2, r6
 8009522:	f7fe fa9c 	bl	8007a5e <memcpy>
 8009526:	4629      	mov	r1, r5
 8009528:	4638      	mov	r0, r7
 800952a:	f7ff f901 	bl	8008730 <_free_r>
 800952e:	e7f1      	b.n	8009514 <_realloc_r+0x40>

08009530 <__ascii_wctomb>:
 8009530:	4603      	mov	r3, r0
 8009532:	4608      	mov	r0, r1
 8009534:	b141      	cbz	r1, 8009548 <__ascii_wctomb+0x18>
 8009536:	2aff      	cmp	r2, #255	@ 0xff
 8009538:	d904      	bls.n	8009544 <__ascii_wctomb+0x14>
 800953a:	228a      	movs	r2, #138	@ 0x8a
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	f04f 30ff 	mov.w	r0, #4294967295
 8009542:	4770      	bx	lr
 8009544:	700a      	strb	r2, [r1, #0]
 8009546:	2001      	movs	r0, #1
 8009548:	4770      	bx	lr
	...

0800954c <fiprintf>:
 800954c:	b40e      	push	{r1, r2, r3}
 800954e:	b503      	push	{r0, r1, lr}
 8009550:	4601      	mov	r1, r0
 8009552:	ab03      	add	r3, sp, #12
 8009554:	4805      	ldr	r0, [pc, #20]	@ (800956c <fiprintf+0x20>)
 8009556:	f853 2b04 	ldr.w	r2, [r3], #4
 800955a:	6800      	ldr	r0, [r0, #0]
 800955c:	9301      	str	r3, [sp, #4]
 800955e:	f000 f83f 	bl	80095e0 <_vfiprintf_r>
 8009562:	b002      	add	sp, #8
 8009564:	f85d eb04 	ldr.w	lr, [sp], #4
 8009568:	b003      	add	sp, #12
 800956a:	4770      	bx	lr
 800956c:	2000002c 	.word	0x2000002c

08009570 <abort>:
 8009570:	b508      	push	{r3, lr}
 8009572:	2006      	movs	r0, #6
 8009574:	f000 fa08 	bl	8009988 <raise>
 8009578:	2001      	movs	r0, #1
 800957a:	f7f8 fb33 	bl	8001be4 <_exit>

0800957e <_malloc_usable_size_r>:
 800957e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009582:	1f18      	subs	r0, r3, #4
 8009584:	2b00      	cmp	r3, #0
 8009586:	bfbc      	itt	lt
 8009588:	580b      	ldrlt	r3, [r1, r0]
 800958a:	18c0      	addlt	r0, r0, r3
 800958c:	4770      	bx	lr

0800958e <__sfputc_r>:
 800958e:	6893      	ldr	r3, [r2, #8]
 8009590:	3b01      	subs	r3, #1
 8009592:	2b00      	cmp	r3, #0
 8009594:	b410      	push	{r4}
 8009596:	6093      	str	r3, [r2, #8]
 8009598:	da08      	bge.n	80095ac <__sfputc_r+0x1e>
 800959a:	6994      	ldr	r4, [r2, #24]
 800959c:	42a3      	cmp	r3, r4
 800959e:	db01      	blt.n	80095a4 <__sfputc_r+0x16>
 80095a0:	290a      	cmp	r1, #10
 80095a2:	d103      	bne.n	80095ac <__sfputc_r+0x1e>
 80095a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095a8:	f000 b932 	b.w	8009810 <__swbuf_r>
 80095ac:	6813      	ldr	r3, [r2, #0]
 80095ae:	1c58      	adds	r0, r3, #1
 80095b0:	6010      	str	r0, [r2, #0]
 80095b2:	7019      	strb	r1, [r3, #0]
 80095b4:	4608      	mov	r0, r1
 80095b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <__sfputs_r>:
 80095bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095be:	4606      	mov	r6, r0
 80095c0:	460f      	mov	r7, r1
 80095c2:	4614      	mov	r4, r2
 80095c4:	18d5      	adds	r5, r2, r3
 80095c6:	42ac      	cmp	r4, r5
 80095c8:	d101      	bne.n	80095ce <__sfputs_r+0x12>
 80095ca:	2000      	movs	r0, #0
 80095cc:	e007      	b.n	80095de <__sfputs_r+0x22>
 80095ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d2:	463a      	mov	r2, r7
 80095d4:	4630      	mov	r0, r6
 80095d6:	f7ff ffda 	bl	800958e <__sfputc_r>
 80095da:	1c43      	adds	r3, r0, #1
 80095dc:	d1f3      	bne.n	80095c6 <__sfputs_r+0xa>
 80095de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080095e0 <_vfiprintf_r>:
 80095e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	460d      	mov	r5, r1
 80095e6:	b09d      	sub	sp, #116	@ 0x74
 80095e8:	4614      	mov	r4, r2
 80095ea:	4698      	mov	r8, r3
 80095ec:	4606      	mov	r6, r0
 80095ee:	b118      	cbz	r0, 80095f8 <_vfiprintf_r+0x18>
 80095f0:	6a03      	ldr	r3, [r0, #32]
 80095f2:	b90b      	cbnz	r3, 80095f8 <_vfiprintf_r+0x18>
 80095f4:	f7fe f8ea 	bl	80077cc <__sinit>
 80095f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095fa:	07d9      	lsls	r1, r3, #31
 80095fc:	d405      	bmi.n	800960a <_vfiprintf_r+0x2a>
 80095fe:	89ab      	ldrh	r3, [r5, #12]
 8009600:	059a      	lsls	r2, r3, #22
 8009602:	d402      	bmi.n	800960a <_vfiprintf_r+0x2a>
 8009604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009606:	f7fe fa28 	bl	8007a5a <__retarget_lock_acquire_recursive>
 800960a:	89ab      	ldrh	r3, [r5, #12]
 800960c:	071b      	lsls	r3, r3, #28
 800960e:	d501      	bpl.n	8009614 <_vfiprintf_r+0x34>
 8009610:	692b      	ldr	r3, [r5, #16]
 8009612:	b99b      	cbnz	r3, 800963c <_vfiprintf_r+0x5c>
 8009614:	4629      	mov	r1, r5
 8009616:	4630      	mov	r0, r6
 8009618:	f000 f938 	bl	800988c <__swsetup_r>
 800961c:	b170      	cbz	r0, 800963c <_vfiprintf_r+0x5c>
 800961e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009620:	07dc      	lsls	r4, r3, #31
 8009622:	d504      	bpl.n	800962e <_vfiprintf_r+0x4e>
 8009624:	f04f 30ff 	mov.w	r0, #4294967295
 8009628:	b01d      	add	sp, #116	@ 0x74
 800962a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800962e:	89ab      	ldrh	r3, [r5, #12]
 8009630:	0598      	lsls	r0, r3, #22
 8009632:	d4f7      	bmi.n	8009624 <_vfiprintf_r+0x44>
 8009634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009636:	f7fe fa11 	bl	8007a5c <__retarget_lock_release_recursive>
 800963a:	e7f3      	b.n	8009624 <_vfiprintf_r+0x44>
 800963c:	2300      	movs	r3, #0
 800963e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009640:	2320      	movs	r3, #32
 8009642:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009646:	f8cd 800c 	str.w	r8, [sp, #12]
 800964a:	2330      	movs	r3, #48	@ 0x30
 800964c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80097fc <_vfiprintf_r+0x21c>
 8009650:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009654:	f04f 0901 	mov.w	r9, #1
 8009658:	4623      	mov	r3, r4
 800965a:	469a      	mov	sl, r3
 800965c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009660:	b10a      	cbz	r2, 8009666 <_vfiprintf_r+0x86>
 8009662:	2a25      	cmp	r2, #37	@ 0x25
 8009664:	d1f9      	bne.n	800965a <_vfiprintf_r+0x7a>
 8009666:	ebba 0b04 	subs.w	fp, sl, r4
 800966a:	d00b      	beq.n	8009684 <_vfiprintf_r+0xa4>
 800966c:	465b      	mov	r3, fp
 800966e:	4622      	mov	r2, r4
 8009670:	4629      	mov	r1, r5
 8009672:	4630      	mov	r0, r6
 8009674:	f7ff ffa2 	bl	80095bc <__sfputs_r>
 8009678:	3001      	adds	r0, #1
 800967a:	f000 80a7 	beq.w	80097cc <_vfiprintf_r+0x1ec>
 800967e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009680:	445a      	add	r2, fp
 8009682:	9209      	str	r2, [sp, #36]	@ 0x24
 8009684:	f89a 3000 	ldrb.w	r3, [sl]
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 809f 	beq.w	80097cc <_vfiprintf_r+0x1ec>
 800968e:	2300      	movs	r3, #0
 8009690:	f04f 32ff 	mov.w	r2, #4294967295
 8009694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009698:	f10a 0a01 	add.w	sl, sl, #1
 800969c:	9304      	str	r3, [sp, #16]
 800969e:	9307      	str	r3, [sp, #28]
 80096a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80096a6:	4654      	mov	r4, sl
 80096a8:	2205      	movs	r2, #5
 80096aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ae:	4853      	ldr	r0, [pc, #332]	@ (80097fc <_vfiprintf_r+0x21c>)
 80096b0:	f7f6 fdb6 	bl	8000220 <memchr>
 80096b4:	9a04      	ldr	r2, [sp, #16]
 80096b6:	b9d8      	cbnz	r0, 80096f0 <_vfiprintf_r+0x110>
 80096b8:	06d1      	lsls	r1, r2, #27
 80096ba:	bf44      	itt	mi
 80096bc:	2320      	movmi	r3, #32
 80096be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096c2:	0713      	lsls	r3, r2, #28
 80096c4:	bf44      	itt	mi
 80096c6:	232b      	movmi	r3, #43	@ 0x2b
 80096c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096cc:	f89a 3000 	ldrb.w	r3, [sl]
 80096d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80096d2:	d015      	beq.n	8009700 <_vfiprintf_r+0x120>
 80096d4:	9a07      	ldr	r2, [sp, #28]
 80096d6:	4654      	mov	r4, sl
 80096d8:	2000      	movs	r0, #0
 80096da:	f04f 0c0a 	mov.w	ip, #10
 80096de:	4621      	mov	r1, r4
 80096e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096e4:	3b30      	subs	r3, #48	@ 0x30
 80096e6:	2b09      	cmp	r3, #9
 80096e8:	d94b      	bls.n	8009782 <_vfiprintf_r+0x1a2>
 80096ea:	b1b0      	cbz	r0, 800971a <_vfiprintf_r+0x13a>
 80096ec:	9207      	str	r2, [sp, #28]
 80096ee:	e014      	b.n	800971a <_vfiprintf_r+0x13a>
 80096f0:	eba0 0308 	sub.w	r3, r0, r8
 80096f4:	fa09 f303 	lsl.w	r3, r9, r3
 80096f8:	4313      	orrs	r3, r2
 80096fa:	9304      	str	r3, [sp, #16]
 80096fc:	46a2      	mov	sl, r4
 80096fe:	e7d2      	b.n	80096a6 <_vfiprintf_r+0xc6>
 8009700:	9b03      	ldr	r3, [sp, #12]
 8009702:	1d19      	adds	r1, r3, #4
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	9103      	str	r1, [sp, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	bfbb      	ittet	lt
 800970c:	425b      	neglt	r3, r3
 800970e:	f042 0202 	orrlt.w	r2, r2, #2
 8009712:	9307      	strge	r3, [sp, #28]
 8009714:	9307      	strlt	r3, [sp, #28]
 8009716:	bfb8      	it	lt
 8009718:	9204      	strlt	r2, [sp, #16]
 800971a:	7823      	ldrb	r3, [r4, #0]
 800971c:	2b2e      	cmp	r3, #46	@ 0x2e
 800971e:	d10a      	bne.n	8009736 <_vfiprintf_r+0x156>
 8009720:	7863      	ldrb	r3, [r4, #1]
 8009722:	2b2a      	cmp	r3, #42	@ 0x2a
 8009724:	d132      	bne.n	800978c <_vfiprintf_r+0x1ac>
 8009726:	9b03      	ldr	r3, [sp, #12]
 8009728:	1d1a      	adds	r2, r3, #4
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	9203      	str	r2, [sp, #12]
 800972e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009732:	3402      	adds	r4, #2
 8009734:	9305      	str	r3, [sp, #20]
 8009736:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800980c <_vfiprintf_r+0x22c>
 800973a:	7821      	ldrb	r1, [r4, #0]
 800973c:	2203      	movs	r2, #3
 800973e:	4650      	mov	r0, sl
 8009740:	f7f6 fd6e 	bl	8000220 <memchr>
 8009744:	b138      	cbz	r0, 8009756 <_vfiprintf_r+0x176>
 8009746:	9b04      	ldr	r3, [sp, #16]
 8009748:	eba0 000a 	sub.w	r0, r0, sl
 800974c:	2240      	movs	r2, #64	@ 0x40
 800974e:	4082      	lsls	r2, r0
 8009750:	4313      	orrs	r3, r2
 8009752:	3401      	adds	r4, #1
 8009754:	9304      	str	r3, [sp, #16]
 8009756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975a:	4829      	ldr	r0, [pc, #164]	@ (8009800 <_vfiprintf_r+0x220>)
 800975c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009760:	2206      	movs	r2, #6
 8009762:	f7f6 fd5d 	bl	8000220 <memchr>
 8009766:	2800      	cmp	r0, #0
 8009768:	d03f      	beq.n	80097ea <_vfiprintf_r+0x20a>
 800976a:	4b26      	ldr	r3, [pc, #152]	@ (8009804 <_vfiprintf_r+0x224>)
 800976c:	bb1b      	cbnz	r3, 80097b6 <_vfiprintf_r+0x1d6>
 800976e:	9b03      	ldr	r3, [sp, #12]
 8009770:	3307      	adds	r3, #7
 8009772:	f023 0307 	bic.w	r3, r3, #7
 8009776:	3308      	adds	r3, #8
 8009778:	9303      	str	r3, [sp, #12]
 800977a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800977c:	443b      	add	r3, r7
 800977e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009780:	e76a      	b.n	8009658 <_vfiprintf_r+0x78>
 8009782:	fb0c 3202 	mla	r2, ip, r2, r3
 8009786:	460c      	mov	r4, r1
 8009788:	2001      	movs	r0, #1
 800978a:	e7a8      	b.n	80096de <_vfiprintf_r+0xfe>
 800978c:	2300      	movs	r3, #0
 800978e:	3401      	adds	r4, #1
 8009790:	9305      	str	r3, [sp, #20]
 8009792:	4619      	mov	r1, r3
 8009794:	f04f 0c0a 	mov.w	ip, #10
 8009798:	4620      	mov	r0, r4
 800979a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800979e:	3a30      	subs	r2, #48	@ 0x30
 80097a0:	2a09      	cmp	r2, #9
 80097a2:	d903      	bls.n	80097ac <_vfiprintf_r+0x1cc>
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d0c6      	beq.n	8009736 <_vfiprintf_r+0x156>
 80097a8:	9105      	str	r1, [sp, #20]
 80097aa:	e7c4      	b.n	8009736 <_vfiprintf_r+0x156>
 80097ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80097b0:	4604      	mov	r4, r0
 80097b2:	2301      	movs	r3, #1
 80097b4:	e7f0      	b.n	8009798 <_vfiprintf_r+0x1b8>
 80097b6:	ab03      	add	r3, sp, #12
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	462a      	mov	r2, r5
 80097bc:	4b12      	ldr	r3, [pc, #72]	@ (8009808 <_vfiprintf_r+0x228>)
 80097be:	a904      	add	r1, sp, #16
 80097c0:	4630      	mov	r0, r6
 80097c2:	f7fd fbc1 	bl	8006f48 <_printf_float>
 80097c6:	4607      	mov	r7, r0
 80097c8:	1c78      	adds	r0, r7, #1
 80097ca:	d1d6      	bne.n	800977a <_vfiprintf_r+0x19a>
 80097cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097ce:	07d9      	lsls	r1, r3, #31
 80097d0:	d405      	bmi.n	80097de <_vfiprintf_r+0x1fe>
 80097d2:	89ab      	ldrh	r3, [r5, #12]
 80097d4:	059a      	lsls	r2, r3, #22
 80097d6:	d402      	bmi.n	80097de <_vfiprintf_r+0x1fe>
 80097d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097da:	f7fe f93f 	bl	8007a5c <__retarget_lock_release_recursive>
 80097de:	89ab      	ldrh	r3, [r5, #12]
 80097e0:	065b      	lsls	r3, r3, #25
 80097e2:	f53f af1f 	bmi.w	8009624 <_vfiprintf_r+0x44>
 80097e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097e8:	e71e      	b.n	8009628 <_vfiprintf_r+0x48>
 80097ea:	ab03      	add	r3, sp, #12
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	462a      	mov	r2, r5
 80097f0:	4b05      	ldr	r3, [pc, #20]	@ (8009808 <_vfiprintf_r+0x228>)
 80097f2:	a904      	add	r1, sp, #16
 80097f4:	4630      	mov	r0, r6
 80097f6:	f7fd fe3f 	bl	8007478 <_printf_i>
 80097fa:	e7e4      	b.n	80097c6 <_vfiprintf_r+0x1e6>
 80097fc:	0800a9f6 	.word	0x0800a9f6
 8009800:	0800aa00 	.word	0x0800aa00
 8009804:	08006f49 	.word	0x08006f49
 8009808:	080095bd 	.word	0x080095bd
 800980c:	0800a9fc 	.word	0x0800a9fc

08009810 <__swbuf_r>:
 8009810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009812:	460e      	mov	r6, r1
 8009814:	4614      	mov	r4, r2
 8009816:	4605      	mov	r5, r0
 8009818:	b118      	cbz	r0, 8009822 <__swbuf_r+0x12>
 800981a:	6a03      	ldr	r3, [r0, #32]
 800981c:	b90b      	cbnz	r3, 8009822 <__swbuf_r+0x12>
 800981e:	f7fd ffd5 	bl	80077cc <__sinit>
 8009822:	69a3      	ldr	r3, [r4, #24]
 8009824:	60a3      	str	r3, [r4, #8]
 8009826:	89a3      	ldrh	r3, [r4, #12]
 8009828:	071a      	lsls	r2, r3, #28
 800982a:	d501      	bpl.n	8009830 <__swbuf_r+0x20>
 800982c:	6923      	ldr	r3, [r4, #16]
 800982e:	b943      	cbnz	r3, 8009842 <__swbuf_r+0x32>
 8009830:	4621      	mov	r1, r4
 8009832:	4628      	mov	r0, r5
 8009834:	f000 f82a 	bl	800988c <__swsetup_r>
 8009838:	b118      	cbz	r0, 8009842 <__swbuf_r+0x32>
 800983a:	f04f 37ff 	mov.w	r7, #4294967295
 800983e:	4638      	mov	r0, r7
 8009840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009842:	6823      	ldr	r3, [r4, #0]
 8009844:	6922      	ldr	r2, [r4, #16]
 8009846:	1a98      	subs	r0, r3, r2
 8009848:	6963      	ldr	r3, [r4, #20]
 800984a:	b2f6      	uxtb	r6, r6
 800984c:	4283      	cmp	r3, r0
 800984e:	4637      	mov	r7, r6
 8009850:	dc05      	bgt.n	800985e <__swbuf_r+0x4e>
 8009852:	4621      	mov	r1, r4
 8009854:	4628      	mov	r0, r5
 8009856:	f7ff fdc1 	bl	80093dc <_fflush_r>
 800985a:	2800      	cmp	r0, #0
 800985c:	d1ed      	bne.n	800983a <__swbuf_r+0x2a>
 800985e:	68a3      	ldr	r3, [r4, #8]
 8009860:	3b01      	subs	r3, #1
 8009862:	60a3      	str	r3, [r4, #8]
 8009864:	6823      	ldr	r3, [r4, #0]
 8009866:	1c5a      	adds	r2, r3, #1
 8009868:	6022      	str	r2, [r4, #0]
 800986a:	701e      	strb	r6, [r3, #0]
 800986c:	6962      	ldr	r2, [r4, #20]
 800986e:	1c43      	adds	r3, r0, #1
 8009870:	429a      	cmp	r2, r3
 8009872:	d004      	beq.n	800987e <__swbuf_r+0x6e>
 8009874:	89a3      	ldrh	r3, [r4, #12]
 8009876:	07db      	lsls	r3, r3, #31
 8009878:	d5e1      	bpl.n	800983e <__swbuf_r+0x2e>
 800987a:	2e0a      	cmp	r6, #10
 800987c:	d1df      	bne.n	800983e <__swbuf_r+0x2e>
 800987e:	4621      	mov	r1, r4
 8009880:	4628      	mov	r0, r5
 8009882:	f7ff fdab 	bl	80093dc <_fflush_r>
 8009886:	2800      	cmp	r0, #0
 8009888:	d0d9      	beq.n	800983e <__swbuf_r+0x2e>
 800988a:	e7d6      	b.n	800983a <__swbuf_r+0x2a>

0800988c <__swsetup_r>:
 800988c:	b538      	push	{r3, r4, r5, lr}
 800988e:	4b29      	ldr	r3, [pc, #164]	@ (8009934 <__swsetup_r+0xa8>)
 8009890:	4605      	mov	r5, r0
 8009892:	6818      	ldr	r0, [r3, #0]
 8009894:	460c      	mov	r4, r1
 8009896:	b118      	cbz	r0, 80098a0 <__swsetup_r+0x14>
 8009898:	6a03      	ldr	r3, [r0, #32]
 800989a:	b90b      	cbnz	r3, 80098a0 <__swsetup_r+0x14>
 800989c:	f7fd ff96 	bl	80077cc <__sinit>
 80098a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098a4:	0719      	lsls	r1, r3, #28
 80098a6:	d422      	bmi.n	80098ee <__swsetup_r+0x62>
 80098a8:	06da      	lsls	r2, r3, #27
 80098aa:	d407      	bmi.n	80098bc <__swsetup_r+0x30>
 80098ac:	2209      	movs	r2, #9
 80098ae:	602a      	str	r2, [r5, #0]
 80098b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098b4:	81a3      	strh	r3, [r4, #12]
 80098b6:	f04f 30ff 	mov.w	r0, #4294967295
 80098ba:	e033      	b.n	8009924 <__swsetup_r+0x98>
 80098bc:	0758      	lsls	r0, r3, #29
 80098be:	d512      	bpl.n	80098e6 <__swsetup_r+0x5a>
 80098c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098c2:	b141      	cbz	r1, 80098d6 <__swsetup_r+0x4a>
 80098c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098c8:	4299      	cmp	r1, r3
 80098ca:	d002      	beq.n	80098d2 <__swsetup_r+0x46>
 80098cc:	4628      	mov	r0, r5
 80098ce:	f7fe ff2f 	bl	8008730 <_free_r>
 80098d2:	2300      	movs	r3, #0
 80098d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098dc:	81a3      	strh	r3, [r4, #12]
 80098de:	2300      	movs	r3, #0
 80098e0:	6063      	str	r3, [r4, #4]
 80098e2:	6923      	ldr	r3, [r4, #16]
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	f043 0308 	orr.w	r3, r3, #8
 80098ec:	81a3      	strh	r3, [r4, #12]
 80098ee:	6923      	ldr	r3, [r4, #16]
 80098f0:	b94b      	cbnz	r3, 8009906 <__swsetup_r+0x7a>
 80098f2:	89a3      	ldrh	r3, [r4, #12]
 80098f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098fc:	d003      	beq.n	8009906 <__swsetup_r+0x7a>
 80098fe:	4621      	mov	r1, r4
 8009900:	4628      	mov	r0, r5
 8009902:	f000 f883 	bl	8009a0c <__smakebuf_r>
 8009906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800990a:	f013 0201 	ands.w	r2, r3, #1
 800990e:	d00a      	beq.n	8009926 <__swsetup_r+0x9a>
 8009910:	2200      	movs	r2, #0
 8009912:	60a2      	str	r2, [r4, #8]
 8009914:	6962      	ldr	r2, [r4, #20]
 8009916:	4252      	negs	r2, r2
 8009918:	61a2      	str	r2, [r4, #24]
 800991a:	6922      	ldr	r2, [r4, #16]
 800991c:	b942      	cbnz	r2, 8009930 <__swsetup_r+0xa4>
 800991e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009922:	d1c5      	bne.n	80098b0 <__swsetup_r+0x24>
 8009924:	bd38      	pop	{r3, r4, r5, pc}
 8009926:	0799      	lsls	r1, r3, #30
 8009928:	bf58      	it	pl
 800992a:	6962      	ldrpl	r2, [r4, #20]
 800992c:	60a2      	str	r2, [r4, #8]
 800992e:	e7f4      	b.n	800991a <__swsetup_r+0x8e>
 8009930:	2000      	movs	r0, #0
 8009932:	e7f7      	b.n	8009924 <__swsetup_r+0x98>
 8009934:	2000002c 	.word	0x2000002c

08009938 <_raise_r>:
 8009938:	291f      	cmp	r1, #31
 800993a:	b538      	push	{r3, r4, r5, lr}
 800993c:	4605      	mov	r5, r0
 800993e:	460c      	mov	r4, r1
 8009940:	d904      	bls.n	800994c <_raise_r+0x14>
 8009942:	2316      	movs	r3, #22
 8009944:	6003      	str	r3, [r0, #0]
 8009946:	f04f 30ff 	mov.w	r0, #4294967295
 800994a:	bd38      	pop	{r3, r4, r5, pc}
 800994c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800994e:	b112      	cbz	r2, 8009956 <_raise_r+0x1e>
 8009950:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009954:	b94b      	cbnz	r3, 800996a <_raise_r+0x32>
 8009956:	4628      	mov	r0, r5
 8009958:	f000 f830 	bl	80099bc <_getpid_r>
 800995c:	4622      	mov	r2, r4
 800995e:	4601      	mov	r1, r0
 8009960:	4628      	mov	r0, r5
 8009962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009966:	f000 b817 	b.w	8009998 <_kill_r>
 800996a:	2b01      	cmp	r3, #1
 800996c:	d00a      	beq.n	8009984 <_raise_r+0x4c>
 800996e:	1c59      	adds	r1, r3, #1
 8009970:	d103      	bne.n	800997a <_raise_r+0x42>
 8009972:	2316      	movs	r3, #22
 8009974:	6003      	str	r3, [r0, #0]
 8009976:	2001      	movs	r0, #1
 8009978:	e7e7      	b.n	800994a <_raise_r+0x12>
 800997a:	2100      	movs	r1, #0
 800997c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009980:	4620      	mov	r0, r4
 8009982:	4798      	blx	r3
 8009984:	2000      	movs	r0, #0
 8009986:	e7e0      	b.n	800994a <_raise_r+0x12>

08009988 <raise>:
 8009988:	4b02      	ldr	r3, [pc, #8]	@ (8009994 <raise+0xc>)
 800998a:	4601      	mov	r1, r0
 800998c:	6818      	ldr	r0, [r3, #0]
 800998e:	f7ff bfd3 	b.w	8009938 <_raise_r>
 8009992:	bf00      	nop
 8009994:	2000002c 	.word	0x2000002c

08009998 <_kill_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4d07      	ldr	r5, [pc, #28]	@ (80099b8 <_kill_r+0x20>)
 800999c:	2300      	movs	r3, #0
 800999e:	4604      	mov	r4, r0
 80099a0:	4608      	mov	r0, r1
 80099a2:	4611      	mov	r1, r2
 80099a4:	602b      	str	r3, [r5, #0]
 80099a6:	f7f8 f90d 	bl	8001bc4 <_kill>
 80099aa:	1c43      	adds	r3, r0, #1
 80099ac:	d102      	bne.n	80099b4 <_kill_r+0x1c>
 80099ae:	682b      	ldr	r3, [r5, #0]
 80099b0:	b103      	cbz	r3, 80099b4 <_kill_r+0x1c>
 80099b2:	6023      	str	r3, [r4, #0]
 80099b4:	bd38      	pop	{r3, r4, r5, pc}
 80099b6:	bf00      	nop
 80099b8:	20000a0c 	.word	0x20000a0c

080099bc <_getpid_r>:
 80099bc:	f7f8 b8fa 	b.w	8001bb4 <_getpid>

080099c0 <__swhatbuf_r>:
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	460c      	mov	r4, r1
 80099c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c8:	2900      	cmp	r1, #0
 80099ca:	b096      	sub	sp, #88	@ 0x58
 80099cc:	4615      	mov	r5, r2
 80099ce:	461e      	mov	r6, r3
 80099d0:	da0d      	bge.n	80099ee <__swhatbuf_r+0x2e>
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80099d8:	f04f 0100 	mov.w	r1, #0
 80099dc:	bf14      	ite	ne
 80099de:	2340      	movne	r3, #64	@ 0x40
 80099e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80099e4:	2000      	movs	r0, #0
 80099e6:	6031      	str	r1, [r6, #0]
 80099e8:	602b      	str	r3, [r5, #0]
 80099ea:	b016      	add	sp, #88	@ 0x58
 80099ec:	bd70      	pop	{r4, r5, r6, pc}
 80099ee:	466a      	mov	r2, sp
 80099f0:	f000 f848 	bl	8009a84 <_fstat_r>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	dbec      	blt.n	80099d2 <__swhatbuf_r+0x12>
 80099f8:	9901      	ldr	r1, [sp, #4]
 80099fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80099fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a02:	4259      	negs	r1, r3
 8009a04:	4159      	adcs	r1, r3
 8009a06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a0a:	e7eb      	b.n	80099e4 <__swhatbuf_r+0x24>

08009a0c <__smakebuf_r>:
 8009a0c:	898b      	ldrh	r3, [r1, #12]
 8009a0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a10:	079d      	lsls	r5, r3, #30
 8009a12:	4606      	mov	r6, r0
 8009a14:	460c      	mov	r4, r1
 8009a16:	d507      	bpl.n	8009a28 <__smakebuf_r+0x1c>
 8009a18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	6123      	str	r3, [r4, #16]
 8009a20:	2301      	movs	r3, #1
 8009a22:	6163      	str	r3, [r4, #20]
 8009a24:	b003      	add	sp, #12
 8009a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a28:	ab01      	add	r3, sp, #4
 8009a2a:	466a      	mov	r2, sp
 8009a2c:	f7ff ffc8 	bl	80099c0 <__swhatbuf_r>
 8009a30:	9f00      	ldr	r7, [sp, #0]
 8009a32:	4605      	mov	r5, r0
 8009a34:	4639      	mov	r1, r7
 8009a36:	4630      	mov	r0, r6
 8009a38:	f7fe feee 	bl	8008818 <_malloc_r>
 8009a3c:	b948      	cbnz	r0, 8009a52 <__smakebuf_r+0x46>
 8009a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a42:	059a      	lsls	r2, r3, #22
 8009a44:	d4ee      	bmi.n	8009a24 <__smakebuf_r+0x18>
 8009a46:	f023 0303 	bic.w	r3, r3, #3
 8009a4a:	f043 0302 	orr.w	r3, r3, #2
 8009a4e:	81a3      	strh	r3, [r4, #12]
 8009a50:	e7e2      	b.n	8009a18 <__smakebuf_r+0xc>
 8009a52:	89a3      	ldrh	r3, [r4, #12]
 8009a54:	6020      	str	r0, [r4, #0]
 8009a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a5a:	81a3      	strh	r3, [r4, #12]
 8009a5c:	9b01      	ldr	r3, [sp, #4]
 8009a5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a62:	b15b      	cbz	r3, 8009a7c <__smakebuf_r+0x70>
 8009a64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a68:	4630      	mov	r0, r6
 8009a6a:	f000 f81d 	bl	8009aa8 <_isatty_r>
 8009a6e:	b128      	cbz	r0, 8009a7c <__smakebuf_r+0x70>
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	f023 0303 	bic.w	r3, r3, #3
 8009a76:	f043 0301 	orr.w	r3, r3, #1
 8009a7a:	81a3      	strh	r3, [r4, #12]
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	431d      	orrs	r5, r3
 8009a80:	81a5      	strh	r5, [r4, #12]
 8009a82:	e7cf      	b.n	8009a24 <__smakebuf_r+0x18>

08009a84 <_fstat_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	4d07      	ldr	r5, [pc, #28]	@ (8009aa4 <_fstat_r+0x20>)
 8009a88:	2300      	movs	r3, #0
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	4608      	mov	r0, r1
 8009a8e:	4611      	mov	r1, r2
 8009a90:	602b      	str	r3, [r5, #0]
 8009a92:	f7f8 f8f7 	bl	8001c84 <_fstat>
 8009a96:	1c43      	adds	r3, r0, #1
 8009a98:	d102      	bne.n	8009aa0 <_fstat_r+0x1c>
 8009a9a:	682b      	ldr	r3, [r5, #0]
 8009a9c:	b103      	cbz	r3, 8009aa0 <_fstat_r+0x1c>
 8009a9e:	6023      	str	r3, [r4, #0]
 8009aa0:	bd38      	pop	{r3, r4, r5, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20000a0c 	.word	0x20000a0c

08009aa8 <_isatty_r>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	4d06      	ldr	r5, [pc, #24]	@ (8009ac4 <_isatty_r+0x1c>)
 8009aac:	2300      	movs	r3, #0
 8009aae:	4604      	mov	r4, r0
 8009ab0:	4608      	mov	r0, r1
 8009ab2:	602b      	str	r3, [r5, #0]
 8009ab4:	f7f8 f8f6 	bl	8001ca4 <_isatty>
 8009ab8:	1c43      	adds	r3, r0, #1
 8009aba:	d102      	bne.n	8009ac2 <_isatty_r+0x1a>
 8009abc:	682b      	ldr	r3, [r5, #0]
 8009abe:	b103      	cbz	r3, 8009ac2 <_isatty_r+0x1a>
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	bd38      	pop	{r3, r4, r5, pc}
 8009ac4:	20000a0c 	.word	0x20000a0c

08009ac8 <_init>:
 8009ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aca:	bf00      	nop
 8009acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ace:	bc08      	pop	{r3}
 8009ad0:	469e      	mov	lr, r3
 8009ad2:	4770      	bx	lr

08009ad4 <_fini>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	bf00      	nop
 8009ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ada:	bc08      	pop	{r3}
 8009adc:	469e      	mov	lr, r3
 8009ade:	4770      	bx	lr
