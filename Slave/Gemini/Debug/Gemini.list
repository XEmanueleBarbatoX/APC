
Gemini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009878  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ef4  08009a58  08009a58  0000aa58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b94c  0800b94c  0000d1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b94c  0800b94c  0000c94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b954  0800b954  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b954  0800b954  0000c954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b958  0800b958  0000c958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800b95c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000834  200001e8  0800bb44  0000d1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a1c  0800bb44  0000da1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013de4  00000000  00000000  0000d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d1e  00000000  00000000  00020ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00023d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c38  00000000  00000000  00024d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271d5  00000000  00000000  00025940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149af  00000000  00000000  0004cb15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000effde  00000000  00000000  000614c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001514a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005244  00000000  00000000  001514e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0015672c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009a40 	.word	0x08009a40

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	08009a40 	.word	0x08009a40

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Ridefinizione Callback di ricezione UART (interrupt)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    // if (huart->Instance == USART1 && system_state == STATE_WAIT_RESPONSE) {
	// if (huart->Instance == USART1) {
	if (huart->Instance == USART1) {
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a08      	ldr	r2, [pc, #32]	@ (8000f54 <HAL_UART_RxCpltCallback+0x30>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d10a      	bne.n	8000f4c <HAL_UART_RxCpltCallback+0x28>
        // terminatore stringa
        //rxBuf[8] = '\0';
        system_state = STATE_RESPONSE_RECEIVED;
 8000f36:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <HAL_UART_RxCpltCallback+0x34>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	701a      	strb	r2, [r3, #0]
        rx_data_ready = 1;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <HAL_UART_RxCpltCallback+0x38>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]

        // Preparazione USART prossima ricezione
        HAL_UART_Receive_IT(&huart1, rxBuf, 8);
 8000f42:	2208      	movs	r2, #8
 8000f44:	4906      	ldr	r1, [pc, #24]	@ (8000f60 <HAL_UART_RxCpltCallback+0x3c>)
 8000f46:	4807      	ldr	r0, [pc, #28]	@ (8000f64 <HAL_UART_RxCpltCallback+0x40>)
 8000f48:	f003 feb0 	bl	8004cac <HAL_UART_Receive_IT>
    }
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40013800 	.word	0x40013800
 8000f58:	200004a8 	.word	0x200004a8
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	200004ac 	.word	0x200004ac
 8000f64:	20000380 	.word	0x20000380

08000f68 <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER && system_state == STATE_RESPONSE_RECEIVED)
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d118      	bne.n	8000faa <BSP_PB_Callback+0x42>
 8000f78:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <BSP_PB_Callback+0x4c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d113      	bne.n	8000faa <BSP_PB_Callback+0x42>
  {
    uint32_t now = HAL_GetTick();
 8000f82:	f001 fa3d 	bl	8002400 <HAL_GetTick>
 8000f86:	60f8      	str	r0, [r7, #12]
    if (now - lastPress > 200) // debounce delay 200 ms
 8000f88:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <BSP_PB_Callback+0x50>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2bc8      	cmp	r3, #200	@ 0xc8
 8000f92:	d90a      	bls.n	8000faa <BSP_PB_Callback+0x42>
    {
      lastPress = now;
 8000f94:	4a08      	ldr	r2, [pc, #32]	@ (8000fb8 <BSP_PB_Callback+0x50>)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6013      	str	r3, [r2, #0]
      system_state = STATE_NORMAL;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <BSP_PB_Callback+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2120      	movs	r1, #32
 8000fa4:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <BSP_PB_Callback+0x54>)
 8000fa6:	f001 fe0b 	bl	8002bc0 <HAL_GPIO_WritePin>

    }
  }
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200004a8 	.word	0x200004a8
 8000fb8:	200004b4 	.word	0x200004b4
 8000fbc:	48000400 	.word	0x48000400

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b092      	sub	sp, #72	@ 0x48
 8000fc4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  int cont = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float soglia = 30.0f;
 8000fca:	4ba9      	ldr	r3, [pc, #676]	@ (8001270 <main+0x2b0>)
 8000fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fce:	f001 f9b2 	bl	8002336 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd2:	f000 f96d 	bl	80012b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd6:	f000 fb25 	bl	8001624 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fda:	f000 f9b5 	bl	8001348 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000fde:	f000 fad5 	bl	800158c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000fe2:	f000 fa87 	bl	80014f4 <MX_USART1_UART_Init>
  MX_UART5_Init();
 8000fe6:	f000 fa39 	bl	800145c <MX_UART5_Init>
  MX_LPUART1_UART_Init();
 8000fea:	f000 f9ed 	bl	80013c8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	2025      	movs	r0, #37	@ 0x25
 8000ff4:	f001 fb0d 	bl	8002612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ff8:	2025      	movs	r0, #37	@ 0x25
 8000ffa:	f001 fb24 	bl	8002646 <HAL_NVIC_EnableIRQ>

  // Preparazione USART
  // __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
  HAL_UART_Receive_IT(&huart1, rxBuf, 8);
 8000ffe:	2208      	movs	r2, #8
 8001000:	499c      	ldr	r1, [pc, #624]	@ (8001274 <main+0x2b4>)
 8001002:	489d      	ldr	r0, [pc, #628]	@ (8001278 <main+0x2b8>)
 8001004:	f003 fe52 	bl	8004cac <HAL_UART_Receive_IT>
  ssd1306_Init();
 8001008:	f000 feae 	bl	8001d68 <ssd1306_Init>

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 800100c:	2000      	movs	r0, #0
 800100e:	f001 f8d5 	bl	80021bc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001012:	2101      	movs	r1, #1
 8001014:	2000      	movs	r0, #0
 8001016:	f001 f907 	bl	8002228 <BSP_PB_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if (rx_data_ready == 1){
 800101a:	4b98      	ldr	r3, [pc, #608]	@ (800127c <main+0x2bc>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b01      	cmp	r3, #1
 8001022:	d10a      	bne.n	800103a <main+0x7a>

		  rx_data_ready = 0;
 8001024:	4b95      	ldr	r3, [pc, #596]	@ (800127c <main+0x2bc>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]

		  if (system_state == STATE_WAIT_RESPONSE){
 800102a:	4b95      	ldr	r3, [pc, #596]	@ (8001280 <main+0x2c0>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b01      	cmp	r3, #1
 8001032:	d102      	bne.n	800103a <main+0x7a>
			  system_state = STATE_RESPONSE_RECEIVED;
 8001034:	4b92      	ldr	r3, [pc, #584]	@ (8001280 <main+0x2c0>)
 8001036:	2202      	movs	r2, #2
 8001038:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  switch(system_state) {
 800103a:	4b91      	ldr	r3, [pc, #580]	@ (8001280 <main+0x2c0>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	f000 80f6 	beq.w	8001232 <main+0x272>
 8001046:	2b02      	cmp	r3, #2
 8001048:	f300 810f 	bgt.w	800126a <main+0x2aa>
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <main+0x98>
 8001050:	2b01      	cmp	r3, #1
 8001052:	f000 809b 	beq.w	800118c <main+0x1cc>

	                  break;
	              }

	              default: {
	            	  break;
 8001056:	e108      	b.n	800126a <main+0x2aa>
	                  uint8_t cmd = REG_TEMP;
 8001058:	2300      	movs	r3, #0
 800105a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	                  if (HAL_I2C_Master_Transmit(&hi2c1, LM75A, &cmd, 1, HAL_MAX_DELAY) == HAL_OK) {
 800105e:	2390      	movs	r3, #144	@ 0x90
 8001060:	4619      	mov	r1, r3
 8001062:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	4885      	ldr	r0, [pc, #532]	@ (8001284 <main+0x2c4>)
 8001070:	f001 fe5a 	bl	8002d28 <HAL_I2C_Master_Transmit>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	f040 8084 	bne.w	8001184 <main+0x1c4>
	                      if (HAL_I2C_Master_Receive(&hi2c1, LM75A, data, 2, HAL_MAX_DELAY) == HAL_OK) {
 800107c:	2390      	movs	r3, #144	@ 0x90
 800107e:	4619      	mov	r1, r3
 8001080:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2302      	movs	r3, #2
 800108c:	487d      	ldr	r0, [pc, #500]	@ (8001284 <main+0x2c4>)
 800108e:	f001 ff63 	bl	8002f58 <HAL_I2C_Master_Receive>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d175      	bne.n	8001184 <main+0x1c4>
	                          int16_t raw = ((int16_t)data[0] << 8) | data[1];
 8001098:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800109c:	b21b      	sxth	r3, r3
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	                          raw >>= 5;
 80010ac:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80010b0:	115b      	asrs	r3, r3, #5
 80010b2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	                          float temp = raw * 0.125f;
 80010b4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80010b8:	ee07 3a90 	vmov	s15, r3
 80010bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c0:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 80010c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	                          snprintf(temp_s, sizeof(temp_s), "T: %.2f C", temp);
 80010cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80010ce:	f7ff fa63 	bl	8000598 <__aeabi_f2d>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	f107 0014 	add.w	r0, r7, #20
 80010da:	e9cd 2300 	strd	r2, r3, [sp]
 80010de:	4a6a      	ldr	r2, [pc, #424]	@ (8001288 <main+0x2c8>)
 80010e0:	2110      	movs	r1, #16
 80010e2:	f006 fb67 	bl	80077b4 <sniprintf>
	                          ssd1306_Fill(Black);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 fea8 	bl	8001e3c <ssd1306_Fill>
	                          ssd1306_SetCursor(2, 2);
 80010ec:	2102      	movs	r1, #2
 80010ee:	2002      	movs	r0, #2
 80010f0:	f000 fff0 	bl	80020d4 <ssd1306_SetCursor>
	                          ssd1306_WriteString("Temperatura corrente:", Font_6x8, White);
 80010f4:	4b65      	ldr	r3, [pc, #404]	@ (800128c <main+0x2cc>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	9200      	str	r2, [sp, #0]
 80010fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010fc:	4864      	ldr	r0, [pc, #400]	@ (8001290 <main+0x2d0>)
 80010fe:	f000 ffc3 	bl	8002088 <ssd1306_WriteString>
	                          ssd1306_SetCursor(2, 20);
 8001102:	2114      	movs	r1, #20
 8001104:	2002      	movs	r0, #2
 8001106:	f000 ffe5 	bl	80020d4 <ssd1306_SetCursor>
	                          ssd1306_WriteString(temp_s, Font_7x10, Black);
 800110a:	4b62      	ldr	r3, [pc, #392]	@ (8001294 <main+0x2d4>)
 800110c:	f107 0014 	add.w	r0, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	9200      	str	r2, [sp, #0]
 8001114:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001116:	f000 ffb7 	bl	8002088 <ssd1306_WriteString>
	                          ssd1306_UpdateScreen();
 800111a:	f000 fea7 	bl	8001e6c <ssd1306_UpdateScreen>
	                          if (temp > soglia){
 800111e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001122:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001126:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	dd27      	ble.n	8001180 <main+0x1c0>
	                        	  cont ++;
 8001130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001132:	3301      	adds	r3, #1
 8001134:	63fb      	str	r3, [r7, #60]	@ 0x3c
	                        	  if (cont == 4){
 8001136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001138:	2b04      	cmp	r3, #4
 800113a:	d123      	bne.n	8001184 <main+0x1c4>
	                        		  cont = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	                        		  HAL_UART_Transmit(&huart1, (uint8_t*)alarmMsg, 8, HAL_MAX_DELAY);
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
 8001144:	2208      	movs	r2, #8
 8001146:	4954      	ldr	r1, [pc, #336]	@ (8001298 <main+0x2d8>)
 8001148:	484b      	ldr	r0, [pc, #300]	@ (8001278 <main+0x2b8>)
 800114a:	f003 fd21 	bl	8004b90 <HAL_UART_Transmit>
									  ssd1306_Fill(Black);
 800114e:	2000      	movs	r0, #0
 8001150:	f000 fe74 	bl	8001e3c <ssd1306_Fill>
									  ssd1306_SetCursor(2, 20);
 8001154:	2114      	movs	r1, #20
 8001156:	2002      	movs	r0, #2
 8001158:	f000 ffbc 	bl	80020d4 <ssd1306_SetCursor>
									  ssd1306_WriteString("ALLARME INCENDIO", Font_7x10, White);
 800115c:	4b4d      	ldr	r3, [pc, #308]	@ (8001294 <main+0x2d4>)
 800115e:	2201      	movs	r2, #1
 8001160:	9200      	str	r2, [sp, #0]
 8001162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001164:	484d      	ldr	r0, [pc, #308]	@ (800129c <main+0x2dc>)
 8001166:	f000 ff8f 	bl	8002088 <ssd1306_WriteString>
									  ssd1306_UpdateScreen();
 800116a:	f000 fe7f 	bl	8001e6c <ssd1306_UpdateScreen>
									  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	2120      	movs	r1, #32
 8001172:	484b      	ldr	r0, [pc, #300]	@ (80012a0 <main+0x2e0>)
 8001174:	f001 fd24 	bl	8002bc0 <HAL_GPIO_WritePin>
									  system_state = STATE_WAIT_RESPONSE;
 8001178:	4b41      	ldr	r3, [pc, #260]	@ (8001280 <main+0x2c0>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e001      	b.n	8001184 <main+0x1c4>
	                        	  cont = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	63fb      	str	r3, [r7, #60]	@ 0x3c
	                  HAL_Delay(100);
 8001184:	2064      	movs	r0, #100	@ 0x64
 8001186:	f001 f947 	bl	8002418 <HAL_Delay>
	                  break;
 800118a:	e06f      	b.n	800126c <main+0x2ac>
	                  uint8_t cmd = REG_TEMP;
 800118c:	2300      	movs	r3, #0
 800118e:	74fb      	strb	r3, [r7, #19]
					  if (HAL_I2C_Master_Transmit(&hi2c1, LM75A, &cmd, 1, HAL_MAX_DELAY) == HAL_OK) {
 8001190:	2390      	movs	r3, #144	@ 0x90
 8001192:	4619      	mov	r1, r3
 8001194:	f107 0213 	add.w	r2, r7, #19
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	4838      	ldr	r0, [pc, #224]	@ (8001284 <main+0x2c4>)
 80011a2:	f001 fdc1 	bl	8002d28 <HAL_I2C_Master_Transmit>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d13e      	bne.n	800122a <main+0x26a>
						  if (HAL_I2C_Master_Receive(&hi2c1, LM75A, data, 2, HAL_MAX_DELAY) == HAL_OK) {
 80011ac:	2390      	movs	r3, #144	@ 0x90
 80011ae:	4619      	mov	r1, r3
 80011b0:	f107 0210 	add.w	r2, r7, #16
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2302      	movs	r3, #2
 80011bc:	4831      	ldr	r0, [pc, #196]	@ (8001284 <main+0x2c4>)
 80011be:	f001 fecb 	bl	8002f58 <HAL_I2C_Master_Receive>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d130      	bne.n	800122a <main+0x26a>
							  int16_t raw = ((int16_t)data[0] << 8) | data[1];
 80011c8:	7c3b      	ldrb	r3, [r7, #16]
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	7c7b      	ldrb	r3, [r7, #17]
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
							  raw >>= 5;
 80011d8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80011dc:	115b      	asrs	r3, r3, #5
 80011de:	86fb      	strh	r3, [r7, #54]	@ 0x36
							  float temp = raw * 0.125f;
 80011e0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ec:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 80011f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
							  snprintf(temp_s, sizeof(temp_s), "T: %.2f C", temp);
 80011f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80011fa:	f7ff f9cd 	bl	8000598 <__aeabi_f2d>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4638      	mov	r0, r7
 8001204:	e9cd 2300 	strd	r2, r3, [sp]
 8001208:	4a1f      	ldr	r2, [pc, #124]	@ (8001288 <main+0x2c8>)
 800120a:	2110      	movs	r1, #16
 800120c:	f006 fad2 	bl	80077b4 <sniprintf>
							  ssd1306_SetCursor(40, 45);
 8001210:	212d      	movs	r1, #45	@ 0x2d
 8001212:	2028      	movs	r0, #40	@ 0x28
 8001214:	f000 ff5e 	bl	80020d4 <ssd1306_SetCursor>
							  ssd1306_WriteString(temp_s, Font_7x10, Black);
 8001218:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <main+0x2d4>)
 800121a:	4638      	mov	r0, r7
 800121c:	2200      	movs	r2, #0
 800121e:	9200      	str	r2, [sp, #0]
 8001220:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001222:	f000 ff31 	bl	8002088 <ssd1306_WriteString>
							  ssd1306_UpdateScreen();
 8001226:	f000 fe21 	bl	8001e6c <ssd1306_UpdateScreen>
					  HAL_Delay(100);
 800122a:	2064      	movs	r0, #100	@ 0x64
 800122c:	f001 f8f4 	bl	8002418 <HAL_Delay>
					  break;
 8001230:	e01c      	b.n	800126c <main+0x2ac>
	                  ssd1306_Fill(Black);
 8001232:	2000      	movs	r0, #0
 8001234:	f000 fe02 	bl	8001e3c <ssd1306_Fill>
	                  ssd1306_SetCursor(20,18);
 8001238:	2112      	movs	r1, #18
 800123a:	2014      	movs	r0, #20
 800123c:	f000 ff4a 	bl	80020d4 <ssd1306_SetCursor>
	                  ssd1306_WriteString("SOCCORSI", Font_11x18, White);
 8001240:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <main+0x2e4>)
 8001242:	2201      	movs	r2, #1
 8001244:	9200      	str	r2, [sp, #0]
 8001246:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001248:	4817      	ldr	r0, [pc, #92]	@ (80012a8 <main+0x2e8>)
 800124a:	f000 ff1d 	bl	8002088 <ssd1306_WriteString>
	                  ssd1306_SetCursor(14,37);
 800124e:	2125      	movs	r1, #37	@ 0x25
 8001250:	200e      	movs	r0, #14
 8001252:	f000 ff3f 	bl	80020d4 <ssd1306_SetCursor>
	                  ssd1306_WriteString("IN ARRIVO", Font_11x18, White);
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <main+0x2e4>)
 8001258:	2201      	movs	r2, #1
 800125a:	9200      	str	r2, [sp, #0]
 800125c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800125e:	4813      	ldr	r0, [pc, #76]	@ (80012ac <main+0x2ec>)
 8001260:	f000 ff12 	bl	8002088 <ssd1306_WriteString>
	                  ssd1306_UpdateScreen();
 8001264:	f000 fe02 	bl	8001e6c <ssd1306_UpdateScreen>
	                  break;
 8001268:	e000      	b.n	800126c <main+0x2ac>
	            	  break;
 800126a:	bf00      	nop
	  if (rx_data_ready == 1){
 800126c:	e6d5      	b.n	800101a <main+0x5a>
 800126e:	bf00      	nop
 8001270:	41f00000 	.word	0x41f00000
 8001274:	200004ac 	.word	0x200004ac
 8001278:	20000380 	.word	0x20000380
 800127c:	20000000 	.word	0x20000000
 8001280:	200004a8 	.word	0x200004a8
 8001284:	20000204 	.word	0x20000204
 8001288:	08009a58 	.word	0x08009a58
 800128c:	0800b584 	.word	0x0800b584
 8001290:	08009a64 	.word	0x08009a64
 8001294:	0800b590 	.word	0x0800b590
 8001298:	08009aa8 	.word	0x08009aa8
 800129c:	08009a7c 	.word	0x08009a7c
 80012a0:	48000400 	.word	0x48000400
 80012a4:	0800b59c 	.word	0x0800b59c
 80012a8:	08009a90 	.word	0x08009a90
 80012ac:	08009a9c 	.word	0x08009a9c

080012b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b094      	sub	sp, #80	@ 0x50
 80012b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b6:	f107 0318 	add.w	r3, r7, #24
 80012ba:	2238      	movs	r2, #56	@ 0x38
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f006 fb0b 	bl	80078da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f002 fbdc 	bl	8003a90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	2302      	movs	r3, #2
 80012da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e2:	2340      	movs	r3, #64	@ 0x40
 80012e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e6:	2302      	movs	r3, #2
 80012e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012ea:	2302      	movs	r3, #2
 80012ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80012ee:	2304      	movs	r3, #4
 80012f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80012f2:	2355      	movs	r3, #85	@ 0x55
 80012f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f6:	2302      	movs	r3, #2
 80012f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012fe:	2302      	movs	r3, #2
 8001300:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001302:	f107 0318 	add.w	r3, r7, #24
 8001306:	4618      	mov	r0, r3
 8001308:	f002 fc76 	bl	8003bf8 <HAL_RCC_OscConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001312:	f000 f9e9 	bl	80016e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001316:	230f      	movs	r3, #15
 8001318:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131a:	2303      	movs	r3, #3
 800131c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2104      	movs	r1, #4
 800132e:	4618      	mov	r0, r3
 8001330:	f002 ff74 	bl	800421c <HAL_RCC_ClockConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800133a:	f000 f9d5 	bl	80016e8 <Error_Handler>
  }
}
 800133e:	bf00      	nop
 8001340:	3750      	adds	r7, #80	@ 0x50
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800134c:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <MX_I2C1_Init+0x74>)
 800134e:	4a1c      	ldr	r2, [pc, #112]	@ (80013c0 <MX_I2C1_Init+0x78>)
 8001350:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001352:	4b1a      	ldr	r3, [pc, #104]	@ (80013bc <MX_I2C1_Init+0x74>)
 8001354:	4a1b      	ldr	r2, [pc, #108]	@ (80013c4 <MX_I2C1_Init+0x7c>)
 8001356:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001358:	4b18      	ldr	r3, [pc, #96]	@ (80013bc <MX_I2C1_Init+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800135e:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <MX_I2C1_Init+0x74>)
 8001360:	2201      	movs	r2, #1
 8001362:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001364:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <MX_I2C1_Init+0x74>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800136a:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <MX_I2C1_Init+0x74>)
 800136c:	2200      	movs	r2, #0
 800136e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <MX_I2C1_Init+0x74>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <MX_I2C1_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800137c:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <MX_I2C1_Init+0x74>)
 800137e:	2200      	movs	r2, #0
 8001380:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001382:	480e      	ldr	r0, [pc, #56]	@ (80013bc <MX_I2C1_Init+0x74>)
 8001384:	f001 fc34 	bl	8002bf0 <HAL_I2C_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800138e:	f000 f9ab 	bl	80016e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001392:	2100      	movs	r1, #0
 8001394:	4809      	ldr	r0, [pc, #36]	@ (80013bc <MX_I2C1_Init+0x74>)
 8001396:	f002 fae3 	bl	8003960 <HAL_I2CEx_ConfigAnalogFilter>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013a0:	f000 f9a2 	bl	80016e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013a4:	2100      	movs	r1, #0
 80013a6:	4805      	ldr	r0, [pc, #20]	@ (80013bc <MX_I2C1_Init+0x74>)
 80013a8:	f002 fb25 	bl	80039f6 <HAL_I2CEx_ConfigDigitalFilter>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013b2:	f000 f999 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000204 	.word	0x20000204
 80013c0:	40005400 	.word	0x40005400
 80013c4:	40b285c2 	.word	0x40b285c2

080013c8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80013cc:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <MX_LPUART1_UART_Init+0x88>)
 80013ce:	4a21      	ldr	r2, [pc, #132]	@ (8001454 <MX_LPUART1_UART_Init+0x8c>)
 80013d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80013d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001450 <MX_LPUART1_UART_Init+0x88>)
 80013d4:	4a20      	ldr	r2, [pc, #128]	@ (8001458 <MX_LPUART1_UART_Init+0x90>)
 80013d6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <MX_LPUART1_UART_Init+0x88>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80013de:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <MX_LPUART1_UART_Init+0x88>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80013e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <MX_LPUART1_UART_Init+0x88>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80013ea:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <MX_LPUART1_UART_Init+0x88>)
 80013ec:	220c      	movs	r2, #12
 80013ee:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f0:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <MX_LPUART1_UART_Init+0x88>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013f6:	4b16      	ldr	r3, [pc, #88]	@ (8001450 <MX_LPUART1_UART_Init+0x88>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013fc:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <MX_LPUART1_UART_Init+0x88>)
 80013fe:	2200      	movs	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001402:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <MX_LPUART1_UART_Init+0x88>)
 8001404:	2200      	movs	r2, #0
 8001406:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001408:	4811      	ldr	r0, [pc, #68]	@ (8001450 <MX_LPUART1_UART_Init+0x88>)
 800140a:	f003 fb71 	bl	8004af0 <HAL_UART_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001414:	f000 f968 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001418:	2100      	movs	r1, #0
 800141a:	480d      	ldr	r0, [pc, #52]	@ (8001450 <MX_LPUART1_UART_Init+0x88>)
 800141c:	f005 fbe7 	bl	8006bee <HAL_UARTEx_SetTxFifoThreshold>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001426:	f000 f95f 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142a:	2100      	movs	r1, #0
 800142c:	4808      	ldr	r0, [pc, #32]	@ (8001450 <MX_LPUART1_UART_Init+0x88>)
 800142e:	f005 fc1c 	bl	8006c6a <HAL_UARTEx_SetRxFifoThreshold>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001438:	f000 f956 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800143c:	4804      	ldr	r0, [pc, #16]	@ (8001450 <MX_LPUART1_UART_Init+0x88>)
 800143e:	f005 fb9d 	bl	8006b7c <HAL_UARTEx_DisableFifoMode>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001448:	f000 f94e 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000258 	.word	0x20000258
 8001454:	40008000 	.word	0x40008000
 8001458:	00033324 	.word	0x00033324

0800145c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001460:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <MX_UART5_Init+0x90>)
 8001462:	4a23      	ldr	r2, [pc, #140]	@ (80014f0 <MX_UART5_Init+0x94>)
 8001464:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001466:	4b21      	ldr	r3, [pc, #132]	@ (80014ec <MX_UART5_Init+0x90>)
 8001468:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800146c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800146e:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <MX_UART5_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001474:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <MX_UART5_Init+0x90>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800147a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <MX_UART5_Init+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001480:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <MX_UART5_Init+0x90>)
 8001482:	220c      	movs	r2, #12
 8001484:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001486:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <MX_UART5_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800148c:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <MX_UART5_Init+0x90>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001492:	4b16      	ldr	r3, [pc, #88]	@ (80014ec <MX_UART5_Init+0x90>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001498:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <MX_UART5_Init+0x90>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800149e:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <MX_UART5_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80014a4:	4811      	ldr	r0, [pc, #68]	@ (80014ec <MX_UART5_Init+0x90>)
 80014a6:	f003 fb23 	bl	8004af0 <HAL_UART_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80014b0:	f000 f91a 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b4:	2100      	movs	r1, #0
 80014b6:	480d      	ldr	r0, [pc, #52]	@ (80014ec <MX_UART5_Init+0x90>)
 80014b8:	f005 fb99 	bl	8006bee <HAL_UARTEx_SetTxFifoThreshold>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80014c2:	f000 f911 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c6:	2100      	movs	r1, #0
 80014c8:	4808      	ldr	r0, [pc, #32]	@ (80014ec <MX_UART5_Init+0x90>)
 80014ca:	f005 fbce 	bl	8006c6a <HAL_UARTEx_SetRxFifoThreshold>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80014d4:	f000 f908 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80014d8:	4804      	ldr	r0, [pc, #16]	@ (80014ec <MX_UART5_Init+0x90>)
 80014da:	f005 fb4f 	bl	8006b7c <HAL_UARTEx_DisableFifoMode>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80014e4:	f000 f900 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200002ec 	.word	0x200002ec
 80014f0:	40005000 	.word	0x40005000

080014f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f8:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 80014fa:	4a23      	ldr	r2, [pc, #140]	@ (8001588 <MX_USART1_UART_Init+0x94>)
 80014fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014fe:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001500:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001504:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001506:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800150c:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001512:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001518:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 800151a:	220c      	movs	r2, #12
 800151c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151e:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001524:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800152a:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001530:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001536:	4b13      	ldr	r3, [pc, #76]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800153c:	4811      	ldr	r0, [pc, #68]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 800153e:	f003 fad7 	bl	8004af0 <HAL_UART_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001548:	f000 f8ce 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800154c:	2100      	movs	r1, #0
 800154e:	480d      	ldr	r0, [pc, #52]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001550:	f005 fb4d 	bl	8006bee <HAL_UARTEx_SetTxFifoThreshold>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800155a:	f000 f8c5 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800155e:	2100      	movs	r1, #0
 8001560:	4808      	ldr	r0, [pc, #32]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001562:	f005 fb82 	bl	8006c6a <HAL_UARTEx_SetRxFifoThreshold>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800156c:	f000 f8bc 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001570:	4804      	ldr	r0, [pc, #16]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001572:	f005 fb03 	bl	8006b7c <HAL_UARTEx_DisableFifoMode>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800157c:	f000 f8b4 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000380 	.word	0x20000380
 8001588:	40013800 	.word	0x40013800

0800158c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001590:	4b22      	ldr	r3, [pc, #136]	@ (800161c <MX_USART2_UART_Init+0x90>)
 8001592:	4a23      	ldr	r2, [pc, #140]	@ (8001620 <MX_USART2_UART_Init+0x94>)
 8001594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001596:	4b21      	ldr	r3, [pc, #132]	@ (800161c <MX_USART2_UART_Init+0x90>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b1f      	ldr	r3, [pc, #124]	@ (800161c <MX_USART2_UART_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <MX_USART2_UART_Init+0x90>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <MX_USART2_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <MX_USART2_UART_Init+0x90>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b19      	ldr	r3, [pc, #100]	@ (800161c <MX_USART2_UART_Init+0x90>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b17      	ldr	r3, [pc, #92]	@ (800161c <MX_USART2_UART_Init+0x90>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015c2:	4b16      	ldr	r3, [pc, #88]	@ (800161c <MX_USART2_UART_Init+0x90>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015c8:	4b14      	ldr	r3, [pc, #80]	@ (800161c <MX_USART2_UART_Init+0x90>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ce:	4b13      	ldr	r3, [pc, #76]	@ (800161c <MX_USART2_UART_Init+0x90>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015d4:	4811      	ldr	r0, [pc, #68]	@ (800161c <MX_USART2_UART_Init+0x90>)
 80015d6:	f003 fa8b 	bl	8004af0 <HAL_UART_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015e0:	f000 f882 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e4:	2100      	movs	r1, #0
 80015e6:	480d      	ldr	r0, [pc, #52]	@ (800161c <MX_USART2_UART_Init+0x90>)
 80015e8:	f005 fb01 	bl	8006bee <HAL_UARTEx_SetTxFifoThreshold>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015f2:	f000 f879 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f6:	2100      	movs	r1, #0
 80015f8:	4808      	ldr	r0, [pc, #32]	@ (800161c <MX_USART2_UART_Init+0x90>)
 80015fa:	f005 fb36 	bl	8006c6a <HAL_UARTEx_SetRxFifoThreshold>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001604:	f000 f870 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001608:	4804      	ldr	r0, [pc, #16]	@ (800161c <MX_USART2_UART_Init+0x90>)
 800160a:	f005 fab7 	bl	8006b7c <HAL_UARTEx_DisableFifoMode>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001614:	f000 f868 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000414 	.word	0x20000414
 8001620:	40004400 	.word	0x40004400

08001624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	@ 0x28
 8001628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163a:	4b29      	ldr	r3, [pc, #164]	@ (80016e0 <MX_GPIO_Init+0xbc>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163e:	4a28      	ldr	r2, [pc, #160]	@ (80016e0 <MX_GPIO_Init+0xbc>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001646:	4b26      	ldr	r3, [pc, #152]	@ (80016e0 <MX_GPIO_Init+0xbc>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001652:	4b23      	ldr	r3, [pc, #140]	@ (80016e0 <MX_GPIO_Init+0xbc>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	4a22      	ldr	r2, [pc, #136]	@ (80016e0 <MX_GPIO_Init+0xbc>)
 8001658:	f043 0320 	orr.w	r3, r3, #32
 800165c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165e:	4b20      	ldr	r3, [pc, #128]	@ (80016e0 <MX_GPIO_Init+0xbc>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	f003 0320 	and.w	r3, r3, #32
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	4b1d      	ldr	r3, [pc, #116]	@ (80016e0 <MX_GPIO_Init+0xbc>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166e:	4a1c      	ldr	r2, [pc, #112]	@ (80016e0 <MX_GPIO_Init+0xbc>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001676:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <MX_GPIO_Init+0xbc>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001682:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <MX_GPIO_Init+0xbc>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001686:	4a16      	ldr	r2, [pc, #88]	@ (80016e0 <MX_GPIO_Init+0xbc>)
 8001688:	f043 0308 	orr.w	r3, r3, #8
 800168c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168e:	4b14      	ldr	r3, [pc, #80]	@ (80016e0 <MX_GPIO_Init+0xbc>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <MX_GPIO_Init+0xbc>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169e:	4a10      	ldr	r2, [pc, #64]	@ (80016e0 <MX_GPIO_Init+0xbc>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <MX_GPIO_Init+0xbc>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2120      	movs	r1, #32
 80016b6:	480b      	ldr	r0, [pc, #44]	@ (80016e4 <MX_GPIO_Init+0xc0>)
 80016b8:	f001 fa82 	bl	8002bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016bc:	2320      	movs	r3, #32
 80016be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	4804      	ldr	r0, [pc, #16]	@ (80016e4 <MX_GPIO_Init+0xc0>)
 80016d4:	f001 f8f2 	bl	80028bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016d8:	bf00      	nop
 80016da:	3728      	adds	r7, #40	@ 0x28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021000 	.word	0x40021000
 80016e4:	48000400 	.word	0x48000400

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <Error_Handler+0x8>

080016f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <HAL_MspInit+0x44>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001738 <HAL_MspInit+0x44>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6613      	str	r3, [r2, #96]	@ 0x60
 8001706:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <HAL_MspInit+0x44>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <HAL_MspInit+0x44>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001716:	4a08      	ldr	r2, [pc, #32]	@ (8001738 <HAL_MspInit+0x44>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171c:	6593      	str	r3, [r2, #88]	@ 0x58
 800171e:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_MspInit+0x44>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800172a:	f002 fa55 	bl	8003bd8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000

0800173c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b09e      	sub	sp, #120	@ 0x78
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	2254      	movs	r2, #84	@ 0x54
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f006 f8bc 	bl	80078da <memset>
  if(hi2c->Instance==I2C1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a1f      	ldr	r2, [pc, #124]	@ (80017e4 <HAL_I2C_MspInit+0xa8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d136      	bne.n	80017da <HAL_I2C_MspInit+0x9e>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800176c:	2340      	movs	r3, #64	@ 0x40
 800176e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001770:	2300      	movs	r3, #0
 8001772:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	4618      	mov	r0, r3
 800177a:	f002 ff6b 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001784:	f7ff ffb0 	bl	80016e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001788:	4b17      	ldr	r3, [pc, #92]	@ (80017e8 <HAL_I2C_MspInit+0xac>)
 800178a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178c:	4a16      	ldr	r2, [pc, #88]	@ (80017e8 <HAL_I2C_MspInit+0xac>)
 800178e:	f043 0302 	orr.w	r3, r3, #2
 8001792:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <HAL_I2C_MspInit+0xac>)
 8001796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017a4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a6:	2312      	movs	r3, #18
 80017a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017b2:	2304      	movs	r3, #4
 80017b4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017ba:	4619      	mov	r1, r3
 80017bc:	480b      	ldr	r0, [pc, #44]	@ (80017ec <HAL_I2C_MspInit+0xb0>)
 80017be:	f001 f87d 	bl	80028bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017c2:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <HAL_I2C_MspInit+0xac>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c6:	4a08      	ldr	r2, [pc, #32]	@ (80017e8 <HAL_I2C_MspInit+0xac>)
 80017c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ce:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_I2C_MspInit+0xac>)
 80017d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017da:	bf00      	nop
 80017dc:	3778      	adds	r7, #120	@ 0x78
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40005400 	.word	0x40005400
 80017e8:	40021000 	.word	0x40021000
 80017ec:	48000400 	.word	0x48000400

080017f0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b0a6      	sub	sp, #152	@ 0x98
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001808:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800180c:	2254      	movs	r2, #84	@ 0x54
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f006 f862 	bl	80078da <memset>
  if(huart->Instance==LPUART1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a9d      	ldr	r2, [pc, #628]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d13b      	bne.n	8001898 <HAL_UART_MspInit+0xa8>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001820:	2320      	movs	r3, #32
 8001822:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001824:	2300      	movs	r3, #0
 8001826:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001828:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800182c:	4618      	mov	r0, r3
 800182e:	f002 ff11 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001838:	f7ff ff56 	bl	80016e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800183c:	4b95      	ldr	r3, [pc, #596]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 800183e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001840:	4a94      	ldr	r2, [pc, #592]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001848:	4b92      	ldr	r3, [pc, #584]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 800184a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001854:	4b8f      	ldr	r3, [pc, #572]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001858:	4a8e      	ldr	r2, [pc, #568]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001860:	4b8c      	ldr	r3, [pc, #560]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800186a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800186c:	2303      	movs	r3, #3
 800186e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001884:	2308      	movs	r3, #8
 8001886:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800188e:	4619      	mov	r1, r3
 8001890:	4881      	ldr	r0, [pc, #516]	@ (8001a98 <HAL_UART_MspInit+0x2a8>)
 8001892:	f001 f813 	bl	80028bc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001896:	e0f6      	b.n	8001a86 <HAL_UART_MspInit+0x296>
  else if(huart->Instance==UART5)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a7f      	ldr	r2, [pc, #508]	@ (8001a9c <HAL_UART_MspInit+0x2ac>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d165      	bne.n	800196e <HAL_UART_MspInit+0x17e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80018a2:	2310      	movs	r3, #16
 80018a4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 fed0 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_UART_MspInit+0xce>
      Error_Handler();
 80018ba:	f7ff ff15 	bl	80016e8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80018be:	4b75      	ldr	r3, [pc, #468]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c2:	4a74      	ldr	r2, [pc, #464]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 80018c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80018c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ca:	4b72      	ldr	r3, [pc, #456]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018da:	4a6e      	ldr	r2, [pc, #440]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e2:	4b6c      	ldr	r3, [pc, #432]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	623b      	str	r3, [r7, #32]
 80018ec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ee:	4b69      	ldr	r3, [pc, #420]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f2:	4a68      	ldr	r2, [pc, #416]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 80018f4:	f043 0308 	orr.w	r3, r3, #8
 80018f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018fa:	4b66      	ldr	r3, [pc, #408]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001906:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800190a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001920:	2305      	movs	r3, #5
 8001922:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001926:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800192a:	4619      	mov	r1, r3
 800192c:	485a      	ldr	r0, [pc, #360]	@ (8001a98 <HAL_UART_MspInit+0x2a8>)
 800192e:	f000 ffc5 	bl	80028bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001932:	2304      	movs	r3, #4
 8001934:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800194a:	2305      	movs	r3, #5
 800194c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001950:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001954:	4619      	mov	r1, r3
 8001956:	4852      	ldr	r0, [pc, #328]	@ (8001aa0 <HAL_UART_MspInit+0x2b0>)
 8001958:	f000 ffb0 	bl	80028bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	2100      	movs	r1, #0
 8001960:	2035      	movs	r0, #53	@ 0x35
 8001962:	f000 fe56 	bl	8002612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001966:	2035      	movs	r0, #53	@ 0x35
 8001968:	f000 fe6d 	bl	8002646 <HAL_NVIC_EnableIRQ>
}
 800196c:	e08b      	b.n	8001a86 <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a4c      	ldr	r2, [pc, #304]	@ (8001aa4 <HAL_UART_MspInit+0x2b4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d145      	bne.n	8001a04 <HAL_UART_MspInit+0x214>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001978:	2301      	movs	r3, #1
 800197a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800197c:	2300      	movs	r3, #0
 800197e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001980:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001984:	4618      	mov	r0, r3
 8001986:	f002 fe65 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8001990:	f7ff feaa 	bl	80016e8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001994:	4b3f      	ldr	r3, [pc, #252]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 8001996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001998:	4a3e      	ldr	r2, [pc, #248]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 800199a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800199e:	6613      	str	r3, [r2, #96]	@ 0x60
 80019a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 80019a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019a8:	61bb      	str	r3, [r7, #24]
 80019aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ac:	4b39      	ldr	r3, [pc, #228]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 80019ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b0:	4a38      	ldr	r2, [pc, #224]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019b8:	4b36      	ldr	r3, [pc, #216]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 80019ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019c4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d8:	2302      	movs	r3, #2
 80019da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019de:	2307      	movs	r3, #7
 80019e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80019e8:	4619      	mov	r1, r3
 80019ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ee:	f000 ff65 	bl	80028bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2025      	movs	r0, #37	@ 0x25
 80019f8:	f000 fe0b 	bl	8002612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019fc:	2025      	movs	r0, #37	@ 0x25
 80019fe:	f000 fe22 	bl	8002646 <HAL_NVIC_EnableIRQ>
}
 8001a02:	e040      	b.n	8001a86 <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a27      	ldr	r2, [pc, #156]	@ (8001aa8 <HAL_UART_MspInit+0x2b8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d13b      	bne.n	8001a86 <HAL_UART_MspInit+0x296>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a16:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 fe1a 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_UART_MspInit+0x23a>
      Error_Handler();
 8001a26:	f7ff fe5f 	bl	80016e8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2e:	4a19      	ldr	r2, [pc, #100]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a36:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a46:	4a13      	ldr	r2, [pc, #76]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a4e:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a5a:	230c      	movs	r3, #12
 8001a5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a72:	2307      	movs	r3, #7
 8001a74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a78:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a82:	f000 ff1b 	bl	80028bc <HAL_GPIO_Init>
}
 8001a86:	bf00      	nop
 8001a88:	3798      	adds	r7, #152	@ 0x98
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40008000 	.word	0x40008000
 8001a94:	40021000 	.word	0x40021000
 8001a98:	48000800 	.word	0x48000800
 8001a9c:	40005000 	.word	0x40005000
 8001aa0:	48000c00 	.word	0x48000c00
 8001aa4:	40013800 	.word	0x40013800
 8001aa8:	40004400 	.word	0x40004400

08001aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <NMI_Handler+0x4>

08001ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <HardFault_Handler+0x4>

08001abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <MemManage_Handler+0x4>

08001ac4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b02:	f000 fc6b 	bl	80023dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b10:	4802      	ldr	r0, [pc, #8]	@ (8001b1c <USART1_IRQHandler+0x10>)
 8001b12:	f003 f917 	bl	8004d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000380 	.word	0x20000380

08001b20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001b24:	2000      	movs	r0, #0
 8001b26:	f000 fbed 	bl	8002304 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001b34:	4802      	ldr	r0, [pc, #8]	@ (8001b40 <UART5_IRQHandler+0x10>)
 8001b36:	f003 f905 	bl	8004d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200002ec 	.word	0x200002ec

08001b44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return 1;
 8001b48:	2301      	movs	r3, #1
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_kill>:

int _kill(int pid, int sig)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b5e:	f005 ff0f 	bl	8007980 <__errno>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2216      	movs	r2, #22
 8001b66:	601a      	str	r2, [r3, #0]
  return -1;
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <_exit>:

void _exit (int status)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ffe7 	bl	8001b54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b86:	bf00      	nop
 8001b88:	e7fd      	b.n	8001b86 <_exit+0x12>

08001b8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e00a      	b.n	8001bb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b9c:	f3af 8000 	nop.w
 8001ba0:	4601      	mov	r1, r0
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	60ba      	str	r2, [r7, #8]
 8001ba8:	b2ca      	uxtb	r2, r1
 8001baa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	dbf0      	blt.n	8001b9c <_read+0x12>
  }

  return len;
 8001bba:	687b      	ldr	r3, [r7, #4]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	e009      	b.n	8001bea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	60ba      	str	r2, [r7, #8]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	3301      	adds	r3, #1
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	dbf1      	blt.n	8001bd6 <_write+0x12>
  }
  return len;
 8001bf2:	687b      	ldr	r3, [r7, #4]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_close>:

int _close(int file)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c24:	605a      	str	r2, [r3, #4]
  return 0;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_isatty>:

int _isatty(int file)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b085      	sub	sp, #20
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c6c:	4a14      	ldr	r2, [pc, #80]	@ (8001cc0 <_sbrk+0x5c>)
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <_sbrk+0x60>)
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c78:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c80:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <_sbrk+0x64>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	@ (8001ccc <_sbrk+0x68>)
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d207      	bcs.n	8001ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c94:	f005 fe74 	bl	8007980 <__errno>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	e009      	b.n	8001cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001caa:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a05      	ldr	r2, [pc, #20]	@ (8001cc8 <_sbrk+0x64>)
 8001cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20020000 	.word	0x20020000
 8001cc4:	00000400 	.word	0x00000400
 8001cc8:	200004b8 	.word	0x200004b8
 8001ccc:	20000a20 	.word	0x20000a20

08001cd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <SystemInit+0x20>)
 8001cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cda:	4a05      	ldr	r2, [pc, #20]	@ (8001cf0 <SystemInit+0x20>)
 8001cdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af04      	add	r7, sp, #16
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	9302      	str	r3, [sp, #8]
 8001d14:	2301      	movs	r3, #1
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	1dfb      	adds	r3, r7, #7
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2178      	movs	r1, #120	@ 0x78
 8001d22:	4803      	ldr	r0, [pc, #12]	@ (8001d30 <ssd1306_WriteCommand+0x2c>)
 8001d24:	f001 fa0e 	bl	8003144 <HAL_I2C_Mem_Write>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000204 	.word	0x20000204

08001d34 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af04      	add	r7, sp, #16
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	f04f 32ff 	mov.w	r2, #4294967295
 8001d46:	9202      	str	r2, [sp, #8]
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2301      	movs	r3, #1
 8001d50:	2240      	movs	r2, #64	@ 0x40
 8001d52:	2178      	movs	r1, #120	@ 0x78
 8001d54:	4803      	ldr	r0, [pc, #12]	@ (8001d64 <ssd1306_WriteData+0x30>)
 8001d56:	f001 f9f5 	bl	8003144 <HAL_I2C_Mem_Write>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000204 	.word	0x20000204

08001d68 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001d6c:	f7ff ffc2 	bl	8001cf4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001d70:	2064      	movs	r0, #100	@ 0x64
 8001d72:	f000 fb51 	bl	8002418 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001d76:	2000      	movs	r0, #0
 8001d78:	f000 f9d8 	bl	800212c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001d7c:	2020      	movs	r0, #32
 8001d7e:	f7ff ffc1 	bl	8001d04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001d82:	2000      	movs	r0, #0
 8001d84:	f7ff ffbe 	bl	8001d04 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d88:	20b0      	movs	r0, #176	@ 0xb0
 8001d8a:	f7ff ffbb 	bl	8001d04 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001d8e:	20c8      	movs	r0, #200	@ 0xc8
 8001d90:	f7ff ffb8 	bl	8001d04 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff ffb5 	bl	8001d04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001d9a:	2010      	movs	r0, #16
 8001d9c:	f7ff ffb2 	bl	8001d04 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001da0:	2040      	movs	r0, #64	@ 0x40
 8001da2:	f7ff ffaf 	bl	8001d04 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001da6:	20ff      	movs	r0, #255	@ 0xff
 8001da8:	f000 f9ac 	bl	8002104 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001dac:	20a1      	movs	r0, #161	@ 0xa1
 8001dae:	f7ff ffa9 	bl	8001d04 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001db2:	20a6      	movs	r0, #166	@ 0xa6
 8001db4:	f7ff ffa6 	bl	8001d04 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001db8:	20a8      	movs	r0, #168	@ 0xa8
 8001dba:	f7ff ffa3 	bl	8001d04 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001dbe:	203f      	movs	r0, #63	@ 0x3f
 8001dc0:	f7ff ffa0 	bl	8001d04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001dc4:	20a4      	movs	r0, #164	@ 0xa4
 8001dc6:	f7ff ff9d 	bl	8001d04 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001dca:	20d3      	movs	r0, #211	@ 0xd3
 8001dcc:	f7ff ff9a 	bl	8001d04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7ff ff97 	bl	8001d04 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001dd6:	20d5      	movs	r0, #213	@ 0xd5
 8001dd8:	f7ff ff94 	bl	8001d04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ddc:	20f0      	movs	r0, #240	@ 0xf0
 8001dde:	f7ff ff91 	bl	8001d04 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001de2:	20d9      	movs	r0, #217	@ 0xd9
 8001de4:	f7ff ff8e 	bl	8001d04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001de8:	2022      	movs	r0, #34	@ 0x22
 8001dea:	f7ff ff8b 	bl	8001d04 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001dee:	20da      	movs	r0, #218	@ 0xda
 8001df0:	f7ff ff88 	bl	8001d04 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001df4:	2012      	movs	r0, #18
 8001df6:	f7ff ff85 	bl	8001d04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001dfa:	20db      	movs	r0, #219	@ 0xdb
 8001dfc:	f7ff ff82 	bl	8001d04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001e00:	2020      	movs	r0, #32
 8001e02:	f7ff ff7f 	bl	8001d04 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001e06:	208d      	movs	r0, #141	@ 0x8d
 8001e08:	f7ff ff7c 	bl	8001d04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001e0c:	2014      	movs	r0, #20
 8001e0e:	f7ff ff79 	bl	8001d04 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001e12:	2001      	movs	r0, #1
 8001e14:	f000 f98a 	bl	800212c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f000 f80f 	bl	8001e3c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001e1e:	f000 f825 	bl	8001e6c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001e22:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <ssd1306_Init+0xd0>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001e28:	4b03      	ldr	r3, [pc, #12]	@ (8001e38 <ssd1306_Init+0xd0>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001e2e:	4b02      	ldr	r3, [pc, #8]	@ (8001e38 <ssd1306_Init+0xd0>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	711a      	strb	r2, [r3, #4]
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200008bc 	.word	0x200008bc

08001e3c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <ssd1306_Fill+0x14>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e000      	b.n	8001e52 <ssd1306_Fill+0x16>
 8001e50:	23ff      	movs	r3, #255	@ 0xff
 8001e52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e56:	4619      	mov	r1, r3
 8001e58:	4803      	ldr	r0, [pc, #12]	@ (8001e68 <ssd1306_Fill+0x2c>)
 8001e5a:	f005 fd3e 	bl	80078da <memset>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200004bc 	.word	0x200004bc

08001e6c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e72:	2300      	movs	r3, #0
 8001e74:	71fb      	strb	r3, [r7, #7]
 8001e76:	e016      	b.n	8001ea6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	3b50      	subs	r3, #80	@ 0x50
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff40 	bl	8001d04 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001e84:	2000      	movs	r0, #0
 8001e86:	f7ff ff3d 	bl	8001d04 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001e8a:	2010      	movs	r0, #16
 8001e8c:	f7ff ff3a 	bl	8001d04 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	01db      	lsls	r3, r3, #7
 8001e94:	4a08      	ldr	r2, [pc, #32]	@ (8001eb8 <ssd1306_UpdateScreen+0x4c>)
 8001e96:	4413      	add	r3, r2
 8001e98:	2180      	movs	r1, #128	@ 0x80
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff4a 	bl	8001d34 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	71fb      	strb	r3, [r7, #7]
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2b07      	cmp	r3, #7
 8001eaa:	d9e5      	bls.n	8001e78 <ssd1306_UpdateScreen+0xc>
    }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200004bc 	.word	0x200004bc

08001ebc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	71bb      	strb	r3, [r7, #6]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	db3d      	blt.n	8001f52 <ssd1306_DrawPixel+0x96>
 8001ed6:	79bb      	ldrb	r3, [r7, #6]
 8001ed8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eda:	d83a      	bhi.n	8001f52 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8001edc:	797b      	ldrb	r3, [r7, #5]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d11a      	bne.n	8001f18 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ee2:	79fa      	ldrb	r2, [r7, #7]
 8001ee4:	79bb      	ldrb	r3, [r7, #6]
 8001ee6:	08db      	lsrs	r3, r3, #3
 8001ee8:	b2d8      	uxtb	r0, r3
 8001eea:	4603      	mov	r3, r0
 8001eec:	01db      	lsls	r3, r3, #7
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8001f60 <ssd1306_DrawPixel+0xa4>)
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	b25a      	sxtb	r2, r3
 8001ef6:	79bb      	ldrb	r3, [r7, #6]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	2101      	movs	r1, #1
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	b25b      	sxtb	r3, r3
 8001f04:	4313      	orrs	r3, r2
 8001f06:	b259      	sxtb	r1, r3
 8001f08:	79fa      	ldrb	r2, [r7, #7]
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	01db      	lsls	r3, r3, #7
 8001f0e:	4413      	add	r3, r2
 8001f10:	b2c9      	uxtb	r1, r1
 8001f12:	4a13      	ldr	r2, [pc, #76]	@ (8001f60 <ssd1306_DrawPixel+0xa4>)
 8001f14:	54d1      	strb	r1, [r2, r3]
 8001f16:	e01d      	b.n	8001f54 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f18:	79fa      	ldrb	r2, [r7, #7]
 8001f1a:	79bb      	ldrb	r3, [r7, #6]
 8001f1c:	08db      	lsrs	r3, r3, #3
 8001f1e:	b2d8      	uxtb	r0, r3
 8001f20:	4603      	mov	r3, r0
 8001f22:	01db      	lsls	r3, r3, #7
 8001f24:	4413      	add	r3, r2
 8001f26:	4a0e      	ldr	r2, [pc, #56]	@ (8001f60 <ssd1306_DrawPixel+0xa4>)
 8001f28:	5cd3      	ldrb	r3, [r2, r3]
 8001f2a:	b25a      	sxtb	r2, r3
 8001f2c:	79bb      	ldrb	r3, [r7, #6]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	2101      	movs	r1, #1
 8001f34:	fa01 f303 	lsl.w	r3, r1, r3
 8001f38:	b25b      	sxtb	r3, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	b25b      	sxtb	r3, r3
 8001f3e:	4013      	ands	r3, r2
 8001f40:	b259      	sxtb	r1, r3
 8001f42:	79fa      	ldrb	r2, [r7, #7]
 8001f44:	4603      	mov	r3, r0
 8001f46:	01db      	lsls	r3, r3, #7
 8001f48:	4413      	add	r3, r2
 8001f4a:	b2c9      	uxtb	r1, r1
 8001f4c:	4a04      	ldr	r2, [pc, #16]	@ (8001f60 <ssd1306_DrawPixel+0xa4>)
 8001f4e:	54d1      	strb	r1, [r2, r3]
 8001f50:	e000      	b.n	8001f54 <ssd1306_DrawPixel+0x98>
        return;
 8001f52:	bf00      	nop
    }
}
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	200004bc 	.word	0x200004bc

08001f64 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b089      	sub	sp, #36	@ 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	4638      	mov	r0, r7
 8001f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001f72:	4623      	mov	r3, r4
 8001f74:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	2b1f      	cmp	r3, #31
 8001f7a:	d902      	bls.n	8001f82 <ssd1306_WriteChar+0x1e>
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001f80:	d901      	bls.n	8001f86 <ssd1306_WriteChar+0x22>
        return 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e079      	b.n	800207a <ssd1306_WriteChar+0x116>

    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <ssd1306_WriteChar+0x34>
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	3b20      	subs	r3, #32
 8001f92:	4413      	add	r3, r2
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	e000      	b.n	8001f9a <ssd1306_WriteChar+0x36>
 8001f98:	783b      	ldrb	r3, [r7, #0]
 8001f9a:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001f9c:	4b39      	ldr	r3, [pc, #228]	@ (8002084 <ssd1306_WriteChar+0x120>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	7dfb      	ldrb	r3, [r7, #23]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	2b80      	cmp	r3, #128	@ 0x80
 8001fa8:	dc06      	bgt.n	8001fb8 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001faa:	4b36      	ldr	r3, [pc, #216]	@ (8002084 <ssd1306_WriteChar+0x120>)
 8001fac:	885b      	ldrh	r3, [r3, #2]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	787b      	ldrb	r3, [r7, #1]
 8001fb2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001fb4:	2b40      	cmp	r3, #64	@ 0x40
 8001fb6:	dd01      	ble.n	8001fbc <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	e05e      	b.n	800207a <ssd1306_WriteChar+0x116>
    }

    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	e04d      	b.n	800205e <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	3b20      	subs	r3, #32
 8001fc8:	7879      	ldrb	r1, [r7, #1]
 8001fca:	fb01 f303 	mul.w	r3, r1, r3
 8001fce:	4619      	mov	r1, r3
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	440b      	add	r3, r1
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	e036      	b.n	8002050 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d013      	beq.n	800201a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001ff2:	4b24      	ldr	r3, [pc, #144]	@ (8002084 <ssd1306_WriteChar+0x120>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	b2d8      	uxtb	r0, r3
 8002000:	4b20      	ldr	r3, [pc, #128]	@ (8002084 <ssd1306_WriteChar+0x120>)
 8002002:	885b      	ldrh	r3, [r3, #2]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	4413      	add	r3, r2
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002012:	4619      	mov	r1, r3
 8002014:	f7ff ff52 	bl	8001ebc <ssd1306_DrawPixel>
 8002018:	e017      	b.n	800204a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800201a:	4b1a      	ldr	r3, [pc, #104]	@ (8002084 <ssd1306_WriteChar+0x120>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	4413      	add	r3, r2
 8002026:	b2d8      	uxtb	r0, r3
 8002028:	4b16      	ldr	r3, [pc, #88]	@ (8002084 <ssd1306_WriteChar+0x120>)
 800202a:	885b      	ldrh	r3, [r3, #2]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	4413      	add	r3, r2
 8002034:	b2d9      	uxtb	r1, r3
 8002036:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf0c      	ite	eq
 800203e:	2301      	moveq	r3, #1
 8002040:	2300      	movne	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	f7ff ff39 	bl	8001ebc <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	3301      	adds	r3, #1
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	429a      	cmp	r2, r3
 8002056:	d3c4      	bcc.n	8001fe2 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	3301      	adds	r3, #1
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	787b      	ldrb	r3, [r7, #1]
 8002060:	461a      	mov	r2, r3
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	4293      	cmp	r3, r2
 8002066:	d3ac      	bcc.n	8001fc2 <ssd1306_WriteChar+0x5e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8002068:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <ssd1306_WriteChar+0x120>)
 800206a:	881a      	ldrh	r2, [r3, #0]
 800206c:	7dfb      	ldrb	r3, [r7, #23]
 800206e:	b29b      	uxth	r3, r3
 8002070:	4413      	add	r3, r2
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <ssd1306_WriteChar+0x120>)
 8002076:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8002078:	7bfb      	ldrb	r3, [r7, #15]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3724      	adds	r7, #36	@ 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd90      	pop	{r4, r7, pc}
 8002082:	bf00      	nop
 8002084:	200008bc 	.word	0x200008bc

08002088 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af02      	add	r7, sp, #8
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	4638      	mov	r0, r7
 8002092:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002096:	e013      	b.n	80020c0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	7818      	ldrb	r0, [r3, #0]
 800209c:	7e3b      	ldrb	r3, [r7, #24]
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	463b      	mov	r3, r7
 80020a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020a4:	f7ff ff5e 	bl	8001f64 <ssd1306_WriteChar>
 80020a8:	4603      	mov	r3, r0
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d002      	beq.n	80020ba <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	e008      	b.n	80020cc <ssd1306_WriteString+0x44>
        }
        str++;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3301      	adds	r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e7      	bne.n	8002098 <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	781b      	ldrb	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	460a      	mov	r2, r1
 80020de:	71fb      	strb	r3, [r7, #7]
 80020e0:	4613      	mov	r3, r2
 80020e2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <ssd1306_SetCursor+0x2c>)
 80020ea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80020ec:	79bb      	ldrb	r3, [r7, #6]
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	4b03      	ldr	r3, [pc, #12]	@ (8002100 <ssd1306_SetCursor+0x2c>)
 80020f2:	805a      	strh	r2, [r3, #2]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	200008bc 	.word	0x200008bc

08002104 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800210e:	2381      	movs	r3, #129	@ 0x81
 8002110:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fdf5 	bl	8001d04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fdf1 	bl	8001d04 <ssd1306_WriteCommand>
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800213c:	23af      	movs	r3, #175	@ 0xaf
 800213e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002140:	4b08      	ldr	r3, [pc, #32]	@ (8002164 <ssd1306_SetDisplayOn+0x38>)
 8002142:	2201      	movs	r2, #1
 8002144:	715a      	strb	r2, [r3, #5]
 8002146:	e004      	b.n	8002152 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002148:	23ae      	movs	r3, #174	@ 0xae
 800214a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800214c:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <ssd1306_SetDisplayOn+0x38>)
 800214e:	2200      	movs	r2, #0
 8002150:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fdd5 	bl	8001d04 <ssd1306_WriteCommand>
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200008bc 	.word	0x200008bc

08002168 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002168:	480d      	ldr	r0, [pc, #52]	@ (80021a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800216a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800216c:	f7ff fdb0 	bl	8001cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002170:	480c      	ldr	r0, [pc, #48]	@ (80021a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002172:	490d      	ldr	r1, [pc, #52]	@ (80021a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002174:	4a0d      	ldr	r2, [pc, #52]	@ (80021ac <LoopForever+0xe>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002178:	e002      	b.n	8002180 <LoopCopyDataInit>

0800217a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800217c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217e:	3304      	adds	r3, #4

08002180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002184:	d3f9      	bcc.n	800217a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002186:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002188:	4c0a      	ldr	r4, [pc, #40]	@ (80021b4 <LoopForever+0x16>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800218c:	e001      	b.n	8002192 <LoopFillZerobss>

0800218e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800218e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002190:	3204      	adds	r2, #4

08002192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002194:	d3fb      	bcc.n	800218e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002196:	f005 fbf9 	bl	800798c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800219a:	f7fe ff11 	bl	8000fc0 <main>

0800219e <LoopForever>:

LoopForever:
    b LoopForever
 800219e:	e7fe      	b.n	800219e <LoopForever>
  ldr   r0, =_estack
 80021a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80021ac:	0800b95c 	.word	0x0800b95c
  ldr r2, =_sbss
 80021b0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80021b4:	20000a1c 	.word	0x20000a1c

080021b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021b8:	e7fe      	b.n	80021b8 <ADC1_2_IRQHandler>
	...

080021bc <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80021c6:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <BSP_LED_Init+0x64>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ca:	4a15      	ldr	r2, [pc, #84]	@ (8002220 <BSP_LED_Init+0x64>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d2:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <BSP_LED_Init+0x64>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80021de:	2320      	movs	r3, #32
 80021e0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ea:	2303      	movs	r3, #3
 80021ec:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002224 <BSP_LED_Init+0x68>)
 80021f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f6:	f107 020c 	add.w	r2, r7, #12
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 fb5d 	bl	80028bc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	4a07      	ldr	r2, [pc, #28]	@ (8002224 <BSP_LED_Init+0x68>)
 8002206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220a:	2120      	movs	r1, #32
 800220c:	2200      	movs	r2, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fcd6 	bl	8002bc0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3720      	adds	r7, #32
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	20000008 	.word	0x20000008

08002228 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	460a      	mov	r2, r1
 8002232:	71fb      	strb	r3, [r7, #7]
 8002234:	4613      	mov	r3, r2
 8002236:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8002238:	4b2c      	ldr	r3, [pc, #176]	@ (80022ec <BSP_PB_Init+0xc4>)
 800223a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223c:	4a2b      	ldr	r2, [pc, #172]	@ (80022ec <BSP_PB_Init+0xc4>)
 800223e:	f043 0304 	orr.w	r3, r3, #4
 8002242:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002244:	4b29      	ldr	r3, [pc, #164]	@ (80022ec <BSP_PB_Init+0xc4>)
 8002246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002250:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002254:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002256:	2302      	movs	r3, #2
 8002258:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800225a:	2302      	movs	r3, #2
 800225c:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800225e:	79bb      	ldrb	r3, [r7, #6]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10c      	bne.n	800227e <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	4a21      	ldr	r2, [pc, #132]	@ (80022f0 <BSP_PB_Init+0xc8>)
 800226c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002270:	f107 020c 	add.w	r2, r7, #12
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f000 fb20 	bl	80028bc <HAL_GPIO_Init>
 800227c:	e031      	b.n	80022e2 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800227e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002282:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	4a1a      	ldr	r2, [pc, #104]	@ (80022f0 <BSP_PB_Init+0xc8>)
 8002288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228c:	f107 020c 	add.w	r2, r7, #12
 8002290:	4611      	mov	r1, r2
 8002292:	4618      	mov	r0, r3
 8002294:	f000 fb12 	bl	80028bc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4a15      	ldr	r2, [pc, #84]	@ (80022f4 <BSP_PB_Init+0xcc>)
 800229e:	441a      	add	r2, r3
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	4915      	ldr	r1, [pc, #84]	@ (80022f8 <BSP_PB_Init+0xd0>)
 80022a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022a8:	4619      	mov	r1, r3
 80022aa:	4610      	mov	r0, r2
 80022ac:	f000 fac2 	bl	8002834 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4a0f      	ldr	r2, [pc, #60]	@ (80022f4 <BSP_PB_Init+0xcc>)
 80022b6:	1898      	adds	r0, r3, r2
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	4a10      	ldr	r2, [pc, #64]	@ (80022fc <BSP_PB_Init+0xd4>)
 80022bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c0:	461a      	mov	r2, r3
 80022c2:	2100      	movs	r1, #0
 80022c4:	f000 fa99 	bl	80027fa <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80022c8:	2028      	movs	r0, #40	@ 0x28
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002300 <BSP_PB_Init+0xd8>)
 80022ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d2:	2200      	movs	r2, #0
 80022d4:	4619      	mov	r1, r3
 80022d6:	f000 f99c 	bl	8002612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80022da:	2328      	movs	r3, #40	@ 0x28
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 f9b2 	bl	8002646 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3720      	adds	r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	2000000c 	.word	0x2000000c
 80022f4:	200008c4 	.word	0x200008c4
 80022f8:	0800b5a8 	.word	0x0800b5a8
 80022fc:	20000010 	.word	0x20000010
 8002300:	20000014 	.word	0x20000014

08002304 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4a04      	ldr	r2, [pc, #16]	@ (8002324 <BSP_PB_IRQHandler+0x20>)
 8002314:	4413      	add	r3, r2
 8002316:	4618      	mov	r0, r3
 8002318:	f000 faa0 	bl	800285c <HAL_EXTI_IRQHandler>
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	200008c4 	.word	0x200008c4

08002328 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800232c:	2000      	movs	r0, #0
 800232e:	f7fe fe1b 	bl	8000f68 <BSP_PB_Callback>
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002340:	2003      	movs	r0, #3
 8002342:	f000 f95b 	bl	80025fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002346:	2000      	movs	r0, #0
 8002348:	f000 f80e 	bl	8002368 <HAL_InitTick>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	71fb      	strb	r3, [r7, #7]
 8002356:	e001      	b.n	800235c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002358:	f7ff f9cc 	bl	80016f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800235c:	79fb      	ldrb	r3, [r7, #7]

}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002374:	4b16      	ldr	r3, [pc, #88]	@ (80023d0 <HAL_InitTick+0x68>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d022      	beq.n	80023c2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800237c:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <HAL_InitTick+0x6c>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b13      	ldr	r3, [pc, #76]	@ (80023d0 <HAL_InitTick+0x68>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002388:	fbb1 f3f3 	udiv	r3, r1, r3
 800238c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002390:	4618      	mov	r0, r3
 8002392:	f000 f966 	bl	8002662 <HAL_SYSTICK_Config>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10f      	bne.n	80023bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b0f      	cmp	r3, #15
 80023a0:	d809      	bhi.n	80023b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a2:	2200      	movs	r2, #0
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	f04f 30ff 	mov.w	r0, #4294967295
 80023aa:	f000 f932 	bl	8002612 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023ae:	4a0a      	ldr	r2, [pc, #40]	@ (80023d8 <HAL_InitTick+0x70>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	e007      	b.n	80023c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
 80023ba:	e004      	b.n	80023c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	e001      	b.n	80023c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	2000001c 	.word	0x2000001c
 80023d4:	20000004 	.word	0x20000004
 80023d8:	20000018 	.word	0x20000018

080023dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e0:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <HAL_IncTick+0x1c>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <HAL_IncTick+0x20>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4413      	add	r3, r2
 80023ea:	4a03      	ldr	r2, [pc, #12]	@ (80023f8 <HAL_IncTick+0x1c>)
 80023ec:	6013      	str	r3, [r2, #0]
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	200008cc 	.word	0x200008cc
 80023fc:	2000001c 	.word	0x2000001c

08002400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return uwTick;
 8002404:	4b03      	ldr	r3, [pc, #12]	@ (8002414 <HAL_GetTick+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	200008cc 	.word	0x200008cc

08002418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002420:	f7ff ffee 	bl	8002400 <HAL_GetTick>
 8002424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d004      	beq.n	800243c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002432:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <HAL_Delay+0x40>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4413      	add	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800243c:	bf00      	nop
 800243e:	f7ff ffdf 	bl	8002400 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	429a      	cmp	r2, r3
 800244c:	d8f7      	bhi.n	800243e <HAL_Delay+0x26>
  {
  }
}
 800244e:	bf00      	nop
 8002450:	bf00      	nop
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	2000001c 	.word	0x2000001c

0800245c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800246c:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <__NVIC_SetPriorityGrouping+0x44>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002478:	4013      	ands	r3, r2
 800247a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002484:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800248c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248e:	4a04      	ldr	r2, [pc, #16]	@ (80024a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	60d3      	str	r3, [r2, #12]
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a8:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <__NVIC_GetPriorityGrouping+0x18>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	f003 0307 	and.w	r3, r3, #7
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	db0b      	blt.n	80024ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	f003 021f 	and.w	r2, r3, #31
 80024d8:	4907      	ldr	r1, [pc, #28]	@ (80024f8 <__NVIC_EnableIRQ+0x38>)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	2001      	movs	r0, #1
 80024e2:	fa00 f202 	lsl.w	r2, r0, r2
 80024e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	e000e100 	.word	0xe000e100

080024fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	6039      	str	r1, [r7, #0]
 8002506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250c:	2b00      	cmp	r3, #0
 800250e:	db0a      	blt.n	8002526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	b2da      	uxtb	r2, r3
 8002514:	490c      	ldr	r1, [pc, #48]	@ (8002548 <__NVIC_SetPriority+0x4c>)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	0112      	lsls	r2, r2, #4
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	440b      	add	r3, r1
 8002520:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002524:	e00a      	b.n	800253c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4908      	ldr	r1, [pc, #32]	@ (800254c <__NVIC_SetPriority+0x50>)
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	3b04      	subs	r3, #4
 8002534:	0112      	lsls	r2, r2, #4
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	440b      	add	r3, r1
 800253a:	761a      	strb	r2, [r3, #24]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000e100 	.word	0xe000e100
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002550:	b480      	push	{r7}
 8002552:	b089      	sub	sp, #36	@ 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f1c3 0307 	rsb	r3, r3, #7
 800256a:	2b04      	cmp	r3, #4
 800256c:	bf28      	it	cs
 800256e:	2304      	movcs	r3, #4
 8002570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3304      	adds	r3, #4
 8002576:	2b06      	cmp	r3, #6
 8002578:	d902      	bls.n	8002580 <NVIC_EncodePriority+0x30>
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3b03      	subs	r3, #3
 800257e:	e000      	b.n	8002582 <NVIC_EncodePriority+0x32>
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002584:	f04f 32ff 	mov.w	r2, #4294967295
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43da      	mvns	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	401a      	ands	r2, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002598:	f04f 31ff 	mov.w	r1, #4294967295
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	fa01 f303 	lsl.w	r3, r1, r3
 80025a2:	43d9      	mvns	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	4313      	orrs	r3, r2
         );
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3724      	adds	r7, #36	@ 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025c8:	d301      	bcc.n	80025ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ca:	2301      	movs	r3, #1
 80025cc:	e00f      	b.n	80025ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ce:	4a0a      	ldr	r2, [pc, #40]	@ (80025f8 <SysTick_Config+0x40>)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d6:	210f      	movs	r1, #15
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295
 80025dc:	f7ff ff8e 	bl	80024fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e0:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <SysTick_Config+0x40>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e6:	4b04      	ldr	r3, [pc, #16]	@ (80025f8 <SysTick_Config+0x40>)
 80025e8:	2207      	movs	r2, #7
 80025ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	e000e010 	.word	0xe000e010

080025fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ff29 	bl	800245c <__NVIC_SetPriorityGrouping>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002620:	f7ff ff40 	bl	80024a4 <__NVIC_GetPriorityGrouping>
 8002624:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7ff ff90 	bl	8002550 <NVIC_EncodePriority>
 8002630:	4602      	mov	r2, r0
 8002632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff5f 	bl	80024fc <__NVIC_SetPriority>
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff33 	bl	80024c0 <__NVIC_EnableIRQ>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ffa4 	bl	80025b8 <SysTick_Config>
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800267a:	b480      	push	{r7}
 800267c:	b085      	sub	sp, #20
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d005      	beq.n	800269e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2204      	movs	r2, #4
 8002696:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
 800269c:	e037      	b.n	800270e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 020e 	bic.w	r2, r2, #14
 80026ac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026bc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	f003 021f 	and.w	r2, r3, #31
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	2101      	movs	r1, #1
 80026dc:	fa01 f202 	lsl.w	r2, r1, r2
 80026e0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026ea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00c      	beq.n	800270e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002702:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800270c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800271e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d00d      	beq.n	8002760 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2204      	movs	r2, #4
 8002748:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
 800275e:	e047      	b.n	80027f0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 020e 	bic.w	r2, r2, #14
 800276e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800278a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800278e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	2101      	movs	r1, #1
 800279e:	fa01 f202 	lsl.w	r2, r1, r2
 80027a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00c      	beq.n	80027d0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80027ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	4798      	blx	r3
    }
  }
  return status;
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80027fa:	b480      	push	{r7}
 80027fc:	b087      	sub	sp, #28
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	460b      	mov	r3, r1
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 800280c:	7afb      	ldrb	r3, [r7, #11]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d103      	bne.n	800281a <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	605a      	str	r2, [r3, #4]
      break;
 8002818:	e005      	b.n	8002826 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	75fb      	strb	r3, [r7, #23]
      break;
 8002824:	bf00      	nop
  }

  return status;
 8002826:	7dfb      	ldrb	r3, [r7, #23]
}
 8002828:	4618      	mov	r0, r3
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e003      	b.n	8002850 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800284e:	2300      	movs	r3, #0
  }
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	0c1b      	lsrs	r3, r3, #16
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	2201      	movs	r2, #1
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	4b0c      	ldr	r3, [pc, #48]	@ (80028b8 <HAL_EXTI_IRQHandler+0x5c>)
 8002886:	4413      	add	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4013      	ands	r3, r2
 8002892:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4798      	blx	r3
    }
  }
}
 80028ae:	bf00      	nop
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40010414 	.word	0x40010414

080028bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028ca:	e15a      	b.n	8002b82 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2101      	movs	r1, #1
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	fa01 f303 	lsl.w	r3, r1, r3
 80028d8:	4013      	ands	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 814c 	beq.w	8002b7c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d005      	beq.n	80028fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d130      	bne.n	800295e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2203      	movs	r2, #3
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002932:	2201      	movs	r2, #1
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	f003 0201 	and.w	r2, r3, #1
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b03      	cmp	r3, #3
 8002968:	d017      	beq.n	800299a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	2203      	movs	r2, #3
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d123      	bne.n	80029ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	08da      	lsrs	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3208      	adds	r2, #8
 80029ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	220f      	movs	r2, #15
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	08da      	lsrs	r2, r3, #3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3208      	adds	r2, #8
 80029e8:	6939      	ldr	r1, [r7, #16]
 80029ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	2203      	movs	r2, #3
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4013      	ands	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0203 	and.w	r2, r3, #3
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 80a6 	beq.w	8002b7c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a30:	4b5b      	ldr	r3, [pc, #364]	@ (8002ba0 <HAL_GPIO_Init+0x2e4>)
 8002a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a34:	4a5a      	ldr	r2, [pc, #360]	@ (8002ba0 <HAL_GPIO_Init+0x2e4>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a3c:	4b58      	ldr	r3, [pc, #352]	@ (8002ba0 <HAL_GPIO_Init+0x2e4>)
 8002a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a48:	4a56      	ldr	r2, [pc, #344]	@ (8002ba4 <HAL_GPIO_Init+0x2e8>)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	089b      	lsrs	r3, r3, #2
 8002a4e:	3302      	adds	r3, #2
 8002a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	220f      	movs	r2, #15
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a72:	d01f      	beq.n	8002ab4 <HAL_GPIO_Init+0x1f8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a4c      	ldr	r2, [pc, #304]	@ (8002ba8 <HAL_GPIO_Init+0x2ec>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d019      	beq.n	8002ab0 <HAL_GPIO_Init+0x1f4>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a4b      	ldr	r2, [pc, #300]	@ (8002bac <HAL_GPIO_Init+0x2f0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d013      	beq.n	8002aac <HAL_GPIO_Init+0x1f0>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a4a      	ldr	r2, [pc, #296]	@ (8002bb0 <HAL_GPIO_Init+0x2f4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_GPIO_Init+0x1ec>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a49      	ldr	r2, [pc, #292]	@ (8002bb4 <HAL_GPIO_Init+0x2f8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d007      	beq.n	8002aa4 <HAL_GPIO_Init+0x1e8>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a48      	ldr	r2, [pc, #288]	@ (8002bb8 <HAL_GPIO_Init+0x2fc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d101      	bne.n	8002aa0 <HAL_GPIO_Init+0x1e4>
 8002a9c:	2305      	movs	r3, #5
 8002a9e:	e00a      	b.n	8002ab6 <HAL_GPIO_Init+0x1fa>
 8002aa0:	2306      	movs	r3, #6
 8002aa2:	e008      	b.n	8002ab6 <HAL_GPIO_Init+0x1fa>
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	e006      	b.n	8002ab6 <HAL_GPIO_Init+0x1fa>
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e004      	b.n	8002ab6 <HAL_GPIO_Init+0x1fa>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e002      	b.n	8002ab6 <HAL_GPIO_Init+0x1fa>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <HAL_GPIO_Init+0x1fa>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	f002 0203 	and.w	r2, r2, #3
 8002abc:	0092      	lsls	r2, r2, #2
 8002abe:	4093      	lsls	r3, r2
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac6:	4937      	ldr	r1, [pc, #220]	@ (8002ba4 <HAL_GPIO_Init+0x2e8>)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	089b      	lsrs	r3, r3, #2
 8002acc:	3302      	adds	r3, #2
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ad4:	4b39      	ldr	r3, [pc, #228]	@ (8002bbc <HAL_GPIO_Init+0x300>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002af8:	4a30      	ldr	r2, [pc, #192]	@ (8002bbc <HAL_GPIO_Init+0x300>)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002afe:	4b2f      	ldr	r3, [pc, #188]	@ (8002bbc <HAL_GPIO_Init+0x300>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	43db      	mvns	r3, r3
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b22:	4a26      	ldr	r2, [pc, #152]	@ (8002bbc <HAL_GPIO_Init+0x300>)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b28:	4b24      	ldr	r3, [pc, #144]	@ (8002bbc <HAL_GPIO_Init+0x300>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bbc <HAL_GPIO_Init+0x300>)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b52:	4b1a      	ldr	r3, [pc, #104]	@ (8002bbc <HAL_GPIO_Init+0x300>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b76:	4a11      	ldr	r2, [pc, #68]	@ (8002bbc <HAL_GPIO_Init+0x300>)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f47f ae9d 	bne.w	80028cc <HAL_GPIO_Init+0x10>
  }
}
 8002b92:	bf00      	nop
 8002b94:	bf00      	nop
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40010000 	.word	0x40010000
 8002ba8:	48000400 	.word	0x48000400
 8002bac:	48000800 	.word	0x48000800
 8002bb0:	48000c00 	.word	0x48000c00
 8002bb4:	48001000 	.word	0x48001000
 8002bb8:	48001400 	.word	0x48001400
 8002bbc:	40010400 	.word	0x40010400

08002bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bd0:	787b      	ldrb	r3, [r7, #1]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bd6:	887a      	ldrh	r2, [r7, #2]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bdc:	e002      	b.n	8002be4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bde:	887a      	ldrh	r2, [r7, #2]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e08d      	b.n	8002d1e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d106      	bne.n	8002c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7fe fd90 	bl	800173c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2224      	movs	r2, #36	@ 0x24
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0201 	bic.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	e006      	b.n	8002c78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002c76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d108      	bne.n	8002c92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	e007      	b.n	8002ca2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69d9      	ldr	r1, [r3, #28]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1a      	ldr	r2, [r3, #32]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	461a      	mov	r2, r3
 8002d34:	460b      	mov	r3, r1
 8002d36:	817b      	strh	r3, [r7, #10]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	f040 80fd 	bne.w	8002f44 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_I2C_Master_Transmit+0x30>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e0f6      	b.n	8002f46 <HAL_I2C_Master_Transmit+0x21e>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d60:	f7ff fb4e 	bl	8002400 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	2319      	movs	r3, #25
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 fb72 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e0e1      	b.n	8002f46 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2221      	movs	r2, #33	@ 0x21
 8002d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2210      	movs	r2, #16
 8002d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	893a      	ldrh	r2, [r7, #8]
 8002da2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2bff      	cmp	r3, #255	@ 0xff
 8002db2:	d906      	bls.n	8002dc2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	22ff      	movs	r2, #255	@ 0xff
 8002db8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002dba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	e007      	b.n	8002dd2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002dcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dd0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d024      	beq.n	8002e24 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dde:	781a      	ldrb	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	3301      	adds	r3, #1
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	8979      	ldrh	r1, [r7, #10]
 8002e16:	4b4e      	ldr	r3, [pc, #312]	@ (8002f50 <HAL_I2C_Master_Transmit+0x228>)
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 fd6d 	bl	80038fc <I2C_TransferConfig>
 8002e22:	e066      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	8979      	ldrh	r1, [r7, #10]
 8002e2c:	4b48      	ldr	r3, [pc, #288]	@ (8002f50 <HAL_I2C_Master_Transmit+0x228>)
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fd62 	bl	80038fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002e38:	e05b      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	6a39      	ldr	r1, [r7, #32]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fb65 	bl	800350e <I2C_WaitOnTXISFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e07b      	b.n	8002f46 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	781a      	ldrb	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d034      	beq.n	8002ef2 <HAL_I2C_Master_Transmit+0x1ca>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d130      	bne.n	8002ef2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	2200      	movs	r2, #0
 8002e98:	2180      	movs	r1, #128	@ 0x80
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 fade 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e04d      	b.n	8002f46 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2bff      	cmp	r3, #255	@ 0xff
 8002eb2:	d90e      	bls.n	8002ed2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	22ff      	movs	r2, #255	@ 0xff
 8002eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	8979      	ldrh	r1, [r7, #10]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 fd16 	bl	80038fc <I2C_TransferConfig>
 8002ed0:	e00f      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	8979      	ldrh	r1, [r7, #10]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fd05 	bl	80038fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d19e      	bne.n	8002e3a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	6a39      	ldr	r1, [r7, #32]
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fb4b 	bl	800359c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e01a      	b.n	8002f46 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2220      	movs	r2, #32
 8002f16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6859      	ldr	r1, [r3, #4]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4b0c      	ldr	r3, [pc, #48]	@ (8002f54 <HAL_I2C_Master_Transmit+0x22c>)
 8002f24:	400b      	ands	r3, r1
 8002f26:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e000      	b.n	8002f46 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002f44:	2302      	movs	r3, #2
  }
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	80002000 	.word	0x80002000
 8002f54:	fe00e800 	.word	0xfe00e800

08002f58 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	461a      	mov	r2, r3
 8002f64:	460b      	mov	r3, r1
 8002f66:	817b      	strh	r3, [r7, #10]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	f040 80db 	bne.w	8003130 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_I2C_Master_Receive+0x30>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e0d4      	b.n	8003132 <HAL_I2C_Master_Receive+0x1da>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f90:	f7ff fa36 	bl	8002400 <HAL_GetTick>
 8002f94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	2319      	movs	r3, #25
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fa5a 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0bf      	b.n	8003132 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2222      	movs	r2, #34	@ 0x22
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	893a      	ldrh	r2, [r7, #8]
 8002fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2bff      	cmp	r3, #255	@ 0xff
 8002fe2:	d90e      	bls.n	8003002 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	22ff      	movs	r2, #255	@ 0xff
 8002fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	8979      	ldrh	r1, [r7, #10]
 8002ff2:	4b52      	ldr	r3, [pc, #328]	@ (800313c <HAL_I2C_Master_Receive+0x1e4>)
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 fc7e 	bl	80038fc <I2C_TransferConfig>
 8003000:	e06d      	b.n	80030de <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003010:	b2da      	uxtb	r2, r3
 8003012:	8979      	ldrh	r1, [r7, #10]
 8003014:	4b49      	ldr	r3, [pc, #292]	@ (800313c <HAL_I2C_Master_Receive+0x1e4>)
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fc6d 	bl	80038fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003022:	e05c      	b.n	80030de <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	6a39      	ldr	r1, [r7, #32]
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fafb 	bl	8003624 <I2C_WaitOnRXNEFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e07c      	b.n	8003132 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d034      	beq.n	80030de <HAL_I2C_Master_Receive+0x186>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003078:	2b00      	cmp	r3, #0
 800307a:	d130      	bne.n	80030de <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	2200      	movs	r2, #0
 8003084:	2180      	movs	r1, #128	@ 0x80
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f9e8 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e04d      	b.n	8003132 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	2bff      	cmp	r3, #255	@ 0xff
 800309e:	d90e      	bls.n	80030be <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	22ff      	movs	r2, #255	@ 0xff
 80030a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	8979      	ldrh	r1, [r7, #10]
 80030ae:	2300      	movs	r3, #0
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fc20 	bl	80038fc <I2C_TransferConfig>
 80030bc:	e00f      	b.n	80030de <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	8979      	ldrh	r1, [r7, #10]
 80030d0:	2300      	movs	r3, #0
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 fc0f 	bl	80038fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d19d      	bne.n	8003024 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	6a39      	ldr	r1, [r7, #32]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 fa55 	bl	800359c <I2C_WaitOnSTOPFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e01a      	b.n	8003132 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2220      	movs	r2, #32
 8003102:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6859      	ldr	r1, [r3, #4]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4b0c      	ldr	r3, [pc, #48]	@ (8003140 <HAL_I2C_Master_Receive+0x1e8>)
 8003110:	400b      	ands	r3, r1
 8003112:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	e000      	b.n	8003132 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003130:	2302      	movs	r3, #2
  }
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	80002400 	.word	0x80002400
 8003140:	fe00e800 	.word	0xfe00e800

08003144 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	4608      	mov	r0, r1
 800314e:	4611      	mov	r1, r2
 8003150:	461a      	mov	r2, r3
 8003152:	4603      	mov	r3, r0
 8003154:	817b      	strh	r3, [r7, #10]
 8003156:	460b      	mov	r3, r1
 8003158:	813b      	strh	r3, [r7, #8]
 800315a:	4613      	mov	r3, r2
 800315c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b20      	cmp	r3, #32
 8003168:	f040 80f9 	bne.w	800335e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <HAL_I2C_Mem_Write+0x34>
 8003172:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003174:	2b00      	cmp	r3, #0
 8003176:	d105      	bne.n	8003184 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800317e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0ed      	b.n	8003360 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_I2C_Mem_Write+0x4e>
 800318e:	2302      	movs	r3, #2
 8003190:	e0e6      	b.n	8003360 <HAL_I2C_Mem_Write+0x21c>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800319a:	f7ff f931 	bl	8002400 <HAL_GetTick>
 800319e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2319      	movs	r3, #25
 80031a6:	2201      	movs	r2, #1
 80031a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f955 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0d1      	b.n	8003360 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2221      	movs	r2, #33	@ 0x21
 80031c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2240      	movs	r2, #64	@ 0x40
 80031c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a3a      	ldr	r2, [r7, #32]
 80031d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80031dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031e4:	88f8      	ldrh	r0, [r7, #6]
 80031e6:	893a      	ldrh	r2, [r7, #8]
 80031e8:	8979      	ldrh	r1, [r7, #10]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	4603      	mov	r3, r0
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f8b9 	bl	800336c <I2C_RequestMemoryWrite>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0a9      	b.n	8003360 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	2bff      	cmp	r3, #255	@ 0xff
 8003214:	d90e      	bls.n	8003234 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	22ff      	movs	r2, #255	@ 0xff
 800321a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003220:	b2da      	uxtb	r2, r3
 8003222:	8979      	ldrh	r1, [r7, #10]
 8003224:	2300      	movs	r3, #0
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fb65 	bl	80038fc <I2C_TransferConfig>
 8003232:	e00f      	b.n	8003254 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003242:	b2da      	uxtb	r2, r3
 8003244:	8979      	ldrh	r1, [r7, #10]
 8003246:	2300      	movs	r3, #0
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fb54 	bl	80038fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f958 	bl	800350e <I2C_WaitOnTXISFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e07b      	b.n	8003360 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	781a      	ldrb	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d034      	beq.n	800330c <HAL_I2C_Mem_Write+0x1c8>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d130      	bne.n	800330c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b0:	2200      	movs	r2, #0
 80032b2:	2180      	movs	r1, #128	@ 0x80
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f8d1 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e04d      	b.n	8003360 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2bff      	cmp	r3, #255	@ 0xff
 80032cc:	d90e      	bls.n	80032ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	22ff      	movs	r2, #255	@ 0xff
 80032d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	8979      	ldrh	r1, [r7, #10]
 80032dc:	2300      	movs	r3, #0
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fb09 	bl	80038fc <I2C_TransferConfig>
 80032ea:	e00f      	b.n	800330c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	8979      	ldrh	r1, [r7, #10]
 80032fe:	2300      	movs	r3, #0
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 faf8 	bl	80038fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d19e      	bne.n	8003254 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f93e 	bl	800359c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e01a      	b.n	8003360 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2220      	movs	r2, #32
 8003330:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6859      	ldr	r1, [r3, #4]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b0a      	ldr	r3, [pc, #40]	@ (8003368 <HAL_I2C_Mem_Write+0x224>)
 800333e:	400b      	ands	r3, r1
 8003340:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	e000      	b.n	8003360 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800335e:	2302      	movs	r3, #2
  }
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	fe00e800 	.word	0xfe00e800

0800336c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af02      	add	r7, sp, #8
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	4608      	mov	r0, r1
 8003376:	4611      	mov	r1, r2
 8003378:	461a      	mov	r2, r3
 800337a:	4603      	mov	r3, r0
 800337c:	817b      	strh	r3, [r7, #10]
 800337e:	460b      	mov	r3, r1
 8003380:	813b      	strh	r3, [r7, #8]
 8003382:	4613      	mov	r3, r2
 8003384:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	8979      	ldrh	r1, [r7, #10]
 800338c:	4b20      	ldr	r3, [pc, #128]	@ (8003410 <I2C_RequestMemoryWrite+0xa4>)
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 fab1 	bl	80038fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	69b9      	ldr	r1, [r7, #24]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f8b5 	bl	800350e <I2C_WaitOnTXISFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e02c      	b.n	8003408 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d105      	bne.n	80033c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033b4:	893b      	ldrh	r3, [r7, #8]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80033be:	e015      	b.n	80033ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033c0:	893b      	ldrh	r3, [r7, #8]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ce:	69fa      	ldr	r2, [r7, #28]
 80033d0:	69b9      	ldr	r1, [r7, #24]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f89b 	bl	800350e <I2C_WaitOnTXISFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e012      	b.n	8003408 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033e2:	893b      	ldrh	r3, [r7, #8]
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2200      	movs	r2, #0
 80033f4:	2180      	movs	r1, #128	@ 0x80
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f830 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	80002000 	.word	0x80002000

08003414 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	d103      	bne.n	8003432 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2200      	movs	r2, #0
 8003430:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d007      	beq.n	8003450 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	619a      	str	r2, [r3, #24]
  }
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800346c:	e03b      	b.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	6839      	ldr	r1, [r7, #0]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f962 	bl	800373c <I2C_IsErrorOccurred>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e041      	b.n	8003506 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d02d      	beq.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348a:	f7fe ffb9 	bl	8002400 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d302      	bcc.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d122      	bne.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4013      	ands	r3, r2
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d113      	bne.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c2:	f043 0220 	orr.w	r2, r3, #32
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e00f      	b.n	8003506 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699a      	ldr	r2, [r3, #24]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4013      	ands	r3, r2
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	bf0c      	ite	eq
 80034f6:	2301      	moveq	r3, #1
 80034f8:	2300      	movne	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	429a      	cmp	r2, r3
 8003502:	d0b4      	beq.n	800346e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800351a:	e033      	b.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f90b 	bl	800373c <I2C_IsErrorOccurred>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e031      	b.n	8003594 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003536:	d025      	beq.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003538:	f7fe ff62 	bl	8002400 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	429a      	cmp	r2, r3
 8003546:	d302      	bcc.n	800354e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d11a      	bne.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b02      	cmp	r3, #2
 800355a:	d013      	beq.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e007      	b.n	8003594 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b02      	cmp	r3, #2
 8003590:	d1c4      	bne.n	800351c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a8:	e02f      	b.n	800360a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f8c4 	bl	800373c <I2C_IsErrorOccurred>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e02d      	b.n	800361a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035be:	f7fe ff1f 	bl	8002400 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d302      	bcc.n	80035d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d11a      	bne.n	800360a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d013      	beq.n	800360a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e6:	f043 0220 	orr.w	r2, r3, #32
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e007      	b.n	800361a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b20      	cmp	r3, #32
 8003616:	d1c8      	bne.n	80035aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003634:	e071      	b.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 f87e 	bl	800373c <I2C_IsErrorOccurred>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b20      	cmp	r3, #32
 8003656:	d13b      	bne.n	80036d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003658:	7dfb      	ldrb	r3, [r7, #23]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d138      	bne.n	80036d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b04      	cmp	r3, #4
 800366a:	d105      	bne.n	8003678 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b10      	cmp	r3, #16
 8003684:	d121      	bne.n	80036ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2210      	movs	r2, #16
 800368c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2204      	movs	r2, #4
 8003692:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2220      	movs	r2, #32
 800369a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6859      	ldr	r1, [r3, #4]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4b24      	ldr	r3, [pc, #144]	@ (8003738 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80036a8:	400b      	ands	r3, r1
 80036aa:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	75fb      	strb	r3, [r7, #23]
 80036c8:	e002      	b.n	80036d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80036d0:	f7fe fe96 	bl	8002400 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d302      	bcc.n	80036e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d119      	bne.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d116      	bne.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d00f      	beq.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fe:	f043 0220 	orr.w	r2, r3, #32
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b04      	cmp	r3, #4
 8003726:	d002      	beq.n	800372e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003728:	7dfb      	ldrb	r3, [r7, #23]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d083      	beq.n	8003636 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800372e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	fe00e800 	.word	0xfe00e800

0800373c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08a      	sub	sp, #40	@ 0x28
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b00      	cmp	r3, #0
 8003766:	d068      	beq.n	800383a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2210      	movs	r2, #16
 800376e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003770:	e049      	b.n	8003806 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d045      	beq.n	8003806 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fe fe41 	bl	8002400 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <I2C_IsErrorOccurred+0x54>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d13a      	bne.n	8003806 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800379a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037b2:	d121      	bne.n	80037f8 <I2C_IsErrorOccurred+0xbc>
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037ba:	d01d      	beq.n	80037f8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d01a      	beq.n	80037f8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80037d2:	f7fe fe15 	bl	8002400 <HAL_GetTick>
 80037d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037d8:	e00e      	b.n	80037f8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037da:	f7fe fe11 	bl	8002400 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b19      	cmp	r3, #25
 80037e6:	d907      	bls.n	80037f8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	f043 0320 	orr.w	r3, r3, #32
 80037ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80037f6:	e006      	b.n	8003806 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b20      	cmp	r3, #32
 8003804:	d1e9      	bne.n	80037da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b20      	cmp	r3, #32
 8003812:	d003      	beq.n	800381c <I2C_IsErrorOccurred+0xe0>
 8003814:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0aa      	beq.n	8003772 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800381c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003820:	2b00      	cmp	r3, #0
 8003822:	d103      	bne.n	800382c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2220      	movs	r2, #32
 800382a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	f043 0304 	orr.w	r3, r3, #4
 8003832:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00b      	beq.n	8003864 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800385c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	f043 0308 	orr.w	r3, r3, #8
 8003874:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800387e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00b      	beq.n	80038a8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	f043 0302 	orr.w	r3, r3, #2
 8003896:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80038a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d01c      	beq.n	80038ea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f7ff fdaf 	bl	8003414 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	4b0d      	ldr	r3, [pc, #52]	@ (80038f8 <I2C_IsErrorOccurred+0x1bc>)
 80038c2:	400b      	ands	r3, r1
 80038c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	431a      	orrs	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80038ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3728      	adds	r7, #40	@ 0x28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	fe00e800 	.word	0xfe00e800

080038fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	460b      	mov	r3, r1
 8003908:	817b      	strh	r3, [r7, #10]
 800390a:	4613      	mov	r3, r2
 800390c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800390e:	897b      	ldrh	r3, [r7, #10]
 8003910:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003914:	7a7b      	ldrb	r3, [r7, #9]
 8003916:	041b      	lsls	r3, r3, #16
 8003918:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800391c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	4313      	orrs	r3, r2
 8003926:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800392a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	0d5b      	lsrs	r3, r3, #21
 8003936:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800393a:	4b08      	ldr	r3, [pc, #32]	@ (800395c <I2C_TransferConfig+0x60>)
 800393c:	430b      	orrs	r3, r1
 800393e:	43db      	mvns	r3, r3
 8003940:	ea02 0103 	and.w	r1, r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	03ff63ff 	.word	0x03ff63ff

08003960 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b20      	cmp	r3, #32
 8003974:	d138      	bne.n	80039e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003980:	2302      	movs	r3, #2
 8003982:	e032      	b.n	80039ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2224      	movs	r2, #36	@ 0x24
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6819      	ldr	r1, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	e000      	b.n	80039ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039e8:	2302      	movs	r3, #2
  }
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b085      	sub	sp, #20
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d139      	bne.n	8003a80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e033      	b.n	8003a82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2224      	movs	r2, #36	@ 0x24
 8003a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e000      	b.n	8003a82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a80:	2302      	movs	r3, #2
  }
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d141      	bne.n	8003b22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a9e:	4b4b      	ldr	r3, [pc, #300]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003aa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aaa:	d131      	bne.n	8003b10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003aac:	4b47      	ldr	r3, [pc, #284]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ab2:	4a46      	ldr	r2, [pc, #280]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ab8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003abc:	4b43      	ldr	r3, [pc, #268]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ac4:	4a41      	ldr	r2, [pc, #260]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003aca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003acc:	4b40      	ldr	r3, [pc, #256]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2232      	movs	r2, #50	@ 0x32
 8003ad2:	fb02 f303 	mul.w	r3, r2, r3
 8003ad6:	4a3f      	ldr	r2, [pc, #252]	@ (8003bd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	0c9b      	lsrs	r3, r3, #18
 8003ade:	3301      	adds	r3, #1
 8003ae0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ae2:	e002      	b.n	8003aea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003aea:	4b38      	ldr	r3, [pc, #224]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003af6:	d102      	bne.n	8003afe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f2      	bne.n	8003ae4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003afe:	4b33      	ldr	r3, [pc, #204]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b0a:	d158      	bne.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e057      	b.n	8003bc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b10:	4b2e      	ldr	r3, [pc, #184]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b16:	4a2d      	ldr	r2, [pc, #180]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b20:	e04d      	b.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b28:	d141      	bne.n	8003bae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b2a:	4b28      	ldr	r3, [pc, #160]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b36:	d131      	bne.n	8003b9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b38:	4b24      	ldr	r3, [pc, #144]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b3e:	4a23      	ldr	r2, [pc, #140]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b48:	4b20      	ldr	r3, [pc, #128]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b50:	4a1e      	ldr	r2, [pc, #120]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b58:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2232      	movs	r2, #50	@ 0x32
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	0c9b      	lsrs	r3, r3, #18
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b6e:	e002      	b.n	8003b76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b76:	4b15      	ldr	r3, [pc, #84]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b82:	d102      	bne.n	8003b8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f2      	bne.n	8003b70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b8a:	4b10      	ldr	r3, [pc, #64]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b96:	d112      	bne.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e011      	b.n	8003bc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ba8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003bac:	e007      	b.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bae:	4b07      	ldr	r3, [pc, #28]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bb6:	4a05      	ldr	r2, [pc, #20]	@ (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bbc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	20000004 	.word	0x20000004
 8003bd4:	431bde83 	.word	0x431bde83

08003bd8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003bdc:	4b05      	ldr	r3, [pc, #20]	@ (8003bf4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4a04      	ldr	r2, [pc, #16]	@ (8003bf4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003be2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003be6:	6093      	str	r3, [r2, #8]
}
 8003be8:	bf00      	nop
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40007000 	.word	0x40007000

08003bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e2fe      	b.n	8004208 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d075      	beq.n	8003d02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c16:	4b97      	ldr	r3, [pc, #604]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c20:	4b94      	ldr	r3, [pc, #592]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	2b0c      	cmp	r3, #12
 8003c2e:	d102      	bne.n	8003c36 <HAL_RCC_OscConfig+0x3e>
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d002      	beq.n	8003c3c <HAL_RCC_OscConfig+0x44>
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d10b      	bne.n	8003c54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3c:	4b8d      	ldr	r3, [pc, #564]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d05b      	beq.n	8003d00 <HAL_RCC_OscConfig+0x108>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d157      	bne.n	8003d00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e2d9      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c5c:	d106      	bne.n	8003c6c <HAL_RCC_OscConfig+0x74>
 8003c5e:	4b85      	ldr	r3, [pc, #532]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a84      	ldr	r2, [pc, #528]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	e01d      	b.n	8003ca8 <HAL_RCC_OscConfig+0xb0>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c74:	d10c      	bne.n	8003c90 <HAL_RCC_OscConfig+0x98>
 8003c76:	4b7f      	ldr	r3, [pc, #508]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	4b7c      	ldr	r3, [pc, #496]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a7b      	ldr	r2, [pc, #492]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	e00b      	b.n	8003ca8 <HAL_RCC_OscConfig+0xb0>
 8003c90:	4b78      	ldr	r3, [pc, #480]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a77      	ldr	r2, [pc, #476]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	4b75      	ldr	r3, [pc, #468]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a74      	ldr	r2, [pc, #464]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d013      	beq.n	8003cd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fe fba6 	bl	8002400 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7fe fba2 	bl	8002400 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	@ 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e29e      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cca:	4b6a      	ldr	r3, [pc, #424]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0xc0>
 8003cd6:	e014      	b.n	8003d02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fe fb92 	bl	8002400 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce0:	f7fe fb8e 	bl	8002400 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b64      	cmp	r3, #100	@ 0x64
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e28a      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cf2:	4b60      	ldr	r3, [pc, #384]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0xe8>
 8003cfe:	e000      	b.n	8003d02 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d075      	beq.n	8003dfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d0e:	4b59      	ldr	r3, [pc, #356]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d18:	4b56      	ldr	r3, [pc, #344]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	2b0c      	cmp	r3, #12
 8003d26:	d102      	bne.n	8003d2e <HAL_RCC_OscConfig+0x136>
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d002      	beq.n	8003d34 <HAL_RCC_OscConfig+0x13c>
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d11f      	bne.n	8003d74 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d34:	4b4f      	ldr	r3, [pc, #316]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_RCC_OscConfig+0x154>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e25d      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4c:	4b49      	ldr	r3, [pc, #292]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	061b      	lsls	r3, r3, #24
 8003d5a:	4946      	ldr	r1, [pc, #280]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d60:	4b45      	ldr	r3, [pc, #276]	@ (8003e78 <HAL_RCC_OscConfig+0x280>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe faff 	bl	8002368 <HAL_InitTick>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d043      	beq.n	8003df8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e249      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d023      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a3c      	ldr	r2, [pc, #240]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fe fb3a 	bl	8002400 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d90:	f7fe fb36 	bl	8002400 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e232      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003da2:	4b34      	ldr	r3, [pc, #208]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dae:	4b31      	ldr	r3, [pc, #196]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	061b      	lsls	r3, r3, #24
 8003dbc:	492d      	ldr	r1, [pc, #180]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	604b      	str	r3, [r1, #4]
 8003dc2:	e01a      	b.n	8003dfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a2a      	ldr	r2, [pc, #168]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003dca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd0:	f7fe fb16 	bl	8002400 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd8:	f7fe fb12 	bl	8002400 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e20e      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dea:	4b22      	ldr	r3, [pc, #136]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x1e0>
 8003df6:	e000      	b.n	8003dfa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003df8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d041      	beq.n	8003e8a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01c      	beq.n	8003e48 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0e:	4b19      	ldr	r3, [pc, #100]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e14:	4a17      	ldr	r2, [pc, #92]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1e:	f7fe faef 	bl	8002400 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e26:	f7fe faeb 	bl	8002400 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e1e7      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e38:	4b0e      	ldr	r3, [pc, #56]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0ef      	beq.n	8003e26 <HAL_RCC_OscConfig+0x22e>
 8003e46:	e020      	b.n	8003e8a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e48:	4b0a      	ldr	r3, [pc, #40]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e4e:	4a09      	ldr	r2, [pc, #36]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e58:	f7fe fad2 	bl	8002400 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e5e:	e00d      	b.n	8003e7c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e60:	f7fe face 	bl	8002400 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d906      	bls.n	8003e7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e1ca      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
 8003e72:	bf00      	nop
 8003e74:	40021000 	.word	0x40021000
 8003e78:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e7c:	4b8c      	ldr	r3, [pc, #560]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1ea      	bne.n	8003e60 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 80a6 	beq.w	8003fe4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e9c:	4b84      	ldr	r3, [pc, #528]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_OscConfig+0x2b4>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x2b6>
 8003eac:	2300      	movs	r3, #0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00d      	beq.n	8003ece <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ebc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ebe:	4b7c      	ldr	r3, [pc, #496]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ece:	4b79      	ldr	r3, [pc, #484]	@ (80040b4 <HAL_RCC_OscConfig+0x4bc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d118      	bne.n	8003f0c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eda:	4b76      	ldr	r3, [pc, #472]	@ (80040b4 <HAL_RCC_OscConfig+0x4bc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a75      	ldr	r2, [pc, #468]	@ (80040b4 <HAL_RCC_OscConfig+0x4bc>)
 8003ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ee6:	f7fe fa8b 	bl	8002400 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eee:	f7fe fa87 	bl	8002400 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e183      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f00:	4b6c      	ldr	r3, [pc, #432]	@ (80040b4 <HAL_RCC_OscConfig+0x4bc>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0f0      	beq.n	8003eee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d108      	bne.n	8003f26 <HAL_RCC_OscConfig+0x32e>
 8003f14:	4b66      	ldr	r3, [pc, #408]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1a:	4a65      	ldr	r2, [pc, #404]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f24:	e024      	b.n	8003f70 <HAL_RCC_OscConfig+0x378>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b05      	cmp	r3, #5
 8003f2c:	d110      	bne.n	8003f50 <HAL_RCC_OscConfig+0x358>
 8003f2e:	4b60      	ldr	r3, [pc, #384]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f34:	4a5e      	ldr	r2, [pc, #376]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003f36:	f043 0304 	orr.w	r3, r3, #4
 8003f3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f3e:	4b5c      	ldr	r3, [pc, #368]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f44:	4a5a      	ldr	r2, [pc, #360]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f4e:	e00f      	b.n	8003f70 <HAL_RCC_OscConfig+0x378>
 8003f50:	4b57      	ldr	r3, [pc, #348]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f56:	4a56      	ldr	r2, [pc, #344]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003f58:	f023 0301 	bic.w	r3, r3, #1
 8003f5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f60:	4b53      	ldr	r3, [pc, #332]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f66:	4a52      	ldr	r2, [pc, #328]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003f68:	f023 0304 	bic.w	r3, r3, #4
 8003f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d016      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f78:	f7fe fa42 	bl	8002400 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f80:	f7fe fa3e 	bl	8002400 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e138      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f96:	4b46      	ldr	r3, [pc, #280]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0ed      	beq.n	8003f80 <HAL_RCC_OscConfig+0x388>
 8003fa4:	e015      	b.n	8003fd2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa6:	f7fe fa2b 	bl	8002400 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fe fa27 	bl	8002400 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e121      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fc4:	4b3a      	ldr	r3, [pc, #232]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1ed      	bne.n	8003fae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fd2:	7ffb      	ldrb	r3, [r7, #31]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d105      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd8:	4b35      	ldr	r3, [pc, #212]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fdc:	4a34      	ldr	r2, [pc, #208]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003fde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fe2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d03c      	beq.n	800406a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01c      	beq.n	8004032 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8003ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ffe:	4a2c      	ldr	r2, [pc, #176]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004008:	f7fe f9fa 	bl	8002400 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004010:	f7fe f9f6 	bl	8002400 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e0f2      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004022:	4b23      	ldr	r3, [pc, #140]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8004024:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0ef      	beq.n	8004010 <HAL_RCC_OscConfig+0x418>
 8004030:	e01b      	b.n	800406a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004032:	4b1f      	ldr	r3, [pc, #124]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8004034:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004038:	4a1d      	ldr	r2, [pc, #116]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 800403a:	f023 0301 	bic.w	r3, r3, #1
 800403e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004042:	f7fe f9dd 	bl	8002400 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800404a:	f7fe f9d9 	bl	8002400 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e0d5      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800405c:	4b14      	ldr	r3, [pc, #80]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 800405e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1ef      	bne.n	800404a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80c9 	beq.w	8004206 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004074:	4b0e      	ldr	r3, [pc, #56]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 030c 	and.w	r3, r3, #12
 800407c:	2b0c      	cmp	r3, #12
 800407e:	f000 8083 	beq.w	8004188 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d15e      	bne.n	8004148 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408a:	4b09      	ldr	r3, [pc, #36]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a08      	ldr	r2, [pc, #32]	@ (80040b0 <HAL_RCC_OscConfig+0x4b8>)
 8004090:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004096:	f7fe f9b3 	bl	8002400 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800409c:	e00c      	b.n	80040b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409e:	f7fe f9af 	bl	8002400 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d905      	bls.n	80040b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e0ab      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
 80040b0:	40021000 	.word	0x40021000
 80040b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b8:	4b55      	ldr	r3, [pc, #340]	@ (8004210 <HAL_RCC_OscConfig+0x618>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1ec      	bne.n	800409e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040c4:	4b52      	ldr	r3, [pc, #328]	@ (8004210 <HAL_RCC_OscConfig+0x618>)
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	4b52      	ldr	r3, [pc, #328]	@ (8004214 <HAL_RCC_OscConfig+0x61c>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6a11      	ldr	r1, [r2, #32]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040d4:	3a01      	subs	r2, #1
 80040d6:	0112      	lsls	r2, r2, #4
 80040d8:	4311      	orrs	r1, r2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80040de:	0212      	lsls	r2, r2, #8
 80040e0:	4311      	orrs	r1, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80040e6:	0852      	lsrs	r2, r2, #1
 80040e8:	3a01      	subs	r2, #1
 80040ea:	0552      	lsls	r2, r2, #21
 80040ec:	4311      	orrs	r1, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040f2:	0852      	lsrs	r2, r2, #1
 80040f4:	3a01      	subs	r2, #1
 80040f6:	0652      	lsls	r2, r2, #25
 80040f8:	4311      	orrs	r1, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80040fe:	06d2      	lsls	r2, r2, #27
 8004100:	430a      	orrs	r2, r1
 8004102:	4943      	ldr	r1, [pc, #268]	@ (8004210 <HAL_RCC_OscConfig+0x618>)
 8004104:	4313      	orrs	r3, r2
 8004106:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004108:	4b41      	ldr	r3, [pc, #260]	@ (8004210 <HAL_RCC_OscConfig+0x618>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a40      	ldr	r2, [pc, #256]	@ (8004210 <HAL_RCC_OscConfig+0x618>)
 800410e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004112:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004114:	4b3e      	ldr	r3, [pc, #248]	@ (8004210 <HAL_RCC_OscConfig+0x618>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4a3d      	ldr	r2, [pc, #244]	@ (8004210 <HAL_RCC_OscConfig+0x618>)
 800411a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800411e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fe f96e 	bl	8002400 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004128:	f7fe f96a 	bl	8002400 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e066      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413a:	4b35      	ldr	r3, [pc, #212]	@ (8004210 <HAL_RCC_OscConfig+0x618>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x530>
 8004146:	e05e      	b.n	8004206 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004148:	4b31      	ldr	r3, [pc, #196]	@ (8004210 <HAL_RCC_OscConfig+0x618>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a30      	ldr	r2, [pc, #192]	@ (8004210 <HAL_RCC_OscConfig+0x618>)
 800414e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7fe f954 	bl	8002400 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415c:	f7fe f950 	bl	8002400 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e04c      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800416e:	4b28      	ldr	r3, [pc, #160]	@ (8004210 <HAL_RCC_OscConfig+0x618>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800417a:	4b25      	ldr	r3, [pc, #148]	@ (8004210 <HAL_RCC_OscConfig+0x618>)
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	4924      	ldr	r1, [pc, #144]	@ (8004210 <HAL_RCC_OscConfig+0x618>)
 8004180:	4b25      	ldr	r3, [pc, #148]	@ (8004218 <HAL_RCC_OscConfig+0x620>)
 8004182:	4013      	ands	r3, r2
 8004184:	60cb      	str	r3, [r1, #12]
 8004186:	e03e      	b.n	8004206 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e039      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004194:	4b1e      	ldr	r3, [pc, #120]	@ (8004210 <HAL_RCC_OscConfig+0x618>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f003 0203 	and.w	r2, r3, #3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d12c      	bne.n	8004202 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b2:	3b01      	subs	r3, #1
 80041b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d123      	bne.n	8004202 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d11b      	bne.n	8004202 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d113      	bne.n	8004202 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e4:	085b      	lsrs	r3, r3, #1
 80041e6:	3b01      	subs	r3, #1
 80041e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d109      	bne.n	8004202 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f8:	085b      	lsrs	r3, r3, #1
 80041fa:	3b01      	subs	r3, #1
 80041fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041fe:	429a      	cmp	r2, r3
 8004200:	d001      	beq.n	8004206 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3720      	adds	r7, #32
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40021000 	.word	0x40021000
 8004214:	019f800c 	.word	0x019f800c
 8004218:	feeefffc 	.word	0xfeeefffc

0800421c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e11e      	b.n	8004472 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004234:	4b91      	ldr	r3, [pc, #580]	@ (800447c <HAL_RCC_ClockConfig+0x260>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d910      	bls.n	8004264 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004242:	4b8e      	ldr	r3, [pc, #568]	@ (800447c <HAL_RCC_ClockConfig+0x260>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 020f 	bic.w	r2, r3, #15
 800424a:	498c      	ldr	r1, [pc, #560]	@ (800447c <HAL_RCC_ClockConfig+0x260>)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004252:	4b8a      	ldr	r3, [pc, #552]	@ (800447c <HAL_RCC_ClockConfig+0x260>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e106      	b.n	8004472 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d073      	beq.n	8004358 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b03      	cmp	r3, #3
 8004276:	d129      	bne.n	80042cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004278:	4b81      	ldr	r3, [pc, #516]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0f4      	b.n	8004472 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004288:	f000 f99e 	bl	80045c8 <RCC_GetSysClockFreqFromPLLSource>
 800428c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	4a7c      	ldr	r2, [pc, #496]	@ (8004484 <HAL_RCC_ClockConfig+0x268>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d93f      	bls.n	8004316 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004296:	4b7a      	ldr	r3, [pc, #488]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d033      	beq.n	8004316 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d12f      	bne.n	8004316 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042b6:	4b72      	ldr	r3, [pc, #456]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042be:	4a70      	ldr	r2, [pc, #448]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 80042c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042c6:	2380      	movs	r3, #128	@ 0x80
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	e024      	b.n	8004316 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d107      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0c6      	b.n	8004472 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042e4:	4b66      	ldr	r3, [pc, #408]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0be      	b.n	8004472 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80042f4:	f000 f8ce 	bl	8004494 <HAL_RCC_GetSysClockFreq>
 80042f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	4a61      	ldr	r2, [pc, #388]	@ (8004484 <HAL_RCC_ClockConfig+0x268>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d909      	bls.n	8004316 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004302:	4b5f      	ldr	r3, [pc, #380]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800430a:	4a5d      	ldr	r2, [pc, #372]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 800430c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004310:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004312:	2380      	movs	r3, #128	@ 0x80
 8004314:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004316:	4b5a      	ldr	r3, [pc, #360]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f023 0203 	bic.w	r2, r3, #3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4957      	ldr	r1, [pc, #348]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 8004324:	4313      	orrs	r3, r2
 8004326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004328:	f7fe f86a 	bl	8002400 <HAL_GetTick>
 800432c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432e:	e00a      	b.n	8004346 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004330:	f7fe f866 	bl	8002400 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e095      	b.n	8004472 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	4b4e      	ldr	r3, [pc, #312]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 020c 	and.w	r2, r3, #12
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	429a      	cmp	r2, r3
 8004356:	d1eb      	bne.n	8004330 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d023      	beq.n	80043ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004370:	4b43      	ldr	r3, [pc, #268]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	4a42      	ldr	r2, [pc, #264]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 8004376:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800437a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004388:	4b3d      	ldr	r3, [pc, #244]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004390:	4a3b      	ldr	r2, [pc, #236]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 8004392:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004396:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004398:	4b39      	ldr	r3, [pc, #228]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	4936      	ldr	r1, [pc, #216]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	608b      	str	r3, [r1, #8]
 80043aa:	e008      	b.n	80043be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2b80      	cmp	r3, #128	@ 0x80
 80043b0:	d105      	bne.n	80043be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80043b2:	4b33      	ldr	r3, [pc, #204]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	4a32      	ldr	r2, [pc, #200]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 80043b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043be:	4b2f      	ldr	r3, [pc, #188]	@ (800447c <HAL_RCC_ClockConfig+0x260>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d21d      	bcs.n	8004408 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043cc:	4b2b      	ldr	r3, [pc, #172]	@ (800447c <HAL_RCC_ClockConfig+0x260>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f023 020f 	bic.w	r2, r3, #15
 80043d4:	4929      	ldr	r1, [pc, #164]	@ (800447c <HAL_RCC_ClockConfig+0x260>)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	4313      	orrs	r3, r2
 80043da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043dc:	f7fe f810 	bl	8002400 <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e4:	f7fe f80c 	bl	8002400 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e03b      	b.n	8004472 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fa:	4b20      	ldr	r3, [pc, #128]	@ (800447c <HAL_RCC_ClockConfig+0x260>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d1ed      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004414:	4b1a      	ldr	r3, [pc, #104]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	4917      	ldr	r1, [pc, #92]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 8004422:	4313      	orrs	r3, r2
 8004424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004432:	4b13      	ldr	r3, [pc, #76]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	490f      	ldr	r1, [pc, #60]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 8004442:	4313      	orrs	r3, r2
 8004444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004446:	f000 f825 	bl	8004494 <HAL_RCC_GetSysClockFreq>
 800444a:	4602      	mov	r2, r0
 800444c:	4b0c      	ldr	r3, [pc, #48]	@ (8004480 <HAL_RCC_ClockConfig+0x264>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	490c      	ldr	r1, [pc, #48]	@ (8004488 <HAL_RCC_ClockConfig+0x26c>)
 8004458:	5ccb      	ldrb	r3, [r1, r3]
 800445a:	f003 031f 	and.w	r3, r3, #31
 800445e:	fa22 f303 	lsr.w	r3, r2, r3
 8004462:	4a0a      	ldr	r2, [pc, #40]	@ (800448c <HAL_RCC_ClockConfig+0x270>)
 8004464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004466:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <HAL_RCC_ClockConfig+0x274>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f7fd ff7c 	bl	8002368 <HAL_InitTick>
 8004470:	4603      	mov	r3, r0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40022000 	.word	0x40022000
 8004480:	40021000 	.word	0x40021000
 8004484:	04c4b400 	.word	0x04c4b400
 8004488:	08009ab4 	.word	0x08009ab4
 800448c:	20000004 	.word	0x20000004
 8004490:	20000018 	.word	0x20000018

08004494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800449a:	4b2c      	ldr	r3, [pc, #176]	@ (800454c <HAL_RCC_GetSysClockFreq+0xb8>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d102      	bne.n	80044ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004550 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	e047      	b.n	800453c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80044ac:	4b27      	ldr	r3, [pc, #156]	@ (800454c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 030c 	and.w	r3, r3, #12
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d102      	bne.n	80044be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044b8:	4b26      	ldr	r3, [pc, #152]	@ (8004554 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	e03e      	b.n	800453c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80044be:	4b23      	ldr	r3, [pc, #140]	@ (800454c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b0c      	cmp	r3, #12
 80044c8:	d136      	bne.n	8004538 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044ca:	4b20      	ldr	r3, [pc, #128]	@ (800454c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044d4:	4b1d      	ldr	r3, [pc, #116]	@ (800454c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	091b      	lsrs	r3, r3, #4
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	3301      	adds	r3, #1
 80044e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d10c      	bne.n	8004502 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044e8:	4a1a      	ldr	r2, [pc, #104]	@ (8004554 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	4a16      	ldr	r2, [pc, #88]	@ (800454c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044f2:	68d2      	ldr	r2, [r2, #12]
 80044f4:	0a12      	lsrs	r2, r2, #8
 80044f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044fa:	fb02 f303 	mul.w	r3, r2, r3
 80044fe:	617b      	str	r3, [r7, #20]
      break;
 8004500:	e00c      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004502:	4a13      	ldr	r2, [pc, #76]	@ (8004550 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	fbb2 f3f3 	udiv	r3, r2, r3
 800450a:	4a10      	ldr	r2, [pc, #64]	@ (800454c <HAL_RCC_GetSysClockFreq+0xb8>)
 800450c:	68d2      	ldr	r2, [r2, #12]
 800450e:	0a12      	lsrs	r2, r2, #8
 8004510:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004514:	fb02 f303 	mul.w	r3, r2, r3
 8004518:	617b      	str	r3, [r7, #20]
      break;
 800451a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800451c:	4b0b      	ldr	r3, [pc, #44]	@ (800454c <HAL_RCC_GetSysClockFreq+0xb8>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	0e5b      	lsrs	r3, r3, #25
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	3301      	adds	r3, #1
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	e001      	b.n	800453c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800453c:	693b      	ldr	r3, [r7, #16]
}
 800453e:	4618      	mov	r0, r3
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40021000 	.word	0x40021000
 8004550:	00f42400 	.word	0x00f42400
 8004554:	016e3600 	.word	0x016e3600

08004558 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800455c:	4b03      	ldr	r3, [pc, #12]	@ (800456c <HAL_RCC_GetHCLKFreq+0x14>)
 800455e:	681b      	ldr	r3, [r3, #0]
}
 8004560:	4618      	mov	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	20000004 	.word	0x20000004

08004570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004574:	f7ff fff0 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b06      	ldr	r3, [pc, #24]	@ (8004594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4904      	ldr	r1, [pc, #16]	@ (8004598 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	f003 031f 	and.w	r3, r3, #31
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004590:	4618      	mov	r0, r3
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40021000 	.word	0x40021000
 8004598:	08009ac4 	.word	0x08009ac4

0800459c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045a0:	f7ff ffda 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 80045a4:	4602      	mov	r2, r0
 80045a6:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	0adb      	lsrs	r3, r3, #11
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	4904      	ldr	r1, [pc, #16]	@ (80045c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045b2:	5ccb      	ldrb	r3, [r1, r3]
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40021000 	.word	0x40021000
 80045c4:	08009ac4 	.word	0x08009ac4

080045c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	091b      	lsrs	r3, r3, #4
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	3301      	adds	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d10c      	bne.n	8004606 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045ec:	4a17      	ldr	r2, [pc, #92]	@ (800464c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	4a14      	ldr	r2, [pc, #80]	@ (8004648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045f6:	68d2      	ldr	r2, [r2, #12]
 80045f8:	0a12      	lsrs	r2, r2, #8
 80045fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	617b      	str	r3, [r7, #20]
    break;
 8004604:	e00c      	b.n	8004620 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004606:	4a12      	ldr	r2, [pc, #72]	@ (8004650 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	fbb2 f3f3 	udiv	r3, r2, r3
 800460e:	4a0e      	ldr	r2, [pc, #56]	@ (8004648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004610:	68d2      	ldr	r2, [r2, #12]
 8004612:	0a12      	lsrs	r2, r2, #8
 8004614:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004618:	fb02 f303 	mul.w	r3, r2, r3
 800461c:	617b      	str	r3, [r7, #20]
    break;
 800461e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004620:	4b09      	ldr	r3, [pc, #36]	@ (8004648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	0e5b      	lsrs	r3, r3, #25
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	3301      	adds	r3, #1
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800463a:	687b      	ldr	r3, [r7, #4]
}
 800463c:	4618      	mov	r0, r3
 800463e:	371c      	adds	r7, #28
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	40021000 	.word	0x40021000
 800464c:	016e3600 	.word	0x016e3600
 8004650:	00f42400 	.word	0x00f42400

08004654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800465c:	2300      	movs	r3, #0
 800465e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004660:	2300      	movs	r3, #0
 8004662:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 8098 	beq.w	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004672:	2300      	movs	r3, #0
 8004674:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004676:	4b43      	ldr	r3, [pc, #268]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10d      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004682:	4b40      	ldr	r3, [pc, #256]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004686:	4a3f      	ldr	r2, [pc, #252]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800468c:	6593      	str	r3, [r2, #88]	@ 0x58
 800468e:	4b3d      	ldr	r3, [pc, #244]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004696:	60bb      	str	r3, [r7, #8]
 8004698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800469a:	2301      	movs	r3, #1
 800469c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800469e:	4b3a      	ldr	r3, [pc, #232]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a39      	ldr	r2, [pc, #228]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046aa:	f7fd fea9 	bl	8002400 <HAL_GetTick>
 80046ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046b0:	e009      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b2:	f7fd fea5 	bl	8002400 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d902      	bls.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	74fb      	strb	r3, [r7, #19]
        break;
 80046c4:	e005      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046c6:	4b30      	ldr	r3, [pc, #192]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0ef      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80046d2:	7cfb      	ldrb	r3, [r7, #19]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d159      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d01e      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d019      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046f4:	4b23      	ldr	r3, [pc, #140]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004700:	4b20      	ldr	r3, [pc, #128]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004706:	4a1f      	ldr	r2, [pc, #124]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800470c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004710:	4b1c      	ldr	r3, [pc, #112]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004716:	4a1b      	ldr	r2, [pc, #108]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800471c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004720:	4a18      	ldr	r2, [pc, #96]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d016      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004732:	f7fd fe65 	bl	8002400 <HAL_GetTick>
 8004736:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004738:	e00b      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473a:	f7fd fe61 	bl	8002400 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004748:	4293      	cmp	r3, r2
 800474a:	d902      	bls.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	74fb      	strb	r3, [r7, #19]
            break;
 8004750:	e006      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004752:	4b0c      	ldr	r3, [pc, #48]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0ec      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10b      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004766:	4b07      	ldr	r3, [pc, #28]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004774:	4903      	ldr	r1, [pc, #12]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800477c:	e008      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800477e:	7cfb      	ldrb	r3, [r7, #19]
 8004780:	74bb      	strb	r3, [r7, #18]
 8004782:	e005      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004784:	40021000 	.word	0x40021000
 8004788:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004790:	7c7b      	ldrb	r3, [r7, #17]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d105      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004796:	4ba7      	ldr	r3, [pc, #668]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800479a:	4aa6      	ldr	r2, [pc, #664]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800479c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047ae:	4ba1      	ldr	r3, [pc, #644]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b4:	f023 0203 	bic.w	r2, r3, #3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	499d      	ldr	r1, [pc, #628]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047d0:	4b98      	ldr	r3, [pc, #608]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d6:	f023 020c 	bic.w	r2, r3, #12
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	4995      	ldr	r1, [pc, #596]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047f2:	4b90      	ldr	r3, [pc, #576]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	498c      	ldr	r1, [pc, #560]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004814:	4b87      	ldr	r3, [pc, #540]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	4984      	ldr	r1, [pc, #528]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0310 	and.w	r3, r3, #16
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004836:	4b7f      	ldr	r3, [pc, #508]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	497b      	ldr	r1, [pc, #492]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0320 	and.w	r3, r3, #32
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004858:	4b76      	ldr	r3, [pc, #472]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	4973      	ldr	r1, [pc, #460]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800487a:	4b6e      	ldr	r3, [pc, #440]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004880:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	496a      	ldr	r1, [pc, #424]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800489c:	4b65      	ldr	r3, [pc, #404]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	4962      	ldr	r1, [pc, #392]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048be:	4b5d      	ldr	r3, [pc, #372]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048cc:	4959      	ldr	r1, [pc, #356]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048e0:	4b54      	ldr	r3, [pc, #336]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048e6:	f023 0203 	bic.w	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ee:	4951      	ldr	r1, [pc, #324]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004902:	4b4c      	ldr	r3, [pc, #304]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004908:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004910:	4948      	ldr	r1, [pc, #288]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004920:	2b00      	cmp	r3, #0
 8004922:	d015      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004924:	4b43      	ldr	r3, [pc, #268]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800492a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004932:	4940      	ldr	r1, [pc, #256]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004942:	d105      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004944:	4b3b      	ldr	r3, [pc, #236]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	4a3a      	ldr	r2, [pc, #232]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800494a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800494e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004958:	2b00      	cmp	r3, #0
 800495a:	d015      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800495c:	4b35      	ldr	r3, [pc, #212]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004962:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800496a:	4932      	ldr	r1, [pc, #200]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004976:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800497a:	d105      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800497c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4a2c      	ldr	r2, [pc, #176]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004986:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d015      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004994:	4b27      	ldr	r3, [pc, #156]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800499a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a2:	4924      	ldr	r1, [pc, #144]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049b2:	d105      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d015      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049cc:	4b19      	ldr	r3, [pc, #100]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049da:	4916      	ldr	r1, [pc, #88]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ea:	d105      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ec:	4b11      	ldr	r3, [pc, #68]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4a10      	ldr	r2, [pc, #64]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d019      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a04:	4b0b      	ldr	r3, [pc, #44]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a12:	4908      	ldr	r1, [pc, #32]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a22:	d109      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a24:	4b03      	ldr	r3, [pc, #12]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4a02      	ldr	r2, [pc, #8]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a2e:	60d3      	str	r3, [r2, #12]
 8004a30:	e002      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004a32:	bf00      	nop
 8004a34:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d015      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a44:	4b29      	ldr	r3, [pc, #164]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a52:	4926      	ldr	r1, [pc, #152]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a62:	d105      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a64:	4b21      	ldr	r3, [pc, #132]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	4a20      	ldr	r2, [pc, #128]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a6e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d015      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a82:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a8a:	4918      	ldr	r1, [pc, #96]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a9a:	d105      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a9c:	4b13      	ldr	r3, [pc, #76]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4a12      	ldr	r2, [pc, #72]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004aa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d015      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004aba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac2:	490a      	ldr	r1, [pc, #40]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ace:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ad2:	d105      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ad4:	4b05      	ldr	r3, [pc, #20]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4a04      	ldr	r2, [pc, #16]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ada:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ade:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004ae0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40021000 	.word	0x40021000

08004af0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e042      	b.n	8004b88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d106      	bne.n	8004b1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7fc fe6b 	bl	80017f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2224      	movs	r2, #36	@ 0x24
 8004b1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0201 	bic.w	r2, r2, #1
 8004b30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 ff60 	bl	8005a00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fc61 	bl	8005408 <UART_SetConfig>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e01b      	b.n	8004b88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0201 	orr.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 ffdf 	bl	8005b44 <UART_CheckIdleState>
 8004b86:	4603      	mov	r3, r0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	@ 0x28
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d17b      	bne.n	8004ca2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <HAL_UART_Transmit+0x26>
 8004bb0:	88fb      	ldrh	r3, [r7, #6]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e074      	b.n	8004ca4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2221      	movs	r2, #33	@ 0x21
 8004bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bca:	f7fd fc19 	bl	8002400 <HAL_GetTick>
 8004bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	88fa      	ldrh	r2, [r7, #6]
 8004bd4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	88fa      	ldrh	r2, [r7, #6]
 8004bdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be8:	d108      	bne.n	8004bfc <HAL_UART_Transmit+0x6c>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d104      	bne.n	8004bfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	e003      	b.n	8004c04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c04:	e030      	b.n	8004c68 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2180      	movs	r1, #128	@ 0x80
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f001 f841 	bl	8005c98 <UART_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e03d      	b.n	8004ca4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10b      	bne.n	8004c46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c3c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	3302      	adds	r3, #2
 8004c42:	61bb      	str	r3, [r7, #24]
 8004c44:	e007      	b.n	8004c56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	781a      	ldrb	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	3301      	adds	r3, #1
 8004c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1c8      	bne.n	8004c06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2140      	movs	r1, #64	@ 0x40
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f001 f80a 	bl	8005c98 <UART_WaitOnFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e006      	b.n	8004ca4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e000      	b.n	8004ca4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004ca2:	2302      	movs	r3, #2
  }
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3720      	adds	r7, #32
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08a      	sub	sp, #40	@ 0x28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	d137      	bne.n	8004d34 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_UART_Receive_IT+0x24>
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e030      	b.n	8004d36 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a18      	ldr	r2, [pc, #96]	@ (8004d40 <HAL_UART_Receive_IT+0x94>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d01f      	beq.n	8004d24 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d018      	beq.n	8004d24 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	e853 3f00 	ldrex	r3, [r3]
 8004cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d10:	623b      	str	r3, [r7, #32]
 8004d12:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	69f9      	ldr	r1, [r7, #28]
 8004d16:	6a3a      	ldr	r2, [r7, #32]
 8004d18:	e841 2300 	strex	r3, r2, [r1]
 8004d1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e6      	bne.n	8004cf2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	461a      	mov	r2, r3
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f001 f822 	bl	8005d74 <UART_Start_Receive_IT>
 8004d30:	4603      	mov	r3, r0
 8004d32:	e000      	b.n	8004d36 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d34:	2302      	movs	r3, #2
  }
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3728      	adds	r7, #40	@ 0x28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40008000 	.word	0x40008000

08004d44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b0ba      	sub	sp, #232	@ 0xe8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004d6e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004d72:	4013      	ands	r3, r2
 8004d74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004d78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d11b      	bne.n	8004db8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d015      	beq.n	8004db8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d90:	f003 0320 	and.w	r3, r3, #32
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d105      	bne.n	8004da4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d009      	beq.n	8004db8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 8300 	beq.w	80053ae <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	4798      	blx	r3
      }
      return;
 8004db6:	e2fa      	b.n	80053ae <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004db8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8123 	beq.w	8005008 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004dc2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004dc6:	4b8d      	ldr	r3, [pc, #564]	@ (8004ffc <HAL_UART_IRQHandler+0x2b8>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004dce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004dd2:	4b8b      	ldr	r3, [pc, #556]	@ (8005000 <HAL_UART_IRQHandler+0x2bc>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 8116 	beq.w	8005008 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d011      	beq.n	8004e0c <HAL_UART_IRQHandler+0xc8>
 8004de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00b      	beq.n	8004e0c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e02:	f043 0201 	orr.w	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d011      	beq.n	8004e3c <HAL_UART_IRQHandler+0xf8>
 8004e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00b      	beq.n	8004e3c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e32:	f043 0204 	orr.w	r2, r3, #4
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d011      	beq.n	8004e6c <HAL_UART_IRQHandler+0x128>
 8004e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00b      	beq.n	8004e6c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2204      	movs	r2, #4
 8004e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e62:	f043 0202 	orr.w	r2, r3, #2
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d017      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d105      	bne.n	8004e90 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004e84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004e88:	4b5c      	ldr	r3, [pc, #368]	@ (8004ffc <HAL_UART_IRQHandler+0x2b8>)
 8004e8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00b      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2208      	movs	r2, #8
 8004e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9e:	f043 0208 	orr.w	r2, r3, #8
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d012      	beq.n	8004eda <HAL_UART_IRQHandler+0x196>
 8004eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00c      	beq.n	8004eda <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ec8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed0:	f043 0220 	orr.w	r2, r3, #32
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8266 	beq.w	80053b2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d013      	beq.n	8004f1a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d105      	bne.n	8004f0a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f2e:	2b40      	cmp	r3, #64	@ 0x40
 8004f30:	d005      	beq.n	8004f3e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d054      	beq.n	8004fe8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 f83a 	bl	8005fb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4e:	2b40      	cmp	r3, #64	@ 0x40
 8004f50:	d146      	bne.n	8004fe0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3308      	adds	r3, #8
 8004f58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3308      	adds	r3, #8
 8004f7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f8e:	e841 2300 	strex	r3, r2, [r1]
 8004f92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1d9      	bne.n	8004f52 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d017      	beq.n	8004fd8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fae:	4a15      	ldr	r2, [pc, #84]	@ (8005004 <HAL_UART_IRQHandler+0x2c0>)
 8004fb0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fd fbb7 	bl	800272c <HAL_DMA_Abort_IT>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d019      	beq.n	8004ff8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd6:	e00f      	b.n	8004ff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f9ff 	bl	80053dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fde:	e00b      	b.n	8004ff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f9fb 	bl	80053dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe6:	e007      	b.n	8004ff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f9f7 	bl	80053dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004ff6:	e1dc      	b.n	80053b2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff8:	bf00      	nop
    return;
 8004ffa:	e1da      	b.n	80053b2 <HAL_UART_IRQHandler+0x66e>
 8004ffc:	10000001 	.word	0x10000001
 8005000:	04000120 	.word	0x04000120
 8005004:	08006085 	.word	0x08006085

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800500c:	2b01      	cmp	r3, #1
 800500e:	f040 8170 	bne.w	80052f2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005016:	f003 0310 	and.w	r3, r3, #16
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 8169 	beq.w	80052f2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 8162 	beq.w	80052f2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2210      	movs	r2, #16
 8005034:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005040:	2b40      	cmp	r3, #64	@ 0x40
 8005042:	f040 80d8 	bne.w	80051f6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005054:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 80af 	beq.w	80051bc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005064:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005068:	429a      	cmp	r2, r3
 800506a:	f080 80a7 	bcs.w	80051bc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005074:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b00      	cmp	r3, #0
 8005088:	f040 8087 	bne.w	800519a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80050a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80050b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1da      	bne.n	800508c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3308      	adds	r3, #8
 80050dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80050e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050e8:	f023 0301 	bic.w	r3, r3, #1
 80050ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3308      	adds	r3, #8
 80050f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005102:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005106:	e841 2300 	strex	r3, r2, [r1]
 800510a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800510c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1e1      	bne.n	80050d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3308      	adds	r3, #8
 8005118:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800511c:	e853 3f00 	ldrex	r3, [r3]
 8005120:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005128:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3308      	adds	r3, #8
 8005132:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005136:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005138:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800513c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005144:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e3      	bne.n	8005112 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005168:	f023 0310 	bic.w	r3, r3, #16
 800516c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800517a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800517c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005180:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005182:	e841 2300 	strex	r3, r2, [r1]
 8005186:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1e4      	bne.n	8005158 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005194:	4618      	mov	r0, r3
 8005196:	f7fd fa70 	bl	800267a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2202      	movs	r2, #2
 800519e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	4619      	mov	r1, r3
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f91b 	bl	80053f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80051ba:	e0fc      	b.n	80053b6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80051c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051c6:	429a      	cmp	r2, r3
 80051c8:	f040 80f5 	bne.w	80053b6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b20      	cmp	r3, #32
 80051dc:	f040 80eb 	bne.w	80053b6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80051ec:	4619      	mov	r1, r3
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f8fe 	bl	80053f0 <HAL_UARTEx_RxEventCallback>
      return;
 80051f4:	e0df      	b.n	80053b6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005202:	b29b      	uxth	r3, r3
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 80d1 	beq.w	80053ba <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005218:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80cc 	beq.w	80053ba <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005232:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005236:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005244:	647b      	str	r3, [r7, #68]	@ 0x44
 8005246:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800524a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e4      	bne.n	8005222 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3308      	adds	r3, #8
 800525e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	623b      	str	r3, [r7, #32]
   return(result);
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800526e:	f023 0301 	bic.w	r3, r3, #1
 8005272:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3308      	adds	r3, #8
 800527c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005280:	633a      	str	r2, [r7, #48]	@ 0x30
 8005282:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800528e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e1      	bne.n	8005258 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2220      	movs	r2, #32
 8005298:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f023 0310 	bic.w	r3, r3, #16
 80052bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052ca:	61fb      	str	r3, [r7, #28]
 80052cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	69b9      	ldr	r1, [r7, #24]
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	617b      	str	r3, [r7, #20]
   return(result);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e4      	bne.n	80052a8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2202      	movs	r2, #2
 80052e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052e8:	4619      	mov	r1, r3
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f880 	bl	80053f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052f0:	e063      	b.n	80053ba <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00e      	beq.n	800531c <HAL_UART_IRQHandler+0x5d8>
 80052fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d008      	beq.n	800531c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005312:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f001 fc13 	bl	8006b40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800531a:	e051      	b.n	80053c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800531c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005324:	2b00      	cmp	r3, #0
 8005326:	d014      	beq.n	8005352 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800532c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005330:	2b00      	cmp	r3, #0
 8005332:	d105      	bne.n	8005340 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005338:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d008      	beq.n	8005352 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005344:	2b00      	cmp	r3, #0
 8005346:	d03a      	beq.n	80053be <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	4798      	blx	r3
    }
    return;
 8005350:	e035      	b.n	80053be <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d009      	beq.n	8005372 <HAL_UART_IRQHandler+0x62e>
 800535e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fe9c 	bl	80060a8 <UART_EndTransmit_IT>
    return;
 8005370:	e026      	b.n	80053c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005376:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d009      	beq.n	8005392 <HAL_UART_IRQHandler+0x64e>
 800537e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005382:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f001 fbec 	bl	8006b68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005390:	e016      	b.n	80053c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005396:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d010      	beq.n	80053c0 <HAL_UART_IRQHandler+0x67c>
 800539e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	da0c      	bge.n	80053c0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f001 fbd4 	bl	8006b54 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053ac:	e008      	b.n	80053c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80053ae:	bf00      	nop
 80053b0:	e006      	b.n	80053c0 <HAL_UART_IRQHandler+0x67c>
    return;
 80053b2:	bf00      	nop
 80053b4:	e004      	b.n	80053c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80053b6:	bf00      	nop
 80053b8:	e002      	b.n	80053c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80053ba:	bf00      	nop
 80053bc:	e000      	b.n	80053c0 <HAL_UART_IRQHandler+0x67c>
    return;
 80053be:	bf00      	nop
  }
}
 80053c0:	37e8      	adds	r7, #232	@ 0xe8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop

080053c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800540c:	b08c      	sub	sp, #48	@ 0x30
 800540e:	af00      	add	r7, sp, #0
 8005410:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	431a      	orrs	r2, r3
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	431a      	orrs	r2, r3
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	4313      	orrs	r3, r2
 800542e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	4baa      	ldr	r3, [pc, #680]	@ (80056e0 <UART_SetConfig+0x2d8>)
 8005438:	4013      	ands	r3, r2
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	6812      	ldr	r2, [r2, #0]
 800543e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005440:	430b      	orrs	r3, r1
 8005442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a9f      	ldr	r2, [pc, #636]	@ (80056e4 <UART_SetConfig+0x2dc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d004      	beq.n	8005474 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005470:	4313      	orrs	r3, r2
 8005472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800547e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	6812      	ldr	r2, [r2, #0]
 8005486:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005488:	430b      	orrs	r3, r1
 800548a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005492:	f023 010f 	bic.w	r1, r3, #15
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a90      	ldr	r2, [pc, #576]	@ (80056e8 <UART_SetConfig+0x2e0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d125      	bne.n	80054f8 <UART_SetConfig+0xf0>
 80054ac:	4b8f      	ldr	r3, [pc, #572]	@ (80056ec <UART_SetConfig+0x2e4>)
 80054ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d81a      	bhi.n	80054f0 <UART_SetConfig+0xe8>
 80054ba:	a201      	add	r2, pc, #4	@ (adr r2, 80054c0 <UART_SetConfig+0xb8>)
 80054bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c0:	080054d1 	.word	0x080054d1
 80054c4:	080054e1 	.word	0x080054e1
 80054c8:	080054d9 	.word	0x080054d9
 80054cc:	080054e9 	.word	0x080054e9
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054d6:	e116      	b.n	8005706 <UART_SetConfig+0x2fe>
 80054d8:	2302      	movs	r3, #2
 80054da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054de:	e112      	b.n	8005706 <UART_SetConfig+0x2fe>
 80054e0:	2304      	movs	r3, #4
 80054e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e6:	e10e      	b.n	8005706 <UART_SetConfig+0x2fe>
 80054e8:	2308      	movs	r3, #8
 80054ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ee:	e10a      	b.n	8005706 <UART_SetConfig+0x2fe>
 80054f0:	2310      	movs	r3, #16
 80054f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054f6:	e106      	b.n	8005706 <UART_SetConfig+0x2fe>
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a7c      	ldr	r2, [pc, #496]	@ (80056f0 <UART_SetConfig+0x2e8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d138      	bne.n	8005574 <UART_SetConfig+0x16c>
 8005502:	4b7a      	ldr	r3, [pc, #488]	@ (80056ec <UART_SetConfig+0x2e4>)
 8005504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005508:	f003 030c 	and.w	r3, r3, #12
 800550c:	2b0c      	cmp	r3, #12
 800550e:	d82d      	bhi.n	800556c <UART_SetConfig+0x164>
 8005510:	a201      	add	r2, pc, #4	@ (adr r2, 8005518 <UART_SetConfig+0x110>)
 8005512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005516:	bf00      	nop
 8005518:	0800554d 	.word	0x0800554d
 800551c:	0800556d 	.word	0x0800556d
 8005520:	0800556d 	.word	0x0800556d
 8005524:	0800556d 	.word	0x0800556d
 8005528:	0800555d 	.word	0x0800555d
 800552c:	0800556d 	.word	0x0800556d
 8005530:	0800556d 	.word	0x0800556d
 8005534:	0800556d 	.word	0x0800556d
 8005538:	08005555 	.word	0x08005555
 800553c:	0800556d 	.word	0x0800556d
 8005540:	0800556d 	.word	0x0800556d
 8005544:	0800556d 	.word	0x0800556d
 8005548:	08005565 	.word	0x08005565
 800554c:	2300      	movs	r3, #0
 800554e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005552:	e0d8      	b.n	8005706 <UART_SetConfig+0x2fe>
 8005554:	2302      	movs	r3, #2
 8005556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800555a:	e0d4      	b.n	8005706 <UART_SetConfig+0x2fe>
 800555c:	2304      	movs	r3, #4
 800555e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005562:	e0d0      	b.n	8005706 <UART_SetConfig+0x2fe>
 8005564:	2308      	movs	r3, #8
 8005566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800556a:	e0cc      	b.n	8005706 <UART_SetConfig+0x2fe>
 800556c:	2310      	movs	r3, #16
 800556e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005572:	e0c8      	b.n	8005706 <UART_SetConfig+0x2fe>
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a5e      	ldr	r2, [pc, #376]	@ (80056f4 <UART_SetConfig+0x2ec>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d125      	bne.n	80055ca <UART_SetConfig+0x1c2>
 800557e:	4b5b      	ldr	r3, [pc, #364]	@ (80056ec <UART_SetConfig+0x2e4>)
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005584:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005588:	2b30      	cmp	r3, #48	@ 0x30
 800558a:	d016      	beq.n	80055ba <UART_SetConfig+0x1b2>
 800558c:	2b30      	cmp	r3, #48	@ 0x30
 800558e:	d818      	bhi.n	80055c2 <UART_SetConfig+0x1ba>
 8005590:	2b20      	cmp	r3, #32
 8005592:	d00a      	beq.n	80055aa <UART_SetConfig+0x1a2>
 8005594:	2b20      	cmp	r3, #32
 8005596:	d814      	bhi.n	80055c2 <UART_SetConfig+0x1ba>
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <UART_SetConfig+0x19a>
 800559c:	2b10      	cmp	r3, #16
 800559e:	d008      	beq.n	80055b2 <UART_SetConfig+0x1aa>
 80055a0:	e00f      	b.n	80055c2 <UART_SetConfig+0x1ba>
 80055a2:	2300      	movs	r3, #0
 80055a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055a8:	e0ad      	b.n	8005706 <UART_SetConfig+0x2fe>
 80055aa:	2302      	movs	r3, #2
 80055ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055b0:	e0a9      	b.n	8005706 <UART_SetConfig+0x2fe>
 80055b2:	2304      	movs	r3, #4
 80055b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055b8:	e0a5      	b.n	8005706 <UART_SetConfig+0x2fe>
 80055ba:	2308      	movs	r3, #8
 80055bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055c0:	e0a1      	b.n	8005706 <UART_SetConfig+0x2fe>
 80055c2:	2310      	movs	r3, #16
 80055c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055c8:	e09d      	b.n	8005706 <UART_SetConfig+0x2fe>
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a4a      	ldr	r2, [pc, #296]	@ (80056f8 <UART_SetConfig+0x2f0>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d125      	bne.n	8005620 <UART_SetConfig+0x218>
 80055d4:	4b45      	ldr	r3, [pc, #276]	@ (80056ec <UART_SetConfig+0x2e4>)
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80055de:	2bc0      	cmp	r3, #192	@ 0xc0
 80055e0:	d016      	beq.n	8005610 <UART_SetConfig+0x208>
 80055e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80055e4:	d818      	bhi.n	8005618 <UART_SetConfig+0x210>
 80055e6:	2b80      	cmp	r3, #128	@ 0x80
 80055e8:	d00a      	beq.n	8005600 <UART_SetConfig+0x1f8>
 80055ea:	2b80      	cmp	r3, #128	@ 0x80
 80055ec:	d814      	bhi.n	8005618 <UART_SetConfig+0x210>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <UART_SetConfig+0x1f0>
 80055f2:	2b40      	cmp	r3, #64	@ 0x40
 80055f4:	d008      	beq.n	8005608 <UART_SetConfig+0x200>
 80055f6:	e00f      	b.n	8005618 <UART_SetConfig+0x210>
 80055f8:	2300      	movs	r3, #0
 80055fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055fe:	e082      	b.n	8005706 <UART_SetConfig+0x2fe>
 8005600:	2302      	movs	r3, #2
 8005602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005606:	e07e      	b.n	8005706 <UART_SetConfig+0x2fe>
 8005608:	2304      	movs	r3, #4
 800560a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800560e:	e07a      	b.n	8005706 <UART_SetConfig+0x2fe>
 8005610:	2308      	movs	r3, #8
 8005612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005616:	e076      	b.n	8005706 <UART_SetConfig+0x2fe>
 8005618:	2310      	movs	r3, #16
 800561a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800561e:	e072      	b.n	8005706 <UART_SetConfig+0x2fe>
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a35      	ldr	r2, [pc, #212]	@ (80056fc <UART_SetConfig+0x2f4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d12a      	bne.n	8005680 <UART_SetConfig+0x278>
 800562a:	4b30      	ldr	r3, [pc, #192]	@ (80056ec <UART_SetConfig+0x2e4>)
 800562c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005630:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005634:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005638:	d01a      	beq.n	8005670 <UART_SetConfig+0x268>
 800563a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800563e:	d81b      	bhi.n	8005678 <UART_SetConfig+0x270>
 8005640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005644:	d00c      	beq.n	8005660 <UART_SetConfig+0x258>
 8005646:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800564a:	d815      	bhi.n	8005678 <UART_SetConfig+0x270>
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <UART_SetConfig+0x250>
 8005650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005654:	d008      	beq.n	8005668 <UART_SetConfig+0x260>
 8005656:	e00f      	b.n	8005678 <UART_SetConfig+0x270>
 8005658:	2300      	movs	r3, #0
 800565a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800565e:	e052      	b.n	8005706 <UART_SetConfig+0x2fe>
 8005660:	2302      	movs	r3, #2
 8005662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005666:	e04e      	b.n	8005706 <UART_SetConfig+0x2fe>
 8005668:	2304      	movs	r3, #4
 800566a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800566e:	e04a      	b.n	8005706 <UART_SetConfig+0x2fe>
 8005670:	2308      	movs	r3, #8
 8005672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005676:	e046      	b.n	8005706 <UART_SetConfig+0x2fe>
 8005678:	2310      	movs	r3, #16
 800567a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800567e:	e042      	b.n	8005706 <UART_SetConfig+0x2fe>
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a17      	ldr	r2, [pc, #92]	@ (80056e4 <UART_SetConfig+0x2dc>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d13a      	bne.n	8005700 <UART_SetConfig+0x2f8>
 800568a:	4b18      	ldr	r3, [pc, #96]	@ (80056ec <UART_SetConfig+0x2e4>)
 800568c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005690:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005694:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005698:	d01a      	beq.n	80056d0 <UART_SetConfig+0x2c8>
 800569a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800569e:	d81b      	bhi.n	80056d8 <UART_SetConfig+0x2d0>
 80056a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056a4:	d00c      	beq.n	80056c0 <UART_SetConfig+0x2b8>
 80056a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056aa:	d815      	bhi.n	80056d8 <UART_SetConfig+0x2d0>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <UART_SetConfig+0x2b0>
 80056b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056b4:	d008      	beq.n	80056c8 <UART_SetConfig+0x2c0>
 80056b6:	e00f      	b.n	80056d8 <UART_SetConfig+0x2d0>
 80056b8:	2300      	movs	r3, #0
 80056ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056be:	e022      	b.n	8005706 <UART_SetConfig+0x2fe>
 80056c0:	2302      	movs	r3, #2
 80056c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056c6:	e01e      	b.n	8005706 <UART_SetConfig+0x2fe>
 80056c8:	2304      	movs	r3, #4
 80056ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ce:	e01a      	b.n	8005706 <UART_SetConfig+0x2fe>
 80056d0:	2308      	movs	r3, #8
 80056d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056d6:	e016      	b.n	8005706 <UART_SetConfig+0x2fe>
 80056d8:	2310      	movs	r3, #16
 80056da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056de:	e012      	b.n	8005706 <UART_SetConfig+0x2fe>
 80056e0:	cfff69f3 	.word	0xcfff69f3
 80056e4:	40008000 	.word	0x40008000
 80056e8:	40013800 	.word	0x40013800
 80056ec:	40021000 	.word	0x40021000
 80056f0:	40004400 	.word	0x40004400
 80056f4:	40004800 	.word	0x40004800
 80056f8:	40004c00 	.word	0x40004c00
 80056fc:	40005000 	.word	0x40005000
 8005700:	2310      	movs	r3, #16
 8005702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4aae      	ldr	r2, [pc, #696]	@ (80059c4 <UART_SetConfig+0x5bc>)
 800570c:	4293      	cmp	r3, r2
 800570e:	f040 8097 	bne.w	8005840 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005712:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005716:	2b08      	cmp	r3, #8
 8005718:	d823      	bhi.n	8005762 <UART_SetConfig+0x35a>
 800571a:	a201      	add	r2, pc, #4	@ (adr r2, 8005720 <UART_SetConfig+0x318>)
 800571c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005720:	08005745 	.word	0x08005745
 8005724:	08005763 	.word	0x08005763
 8005728:	0800574d 	.word	0x0800574d
 800572c:	08005763 	.word	0x08005763
 8005730:	08005753 	.word	0x08005753
 8005734:	08005763 	.word	0x08005763
 8005738:	08005763 	.word	0x08005763
 800573c:	08005763 	.word	0x08005763
 8005740:	0800575b 	.word	0x0800575b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005744:	f7fe ff14 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8005748:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800574a:	e010      	b.n	800576e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800574c:	4b9e      	ldr	r3, [pc, #632]	@ (80059c8 <UART_SetConfig+0x5c0>)
 800574e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005750:	e00d      	b.n	800576e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005752:	f7fe fe9f 	bl	8004494 <HAL_RCC_GetSysClockFreq>
 8005756:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005758:	e009      	b.n	800576e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800575a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800575e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005760:	e005      	b.n	800576e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800576c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8130 	beq.w	80059d6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577a:	4a94      	ldr	r2, [pc, #592]	@ (80059cc <UART_SetConfig+0x5c4>)
 800577c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005780:	461a      	mov	r2, r3
 8005782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005784:	fbb3 f3f2 	udiv	r3, r3, r2
 8005788:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	4413      	add	r3, r2
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	429a      	cmp	r2, r3
 8005798:	d305      	bcc.n	80057a6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d903      	bls.n	80057ae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057ac:	e113      	b.n	80059d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b0:	2200      	movs	r2, #0
 80057b2:	60bb      	str	r3, [r7, #8]
 80057b4:	60fa      	str	r2, [r7, #12]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ba:	4a84      	ldr	r2, [pc, #528]	@ (80059cc <UART_SetConfig+0x5c4>)
 80057bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2200      	movs	r2, #0
 80057c4:	603b      	str	r3, [r7, #0]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057d0:	f7fb fa12 	bl	8000bf8 <__aeabi_uldivmod>
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4610      	mov	r0, r2
 80057da:	4619      	mov	r1, r3
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	020b      	lsls	r3, r1, #8
 80057e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057ea:	0202      	lsls	r2, r0, #8
 80057ec:	6979      	ldr	r1, [r7, #20]
 80057ee:	6849      	ldr	r1, [r1, #4]
 80057f0:	0849      	lsrs	r1, r1, #1
 80057f2:	2000      	movs	r0, #0
 80057f4:	460c      	mov	r4, r1
 80057f6:	4605      	mov	r5, r0
 80057f8:	eb12 0804 	adds.w	r8, r2, r4
 80057fc:	eb43 0905 	adc.w	r9, r3, r5
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	469a      	mov	sl, r3
 8005808:	4693      	mov	fp, r2
 800580a:	4652      	mov	r2, sl
 800580c:	465b      	mov	r3, fp
 800580e:	4640      	mov	r0, r8
 8005810:	4649      	mov	r1, r9
 8005812:	f7fb f9f1 	bl	8000bf8 <__aeabi_uldivmod>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4613      	mov	r3, r2
 800581c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005824:	d308      	bcc.n	8005838 <UART_SetConfig+0x430>
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800582c:	d204      	bcs.n	8005838 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6a3a      	ldr	r2, [r7, #32]
 8005834:	60da      	str	r2, [r3, #12]
 8005836:	e0ce      	b.n	80059d6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800583e:	e0ca      	b.n	80059d6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005848:	d166      	bne.n	8005918 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800584a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800584e:	2b08      	cmp	r3, #8
 8005850:	d827      	bhi.n	80058a2 <UART_SetConfig+0x49a>
 8005852:	a201      	add	r2, pc, #4	@ (adr r2, 8005858 <UART_SetConfig+0x450>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	0800587d 	.word	0x0800587d
 800585c:	08005885 	.word	0x08005885
 8005860:	0800588d 	.word	0x0800588d
 8005864:	080058a3 	.word	0x080058a3
 8005868:	08005893 	.word	0x08005893
 800586c:	080058a3 	.word	0x080058a3
 8005870:	080058a3 	.word	0x080058a3
 8005874:	080058a3 	.word	0x080058a3
 8005878:	0800589b 	.word	0x0800589b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800587c:	f7fe fe78 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8005880:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005882:	e014      	b.n	80058ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005884:	f7fe fe8a 	bl	800459c <HAL_RCC_GetPCLK2Freq>
 8005888:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800588a:	e010      	b.n	80058ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800588c:	4b4e      	ldr	r3, [pc, #312]	@ (80059c8 <UART_SetConfig+0x5c0>)
 800588e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005890:	e00d      	b.n	80058ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005892:	f7fe fdff 	bl	8004494 <HAL_RCC_GetSysClockFreq>
 8005896:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005898:	e009      	b.n	80058ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800589a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800589e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058a0:	e005      	b.n	80058ae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8090 	beq.w	80059d6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ba:	4a44      	ldr	r2, [pc, #272]	@ (80059cc <UART_SetConfig+0x5c4>)
 80058bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058c0:	461a      	mov	r2, r3
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80058c8:	005a      	lsls	r2, r3, #1
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	085b      	lsrs	r3, r3, #1
 80058d0:	441a      	add	r2, r3
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	2b0f      	cmp	r3, #15
 80058e0:	d916      	bls.n	8005910 <UART_SetConfig+0x508>
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058e8:	d212      	bcs.n	8005910 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	f023 030f 	bic.w	r3, r3, #15
 80058f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	085b      	lsrs	r3, r3, #1
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	b29a      	uxth	r2, r3
 8005900:	8bfb      	ldrh	r3, [r7, #30]
 8005902:	4313      	orrs	r3, r2
 8005904:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	8bfa      	ldrh	r2, [r7, #30]
 800590c:	60da      	str	r2, [r3, #12]
 800590e:	e062      	b.n	80059d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005916:	e05e      	b.n	80059d6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005918:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800591c:	2b08      	cmp	r3, #8
 800591e:	d828      	bhi.n	8005972 <UART_SetConfig+0x56a>
 8005920:	a201      	add	r2, pc, #4	@ (adr r2, 8005928 <UART_SetConfig+0x520>)
 8005922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005926:	bf00      	nop
 8005928:	0800594d 	.word	0x0800594d
 800592c:	08005955 	.word	0x08005955
 8005930:	0800595d 	.word	0x0800595d
 8005934:	08005973 	.word	0x08005973
 8005938:	08005963 	.word	0x08005963
 800593c:	08005973 	.word	0x08005973
 8005940:	08005973 	.word	0x08005973
 8005944:	08005973 	.word	0x08005973
 8005948:	0800596b 	.word	0x0800596b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800594c:	f7fe fe10 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8005950:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005952:	e014      	b.n	800597e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005954:	f7fe fe22 	bl	800459c <HAL_RCC_GetPCLK2Freq>
 8005958:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800595a:	e010      	b.n	800597e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800595c:	4b1a      	ldr	r3, [pc, #104]	@ (80059c8 <UART_SetConfig+0x5c0>)
 800595e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005960:	e00d      	b.n	800597e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005962:	f7fe fd97 	bl	8004494 <HAL_RCC_GetSysClockFreq>
 8005966:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005968:	e009      	b.n	800597e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800596a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800596e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005970:	e005      	b.n	800597e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800597c:	bf00      	nop
    }

    if (pclk != 0U)
 800597e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005980:	2b00      	cmp	r3, #0
 8005982:	d028      	beq.n	80059d6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005988:	4a10      	ldr	r2, [pc, #64]	@ (80059cc <UART_SetConfig+0x5c4>)
 800598a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800598e:	461a      	mov	r2, r3
 8005990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005992:	fbb3 f2f2 	udiv	r2, r3, r2
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	085b      	lsrs	r3, r3, #1
 800599c:	441a      	add	r2, r3
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	2b0f      	cmp	r3, #15
 80059ac:	d910      	bls.n	80059d0 <UART_SetConfig+0x5c8>
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059b4:	d20c      	bcs.n	80059d0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60da      	str	r2, [r3, #12]
 80059c0:	e009      	b.n	80059d6 <UART_SetConfig+0x5ce>
 80059c2:	bf00      	nop
 80059c4:	40008000 	.word	0x40008000
 80059c8:	00f42400 	.word	0x00f42400
 80059cc:	0800b5ac 	.word	0x0800b5ac
      }
      else
      {
        ret = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2201      	movs	r2, #1
 80059da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2200      	movs	r2, #0
 80059ea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	2200      	movs	r2, #0
 80059f0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80059f2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3730      	adds	r7, #48	@ 0x30
 80059fa:	46bd      	mov	sp, r7
 80059fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005a00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01a      	beq.n	8005b16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005afe:	d10a      	bne.n	8005b16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	605a      	str	r2, [r3, #4]
  }
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b098      	sub	sp, #96	@ 0x60
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b54:	f7fc fc54 	bl	8002400 <HAL_GetTick>
 8005b58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0308 	and.w	r3, r3, #8
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d12f      	bne.n	8005bc8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b70:	2200      	movs	r2, #0
 8005b72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f88e 	bl	8005c98 <UART_WaitOnFlagUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d022      	beq.n	8005bc8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
 8005b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b96:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ba2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ba6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e6      	bne.n	8005b82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e063      	b.n	8005c90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0304 	and.w	r3, r3, #4
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d149      	bne.n	8005c6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bd6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bde:	2200      	movs	r2, #0
 8005be0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f857 	bl	8005c98 <UART_WaitOnFlagUntilTimeout>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d03c      	beq.n	8005c6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	623b      	str	r3, [r7, #32]
   return(result);
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c10:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1e6      	bne.n	8005bf0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3308      	adds	r3, #8
 8005c28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f023 0301 	bic.w	r3, r3, #1
 8005c38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3308      	adds	r3, #8
 8005c40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c42:	61fa      	str	r2, [r7, #28]
 8005c44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	69b9      	ldr	r1, [r7, #24]
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	617b      	str	r3, [r7, #20]
   return(result);
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1e5      	bne.n	8005c22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e012      	b.n	8005c90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3758      	adds	r7, #88	@ 0x58
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ca8:	e04f      	b.n	8005d4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb0:	d04b      	beq.n	8005d4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cb2:	f7fc fba5 	bl	8002400 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d302      	bcc.n	8005cc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e04e      	b.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0304 	and.w	r3, r3, #4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d037      	beq.n	8005d4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b80      	cmp	r3, #128	@ 0x80
 8005cde:	d034      	beq.n	8005d4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b40      	cmp	r3, #64	@ 0x40
 8005ce4:	d031      	beq.n	8005d4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d110      	bne.n	8005d16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2208      	movs	r2, #8
 8005cfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 f95b 	bl	8005fb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2208      	movs	r2, #8
 8005d06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e029      	b.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d24:	d111      	bne.n	8005d4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f941 	bl	8005fb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e00f      	b.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4013      	ands	r3, r2
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	bf0c      	ite	eq
 8005d5a:	2301      	moveq	r3, #1
 8005d5c:	2300      	movne	r3, #0
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	79fb      	ldrb	r3, [r7, #7]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d0a0      	beq.n	8005caa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
	...

08005d74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b0a3      	sub	sp, #140	@ 0x8c
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	88fa      	ldrh	r2, [r7, #6]
 8005d8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	88fa      	ldrh	r2, [r7, #6]
 8005d94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005da6:	d10e      	bne.n	8005dc6 <UART_Start_Receive_IT+0x52>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d105      	bne.n	8005dbc <UART_Start_Receive_IT+0x48>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005db6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005dba:	e02d      	b.n	8005e18 <UART_Start_Receive_IT+0xa4>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	22ff      	movs	r2, #255	@ 0xff
 8005dc0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005dc4:	e028      	b.n	8005e18 <UART_Start_Receive_IT+0xa4>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10d      	bne.n	8005dea <UART_Start_Receive_IT+0x76>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d104      	bne.n	8005de0 <UART_Start_Receive_IT+0x6c>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	22ff      	movs	r2, #255	@ 0xff
 8005dda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005dde:	e01b      	b.n	8005e18 <UART_Start_Receive_IT+0xa4>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	227f      	movs	r2, #127	@ 0x7f
 8005de4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005de8:	e016      	b.n	8005e18 <UART_Start_Receive_IT+0xa4>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005df2:	d10d      	bne.n	8005e10 <UART_Start_Receive_IT+0x9c>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d104      	bne.n	8005e06 <UART_Start_Receive_IT+0x92>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	227f      	movs	r2, #127	@ 0x7f
 8005e00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e04:	e008      	b.n	8005e18 <UART_Start_Receive_IT+0xa4>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	223f      	movs	r2, #63	@ 0x3f
 8005e0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e0e:	e003      	b.n	8005e18 <UART_Start_Receive_IT+0xa4>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2222      	movs	r2, #34	@ 0x22
 8005e24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005e38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e3a:	f043 0301 	orr.w	r3, r3, #1
 8005e3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3308      	adds	r3, #8
 8005e48:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005e4c:	673a      	str	r2, [r7, #112]	@ 0x70
 8005e4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e50:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005e52:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005e54:	e841 2300 	strex	r3, r2, [r1]
 8005e58:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005e5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e3      	bne.n	8005e28 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e68:	d14f      	bne.n	8005f0a <UART_Start_Receive_IT+0x196>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005e70:	88fa      	ldrh	r2, [r7, #6]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d349      	bcc.n	8005f0a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e7e:	d107      	bne.n	8005e90 <UART_Start_Receive_IT+0x11c>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d103      	bne.n	8005e90 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4a47      	ldr	r2, [pc, #284]	@ (8005fa8 <UART_Start_Receive_IT+0x234>)
 8005e8c:	675a      	str	r2, [r3, #116]	@ 0x74
 8005e8e:	e002      	b.n	8005e96 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4a46      	ldr	r2, [pc, #280]	@ (8005fac <UART_Start_Receive_IT+0x238>)
 8005e94:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d01a      	beq.n	8005ed4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005eb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ec2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005ec6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005ec8:	e841 2300 	strex	r3, r2, [r1]
 8005ecc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e4      	bne.n	8005e9e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3308      	adds	r3, #8
 8005eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005ef4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005ef6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005efa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005efc:	e841 2300 	strex	r3, r2, [r1]
 8005f00:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005f02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e5      	bne.n	8005ed4 <UART_Start_Receive_IT+0x160>
 8005f08:	e046      	b.n	8005f98 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f12:	d107      	bne.n	8005f24 <UART_Start_Receive_IT+0x1b0>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d103      	bne.n	8005f24 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4a24      	ldr	r2, [pc, #144]	@ (8005fb0 <UART_Start_Receive_IT+0x23c>)
 8005f20:	675a      	str	r2, [r3, #116]	@ 0x74
 8005f22:	e002      	b.n	8005f2a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4a23      	ldr	r2, [pc, #140]	@ (8005fb4 <UART_Start_Receive_IT+0x240>)
 8005f28:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d019      	beq.n	8005f66 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3a:	e853 3f00 	ldrex	r3, [r3]
 8005f3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f42:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005f46:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f52:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f58:	e841 2300 	strex	r3, r2, [r1]
 8005f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e6      	bne.n	8005f32 <UART_Start_Receive_IT+0x1be>
 8005f64:	e018      	b.n	8005f98 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	e853 3f00 	ldrex	r3, [r3]
 8005f72:	613b      	str	r3, [r7, #16]
   return(result);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f043 0320 	orr.w	r3, r3, #32
 8005f7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	461a      	mov	r2, r3
 8005f82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f84:	623b      	str	r3, [r7, #32]
 8005f86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f88:	69f9      	ldr	r1, [r7, #28]
 8005f8a:	6a3a      	ldr	r2, [r7, #32]
 8005f8c:	e841 2300 	strex	r3, r2, [r1]
 8005f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1e6      	bne.n	8005f66 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	378c      	adds	r7, #140	@ 0x8c
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	080067d5 	.word	0x080067d5
 8005fac:	08006471 	.word	0x08006471
 8005fb0:	080062b9 	.word	0x080062b9
 8005fb4:	08006101 	.word	0x08006101

08005fb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b095      	sub	sp, #84	@ 0x54
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fc8:	e853 3f00 	ldrex	r3, [r3]
 8005fcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fde:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fe0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fe4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fe6:	e841 2300 	strex	r3, r2, [r1]
 8005fea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1e6      	bne.n	8005fc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	61fb      	str	r3, [r7, #28]
   return(result);
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006008:	f023 0301 	bic.w	r3, r3, #1
 800600c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3308      	adds	r3, #8
 8006014:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006016:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006018:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800601c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800601e:	e841 2300 	strex	r3, r2, [r1]
 8006022:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1e3      	bne.n	8005ff2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800602e:	2b01      	cmp	r3, #1
 8006030:	d118      	bne.n	8006064 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f023 0310 	bic.w	r3, r3, #16
 8006046:	647b      	str	r3, [r7, #68]	@ 0x44
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006050:	61bb      	str	r3, [r7, #24]
 8006052:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	6979      	ldr	r1, [r7, #20]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	613b      	str	r3, [r7, #16]
   return(result);
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e6      	bne.n	8006032 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006078:	bf00      	nop
 800607a:	3754      	adds	r7, #84	@ 0x54
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006090:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f7ff f99e 	bl	80053dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060a0:	bf00      	nop
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060c4:	61fb      	str	r3, [r7, #28]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	61bb      	str	r3, [r7, #24]
 80060d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	6979      	ldr	r1, [r7, #20]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	613b      	str	r3, [r7, #16]
   return(result);
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e6      	bne.n	80060b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff f969 	bl	80053c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060f6:	bf00      	nop
 80060f8:	3720      	adds	r7, #32
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
	...

08006100 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b09c      	sub	sp, #112	@ 0x70
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800610e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006118:	2b22      	cmp	r3, #34	@ 0x22
 800611a:	f040 80be 	bne.w	800629a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006124:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006128:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800612c:	b2d9      	uxtb	r1, r3
 800612e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006132:	b2da      	uxtb	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006138:	400a      	ands	r2, r1
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800614e:	b29b      	uxth	r3, r3
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	f040 80a1 	bne.w	80062aa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006178:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800617c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006186:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006188:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800618c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e6      	bne.n	8006168 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3308      	adds	r3, #8
 80061a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ac:	f023 0301 	bic.w	r3, r3, #1
 80061b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3308      	adds	r3, #8
 80061b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80061ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80061bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e5      	bne.n	800619a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a33      	ldr	r2, [pc, #204]	@ (80062b4 <UART_RxISR_8BIT+0x1b4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d01f      	beq.n	800622c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d018      	beq.n	800622c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	623b      	str	r3, [r7, #32]
   return(result);
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800620e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006218:	633b      	str	r3, [r7, #48]	@ 0x30
 800621a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800621e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e6      	bne.n	80061fa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006230:	2b01      	cmp	r3, #1
 8006232:	d12e      	bne.n	8006292 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	60fb      	str	r3, [r7, #12]
   return(result);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0310 	bic.w	r3, r3, #16
 800624e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006258:	61fb      	str	r3, [r7, #28]
 800625a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	69b9      	ldr	r1, [r7, #24]
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	617b      	str	r3, [r7, #20]
   return(result);
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e6      	bne.n	800623a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f003 0310 	and.w	r3, r3, #16
 8006276:	2b10      	cmp	r3, #16
 8006278:	d103      	bne.n	8006282 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2210      	movs	r2, #16
 8006280:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff f8b0 	bl	80053f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006290:	e00b      	b.n	80062aa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fa fe46 	bl	8000f24 <HAL_UART_RxCpltCallback>
}
 8006298:	e007      	b.n	80062aa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	699a      	ldr	r2, [r3, #24]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 0208 	orr.w	r2, r2, #8
 80062a8:	619a      	str	r2, [r3, #24]
}
 80062aa:	bf00      	nop
 80062ac:	3770      	adds	r7, #112	@ 0x70
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	40008000 	.word	0x40008000

080062b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b09c      	sub	sp, #112	@ 0x70
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80062c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062d0:	2b22      	cmp	r3, #34	@ 0x22
 80062d2:	f040 80be 	bne.w	8006452 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80062e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80062ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80062ee:	4013      	ands	r3, r2
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fa:	1c9a      	adds	r2, r3, #2
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b29a      	uxth	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	f040 80a1 	bne.w	8006462 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800632e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006330:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006334:	667b      	str	r3, [r7, #100]	@ 0x64
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800633e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006340:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006344:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800634c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e6      	bne.n	8006320 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3308      	adds	r3, #8
 8006358:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800635c:	e853 3f00 	ldrex	r3, [r3]
 8006360:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006364:	f023 0301 	bic.w	r3, r3, #1
 8006368:	663b      	str	r3, [r7, #96]	@ 0x60
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3308      	adds	r3, #8
 8006370:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006372:	643a      	str	r2, [r7, #64]	@ 0x40
 8006374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006378:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1e5      	bne.n	8006352 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2220      	movs	r2, #32
 800638a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a33      	ldr	r2, [pc, #204]	@ (800646c <UART_RxISR_16BIT+0x1b4>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d01f      	beq.n	80063e4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d018      	beq.n	80063e4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	e853 3f00 	ldrex	r3, [r3]
 80063be:	61fb      	str	r3, [r7, #28]
   return(result);
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80063c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	461a      	mov	r2, r3
 80063ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063d2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063d8:	e841 2300 	strex	r3, r2, [r1]
 80063dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1e6      	bne.n	80063b2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d12e      	bne.n	800644a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	e853 3f00 	ldrex	r3, [r3]
 80063fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f023 0310 	bic.w	r3, r3, #16
 8006406:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	461a      	mov	r2, r3
 800640e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006410:	61bb      	str	r3, [r7, #24]
 8006412:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006414:	6979      	ldr	r1, [r7, #20]
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	e841 2300 	strex	r3, r2, [r1]
 800641c:	613b      	str	r3, [r7, #16]
   return(result);
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1e6      	bne.n	80063f2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	f003 0310 	and.w	r3, r3, #16
 800642e:	2b10      	cmp	r3, #16
 8006430:	d103      	bne.n	800643a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2210      	movs	r2, #16
 8006438:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006440:	4619      	mov	r1, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fe ffd4 	bl	80053f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006448:	e00b      	b.n	8006462 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7fa fd6a 	bl	8000f24 <HAL_UART_RxCpltCallback>
}
 8006450:	e007      	b.n	8006462 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	699a      	ldr	r2, [r3, #24]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f042 0208 	orr.w	r2, r2, #8
 8006460:	619a      	str	r2, [r3, #24]
}
 8006462:	bf00      	nop
 8006464:	3770      	adds	r7, #112	@ 0x70
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	40008000 	.word	0x40008000

08006470 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b0ac      	sub	sp, #176	@ 0xb0
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800647e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064a6:	2b22      	cmp	r3, #34	@ 0x22
 80064a8:	f040 8183 	bne.w	80067b2 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80064b2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80064b6:	e126      	b.n	8006706 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064be:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80064c2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80064c6:	b2d9      	uxtb	r1, r3
 80064c8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064d2:	400a      	ands	r2, r1
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	3b01      	subs	r3, #1
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80064fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006502:	f003 0307 	and.w	r3, r3, #7
 8006506:	2b00      	cmp	r3, #0
 8006508:	d053      	beq.n	80065b2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800650a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	d011      	beq.n	800653a <UART_RxISR_8BIT_FIFOEN+0xca>
 8006516:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800651a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00b      	beq.n	800653a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2201      	movs	r2, #1
 8006528:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006530:	f043 0201 	orr.w	r2, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800653a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d011      	beq.n	800656a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00b      	beq.n	800656a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2202      	movs	r2, #2
 8006558:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006560:	f043 0204 	orr.w	r2, r3, #4
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800656a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b00      	cmp	r3, #0
 8006574:	d011      	beq.n	800659a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00b      	beq.n	800659a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2204      	movs	r2, #4
 8006588:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006590:	f043 0202 	orr.w	r2, r3, #2
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d006      	beq.n	80065b2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7fe ff19 	bl	80053dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f040 80a3 	bne.w	8006706 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80065ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	461a      	mov	r2, r3
 80065de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80065e4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80065e8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80065f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e4      	bne.n	80065c0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3308      	adds	r3, #8
 80065fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006606:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006608:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800660c:	f023 0301 	bic.w	r3, r3, #1
 8006610:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3308      	adds	r3, #8
 800661a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800661e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006620:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006622:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006624:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006626:	e841 2300 	strex	r3, r2, [r1]
 800662a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800662c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1e1      	bne.n	80065f6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a60      	ldr	r2, [pc, #384]	@ (80067cc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d021      	beq.n	8006694 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d01a      	beq.n	8006694 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006666:	e853 3f00 	ldrex	r3, [r3]
 800666a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800666c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800666e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006672:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006680:	657b      	str	r3, [r7, #84]	@ 0x54
 8006682:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006684:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006686:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006688:	e841 2300 	strex	r3, r2, [r1]
 800668c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800668e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e4      	bne.n	800665e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006698:	2b01      	cmp	r3, #1
 800669a:	d130      	bne.n	80066fe <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066aa:	e853 3f00 	ldrex	r3, [r3]
 80066ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b2:	f023 0310 	bic.w	r3, r3, #16
 80066b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80066c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e4      	bne.n	80066a2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	f003 0310 	and.w	r3, r3, #16
 80066e2:	2b10      	cmp	r3, #16
 80066e4:	d103      	bne.n	80066ee <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2210      	movs	r2, #16
 80066ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7fe fe7a 	bl	80053f0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80066fc:	e00e      	b.n	800671c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7fa fc10 	bl	8000f24 <HAL_UART_RxCpltCallback>
        break;
 8006704:	e00a      	b.n	800671c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006706:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800670a:	2b00      	cmp	r3, #0
 800670c:	d006      	beq.n	800671c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800670e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006712:	f003 0320 	and.w	r3, r3, #32
 8006716:	2b00      	cmp	r3, #0
 8006718:	f47f aece 	bne.w	80064b8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006722:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006726:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800672a:	2b00      	cmp	r3, #0
 800672c:	d049      	beq.n	80067c2 <UART_RxISR_8BIT_FIFOEN+0x352>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006734:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006738:	429a      	cmp	r2, r3
 800673a:	d242      	bcs.n	80067c2 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3308      	adds	r3, #8
 8006742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	e853 3f00 	ldrex	r3, [r3]
 800674a:	61fb      	str	r3, [r7, #28]
   return(result);
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006752:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3308      	adds	r3, #8
 800675c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006760:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006762:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006764:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800676e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e3      	bne.n	800673c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a16      	ldr	r2, [pc, #88]	@ (80067d0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006778:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	e853 3f00 	ldrex	r3, [r3]
 8006786:	60bb      	str	r3, [r7, #8]
   return(result);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f043 0320 	orr.w	r3, r3, #32
 800678e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800679c:	61bb      	str	r3, [r7, #24]
 800679e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a0:	6979      	ldr	r1, [r7, #20]
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	e841 2300 	strex	r3, r2, [r1]
 80067a8:	613b      	str	r3, [r7, #16]
   return(result);
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e4      	bne.n	800677a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067b0:	e007      	b.n	80067c2 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699a      	ldr	r2, [r3, #24]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0208 	orr.w	r2, r2, #8
 80067c0:	619a      	str	r2, [r3, #24]
}
 80067c2:	bf00      	nop
 80067c4:	37b0      	adds	r7, #176	@ 0xb0
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	40008000 	.word	0x40008000
 80067d0:	08006101 	.word	0x08006101

080067d4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b0ae      	sub	sp, #184	@ 0xb8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80067e2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800680a:	2b22      	cmp	r3, #34	@ 0x22
 800680c:	f040 8187 	bne.w	8006b1e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006816:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800681a:	e12a      	b.n	8006a72 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006822:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800682a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800682e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006832:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006836:	4013      	ands	r3, r2
 8006838:	b29a      	uxth	r2, r3
 800683a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800683e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006844:	1c9a      	adds	r2, r3, #2
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006850:	b29b      	uxth	r3, r3
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006866:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	2b00      	cmp	r3, #0
 8006870:	d053      	beq.n	800691a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006872:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d011      	beq.n	80068a2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800687e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00b      	beq.n	80068a2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2201      	movs	r2, #1
 8006890:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006898:	f043 0201 	orr.w	r2, r3, #1
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d011      	beq.n	80068d2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80068ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00b      	beq.n	80068d2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2202      	movs	r2, #2
 80068c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068c8:	f043 0204 	orr.w	r2, r3, #4
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80068d6:	f003 0304 	and.w	r3, r3, #4
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d011      	beq.n	8006902 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80068de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00b      	beq.n	8006902 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2204      	movs	r2, #4
 80068f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068f8:	f043 0202 	orr.w	r2, r3, #2
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006908:	2b00      	cmp	r3, #0
 800690a:	d006      	beq.n	800691a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7fe fd65 	bl	80053dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006920:	b29b      	uxth	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	f040 80a5 	bne.w	8006a72 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800693c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	461a      	mov	r2, r3
 8006946:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800694a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800694e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006950:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006952:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800695c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e2      	bne.n	8006928 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3308      	adds	r3, #8
 8006968:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006974:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006978:	f023 0301 	bic.w	r3, r3, #1
 800697c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3308      	adds	r3, #8
 8006986:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800698a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800698c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006990:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006998:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e1      	bne.n	8006962 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a60      	ldr	r2, [pc, #384]	@ (8006b38 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d021      	beq.n	8006a00 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d01a      	beq.n	8006a00 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	461a      	mov	r2, r3
 80069e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80069ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069ee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e4      	bne.n	80069ca <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d130      	bne.n	8006a6a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a16:	e853 3f00 	ldrex	r3, [r3]
 8006a1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a1e:	f023 0310 	bic.w	r3, r3, #16
 8006a22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006a30:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a38:	e841 2300 	strex	r3, r2, [r1]
 8006a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e4      	bne.n	8006a0e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	f003 0310 	and.w	r3, r3, #16
 8006a4e:	2b10      	cmp	r3, #16
 8006a50:	d103      	bne.n	8006a5a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2210      	movs	r2, #16
 8006a58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fe fcc4 	bl	80053f0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006a68:	e00e      	b.n	8006a88 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fa fa5a 	bl	8000f24 <HAL_UART_RxCpltCallback>
        break;
 8006a70:	e00a      	b.n	8006a88 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a72:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d006      	beq.n	8006a88 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8006a7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f47f aeca 	bne.w	800681c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a8e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a92:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d049      	beq.n	8006b2e <UART_RxISR_16BIT_FIFOEN+0x35a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006aa0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d242      	bcs.n	8006b2e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3308      	adds	r3, #8
 8006aae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab2:	e853 3f00 	ldrex	r3, [r3]
 8006ab6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006abe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006acc:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ad4:	e841 2300 	strex	r3, r2, [r1]
 8006ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1e3      	bne.n	8006aa8 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a16      	ldr	r2, [pc, #88]	@ (8006b3c <UART_RxISR_16BIT_FIFOEN+0x368>)
 8006ae4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f043 0320 	orr.w	r3, r3, #32
 8006afa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b08:	61fb      	str	r3, [r7, #28]
 8006b0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	69b9      	ldr	r1, [r7, #24]
 8006b0e:	69fa      	ldr	r2, [r7, #28]
 8006b10:	e841 2300 	strex	r3, r2, [r1]
 8006b14:	617b      	str	r3, [r7, #20]
   return(result);
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1e4      	bne.n	8006ae6 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b1c:	e007      	b.n	8006b2e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	699a      	ldr	r2, [r3, #24]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f042 0208 	orr.w	r2, r2, #8
 8006b2c:	619a      	str	r2, [r3, #24]
}
 8006b2e:	bf00      	nop
 8006b30:	37b8      	adds	r7, #184	@ 0xb8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	40008000 	.word	0x40008000
 8006b3c:	080062b9 	.word	0x080062b9

08006b40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d101      	bne.n	8006b92 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e027      	b.n	8006be2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2224      	movs	r2, #36	@ 0x24
 8006b9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0201 	bic.w	r2, r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006bc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d101      	bne.n	8006c06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c02:	2302      	movs	r3, #2
 8006c04:	e02d      	b.n	8006c62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2224      	movs	r2, #36	@ 0x24
 8006c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0201 	bic.w	r2, r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f850 	bl	8006ce8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2220      	movs	r2, #32
 8006c54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	e02d      	b.n	8006cde <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2224      	movs	r2, #36	@ 0x24
 8006c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0201 	bic.w	r2, r2, #1
 8006ca8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f812 	bl	8006ce8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d108      	bne.n	8006d0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d08:	e031      	b.n	8006d6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d0a:	2308      	movs	r3, #8
 8006d0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d0e:	2308      	movs	r3, #8
 8006d10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	0e5b      	lsrs	r3, r3, #25
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	0f5b      	lsrs	r3, r3, #29
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	f003 0307 	and.w	r3, r3, #7
 8006d30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	7b3a      	ldrb	r2, [r7, #12]
 8006d36:	4911      	ldr	r1, [pc, #68]	@ (8006d7c <UARTEx_SetNbDataToProcess+0x94>)
 8006d38:	5c8a      	ldrb	r2, [r1, r2]
 8006d3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d3e:	7b3a      	ldrb	r2, [r7, #12]
 8006d40:	490f      	ldr	r1, [pc, #60]	@ (8006d80 <UARTEx_SetNbDataToProcess+0x98>)
 8006d42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d44:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	7b7a      	ldrb	r2, [r7, #13]
 8006d54:	4909      	ldr	r1, [pc, #36]	@ (8006d7c <UARTEx_SetNbDataToProcess+0x94>)
 8006d56:	5c8a      	ldrb	r2, [r1, r2]
 8006d58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d5c:	7b7a      	ldrb	r2, [r7, #13]
 8006d5e:	4908      	ldr	r1, [pc, #32]	@ (8006d80 <UARTEx_SetNbDataToProcess+0x98>)
 8006d60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d62:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006d6e:	bf00      	nop
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	0800b5c4 	.word	0x0800b5c4
 8006d80:	0800b5cc 	.word	0x0800b5cc

08006d84 <__cvt>:
 8006d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d88:	ec57 6b10 	vmov	r6, r7, d0
 8006d8c:	2f00      	cmp	r7, #0
 8006d8e:	460c      	mov	r4, r1
 8006d90:	4619      	mov	r1, r3
 8006d92:	463b      	mov	r3, r7
 8006d94:	bfbb      	ittet	lt
 8006d96:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006d9a:	461f      	movlt	r7, r3
 8006d9c:	2300      	movge	r3, #0
 8006d9e:	232d      	movlt	r3, #45	@ 0x2d
 8006da0:	700b      	strb	r3, [r1, #0]
 8006da2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006da4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006da8:	4691      	mov	r9, r2
 8006daa:	f023 0820 	bic.w	r8, r3, #32
 8006dae:	bfbc      	itt	lt
 8006db0:	4632      	movlt	r2, r6
 8006db2:	4616      	movlt	r6, r2
 8006db4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006db8:	d005      	beq.n	8006dc6 <__cvt+0x42>
 8006dba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006dbe:	d100      	bne.n	8006dc2 <__cvt+0x3e>
 8006dc0:	3401      	adds	r4, #1
 8006dc2:	2102      	movs	r1, #2
 8006dc4:	e000      	b.n	8006dc8 <__cvt+0x44>
 8006dc6:	2103      	movs	r1, #3
 8006dc8:	ab03      	add	r3, sp, #12
 8006dca:	9301      	str	r3, [sp, #4]
 8006dcc:	ab02      	add	r3, sp, #8
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	ec47 6b10 	vmov	d0, r6, r7
 8006dd4:	4653      	mov	r3, sl
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	f000 fe96 	bl	8007b08 <_dtoa_r>
 8006ddc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006de0:	4605      	mov	r5, r0
 8006de2:	d119      	bne.n	8006e18 <__cvt+0x94>
 8006de4:	f019 0f01 	tst.w	r9, #1
 8006de8:	d00e      	beq.n	8006e08 <__cvt+0x84>
 8006dea:	eb00 0904 	add.w	r9, r0, r4
 8006dee:	2200      	movs	r2, #0
 8006df0:	2300      	movs	r3, #0
 8006df2:	4630      	mov	r0, r6
 8006df4:	4639      	mov	r1, r7
 8006df6:	f7f9 fe8f 	bl	8000b18 <__aeabi_dcmpeq>
 8006dfa:	b108      	cbz	r0, 8006e00 <__cvt+0x7c>
 8006dfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e00:	2230      	movs	r2, #48	@ 0x30
 8006e02:	9b03      	ldr	r3, [sp, #12]
 8006e04:	454b      	cmp	r3, r9
 8006e06:	d31e      	bcc.n	8006e46 <__cvt+0xc2>
 8006e08:	9b03      	ldr	r3, [sp, #12]
 8006e0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e0c:	1b5b      	subs	r3, r3, r5
 8006e0e:	4628      	mov	r0, r5
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	b004      	add	sp, #16
 8006e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e1c:	eb00 0904 	add.w	r9, r0, r4
 8006e20:	d1e5      	bne.n	8006dee <__cvt+0x6a>
 8006e22:	7803      	ldrb	r3, [r0, #0]
 8006e24:	2b30      	cmp	r3, #48	@ 0x30
 8006e26:	d10a      	bne.n	8006e3e <__cvt+0xba>
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	4639      	mov	r1, r7
 8006e30:	f7f9 fe72 	bl	8000b18 <__aeabi_dcmpeq>
 8006e34:	b918      	cbnz	r0, 8006e3e <__cvt+0xba>
 8006e36:	f1c4 0401 	rsb	r4, r4, #1
 8006e3a:	f8ca 4000 	str.w	r4, [sl]
 8006e3e:	f8da 3000 	ldr.w	r3, [sl]
 8006e42:	4499      	add	r9, r3
 8006e44:	e7d3      	b.n	8006dee <__cvt+0x6a>
 8006e46:	1c59      	adds	r1, r3, #1
 8006e48:	9103      	str	r1, [sp, #12]
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	e7d9      	b.n	8006e02 <__cvt+0x7e>

08006e4e <__exponent>:
 8006e4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e50:	2900      	cmp	r1, #0
 8006e52:	bfba      	itte	lt
 8006e54:	4249      	neglt	r1, r1
 8006e56:	232d      	movlt	r3, #45	@ 0x2d
 8006e58:	232b      	movge	r3, #43	@ 0x2b
 8006e5a:	2909      	cmp	r1, #9
 8006e5c:	7002      	strb	r2, [r0, #0]
 8006e5e:	7043      	strb	r3, [r0, #1]
 8006e60:	dd29      	ble.n	8006eb6 <__exponent+0x68>
 8006e62:	f10d 0307 	add.w	r3, sp, #7
 8006e66:	461d      	mov	r5, r3
 8006e68:	270a      	movs	r7, #10
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006e70:	fb07 1416 	mls	r4, r7, r6, r1
 8006e74:	3430      	adds	r4, #48	@ 0x30
 8006e76:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	2c63      	cmp	r4, #99	@ 0x63
 8006e7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e82:	4631      	mov	r1, r6
 8006e84:	dcf1      	bgt.n	8006e6a <__exponent+0x1c>
 8006e86:	3130      	adds	r1, #48	@ 0x30
 8006e88:	1e94      	subs	r4, r2, #2
 8006e8a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e8e:	1c41      	adds	r1, r0, #1
 8006e90:	4623      	mov	r3, r4
 8006e92:	42ab      	cmp	r3, r5
 8006e94:	d30a      	bcc.n	8006eac <__exponent+0x5e>
 8006e96:	f10d 0309 	add.w	r3, sp, #9
 8006e9a:	1a9b      	subs	r3, r3, r2
 8006e9c:	42ac      	cmp	r4, r5
 8006e9e:	bf88      	it	hi
 8006ea0:	2300      	movhi	r3, #0
 8006ea2:	3302      	adds	r3, #2
 8006ea4:	4403      	add	r3, r0
 8006ea6:	1a18      	subs	r0, r3, r0
 8006ea8:	b003      	add	sp, #12
 8006eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eac:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006eb0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006eb4:	e7ed      	b.n	8006e92 <__exponent+0x44>
 8006eb6:	2330      	movs	r3, #48	@ 0x30
 8006eb8:	3130      	adds	r1, #48	@ 0x30
 8006eba:	7083      	strb	r3, [r0, #2]
 8006ebc:	70c1      	strb	r1, [r0, #3]
 8006ebe:	1d03      	adds	r3, r0, #4
 8006ec0:	e7f1      	b.n	8006ea6 <__exponent+0x58>
	...

08006ec4 <_printf_float>:
 8006ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec8:	b08d      	sub	sp, #52	@ 0x34
 8006eca:	460c      	mov	r4, r1
 8006ecc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006ed0:	4616      	mov	r6, r2
 8006ed2:	461f      	mov	r7, r3
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	f000 fd09 	bl	80078ec <_localeconv_r>
 8006eda:	6803      	ldr	r3, [r0, #0]
 8006edc:	9304      	str	r3, [sp, #16]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7f9 f9ee 	bl	80002c0 <strlen>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8006eec:	9005      	str	r0, [sp, #20]
 8006eee:	3307      	adds	r3, #7
 8006ef0:	f023 0307 	bic.w	r3, r3, #7
 8006ef4:	f103 0208 	add.w	r2, r3, #8
 8006ef8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006efc:	f8d4 b000 	ldr.w	fp, [r4]
 8006f00:	f8c8 2000 	str.w	r2, [r8]
 8006f04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006f0c:	9307      	str	r3, [sp, #28]
 8006f0e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f12:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f1a:	4b9c      	ldr	r3, [pc, #624]	@ (800718c <_printf_float+0x2c8>)
 8006f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f20:	f7f9 fe2c 	bl	8000b7c <__aeabi_dcmpun>
 8006f24:	bb70      	cbnz	r0, 8006f84 <_printf_float+0xc0>
 8006f26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f2a:	4b98      	ldr	r3, [pc, #608]	@ (800718c <_printf_float+0x2c8>)
 8006f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f30:	f7f9 fe06 	bl	8000b40 <__aeabi_dcmple>
 8006f34:	bb30      	cbnz	r0, 8006f84 <_printf_float+0xc0>
 8006f36:	2200      	movs	r2, #0
 8006f38:	2300      	movs	r3, #0
 8006f3a:	4640      	mov	r0, r8
 8006f3c:	4649      	mov	r1, r9
 8006f3e:	f7f9 fdf5 	bl	8000b2c <__aeabi_dcmplt>
 8006f42:	b110      	cbz	r0, 8006f4a <_printf_float+0x86>
 8006f44:	232d      	movs	r3, #45	@ 0x2d
 8006f46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f4a:	4a91      	ldr	r2, [pc, #580]	@ (8007190 <_printf_float+0x2cc>)
 8006f4c:	4b91      	ldr	r3, [pc, #580]	@ (8007194 <_printf_float+0x2d0>)
 8006f4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006f52:	bf8c      	ite	hi
 8006f54:	4690      	movhi	r8, r2
 8006f56:	4698      	movls	r8, r3
 8006f58:	2303      	movs	r3, #3
 8006f5a:	6123      	str	r3, [r4, #16]
 8006f5c:	f02b 0304 	bic.w	r3, fp, #4
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	f04f 0900 	mov.w	r9, #0
 8006f66:	9700      	str	r7, [sp, #0]
 8006f68:	4633      	mov	r3, r6
 8006f6a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4628      	mov	r0, r5
 8006f70:	f000 f9d2 	bl	8007318 <_printf_common>
 8006f74:	3001      	adds	r0, #1
 8006f76:	f040 808d 	bne.w	8007094 <_printf_float+0x1d0>
 8006f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7e:	b00d      	add	sp, #52	@ 0x34
 8006f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f84:	4642      	mov	r2, r8
 8006f86:	464b      	mov	r3, r9
 8006f88:	4640      	mov	r0, r8
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	f7f9 fdf6 	bl	8000b7c <__aeabi_dcmpun>
 8006f90:	b140      	cbz	r0, 8006fa4 <_printf_float+0xe0>
 8006f92:	464b      	mov	r3, r9
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	bfbc      	itt	lt
 8006f98:	232d      	movlt	r3, #45	@ 0x2d
 8006f9a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006f9e:	4a7e      	ldr	r2, [pc, #504]	@ (8007198 <_printf_float+0x2d4>)
 8006fa0:	4b7e      	ldr	r3, [pc, #504]	@ (800719c <_printf_float+0x2d8>)
 8006fa2:	e7d4      	b.n	8006f4e <_printf_float+0x8a>
 8006fa4:	6863      	ldr	r3, [r4, #4]
 8006fa6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006faa:	9206      	str	r2, [sp, #24]
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	d13b      	bne.n	8007028 <_printf_float+0x164>
 8006fb0:	2306      	movs	r3, #6
 8006fb2:	6063      	str	r3, [r4, #4]
 8006fb4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006fb8:	2300      	movs	r3, #0
 8006fba:	6022      	str	r2, [r4, #0]
 8006fbc:	9303      	str	r3, [sp, #12]
 8006fbe:	ab0a      	add	r3, sp, #40	@ 0x28
 8006fc0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006fc4:	ab09      	add	r3, sp, #36	@ 0x24
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	6861      	ldr	r1, [r4, #4]
 8006fca:	ec49 8b10 	vmov	d0, r8, r9
 8006fce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f7ff fed6 	bl	8006d84 <__cvt>
 8006fd8:	9b06      	ldr	r3, [sp, #24]
 8006fda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fdc:	2b47      	cmp	r3, #71	@ 0x47
 8006fde:	4680      	mov	r8, r0
 8006fe0:	d129      	bne.n	8007036 <_printf_float+0x172>
 8006fe2:	1cc8      	adds	r0, r1, #3
 8006fe4:	db02      	blt.n	8006fec <_printf_float+0x128>
 8006fe6:	6863      	ldr	r3, [r4, #4]
 8006fe8:	4299      	cmp	r1, r3
 8006fea:	dd41      	ble.n	8007070 <_printf_float+0x1ac>
 8006fec:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ff0:	fa5f fa8a 	uxtb.w	sl, sl
 8006ff4:	3901      	subs	r1, #1
 8006ff6:	4652      	mov	r2, sl
 8006ff8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006ffc:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ffe:	f7ff ff26 	bl	8006e4e <__exponent>
 8007002:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007004:	1813      	adds	r3, r2, r0
 8007006:	2a01      	cmp	r2, #1
 8007008:	4681      	mov	r9, r0
 800700a:	6123      	str	r3, [r4, #16]
 800700c:	dc02      	bgt.n	8007014 <_printf_float+0x150>
 800700e:	6822      	ldr	r2, [r4, #0]
 8007010:	07d2      	lsls	r2, r2, #31
 8007012:	d501      	bpl.n	8007018 <_printf_float+0x154>
 8007014:	3301      	adds	r3, #1
 8007016:	6123      	str	r3, [r4, #16]
 8007018:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0a2      	beq.n	8006f66 <_printf_float+0xa2>
 8007020:	232d      	movs	r3, #45	@ 0x2d
 8007022:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007026:	e79e      	b.n	8006f66 <_printf_float+0xa2>
 8007028:	9a06      	ldr	r2, [sp, #24]
 800702a:	2a47      	cmp	r2, #71	@ 0x47
 800702c:	d1c2      	bne.n	8006fb4 <_printf_float+0xf0>
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1c0      	bne.n	8006fb4 <_printf_float+0xf0>
 8007032:	2301      	movs	r3, #1
 8007034:	e7bd      	b.n	8006fb2 <_printf_float+0xee>
 8007036:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800703a:	d9db      	bls.n	8006ff4 <_printf_float+0x130>
 800703c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007040:	d118      	bne.n	8007074 <_printf_float+0x1b0>
 8007042:	2900      	cmp	r1, #0
 8007044:	6863      	ldr	r3, [r4, #4]
 8007046:	dd0b      	ble.n	8007060 <_printf_float+0x19c>
 8007048:	6121      	str	r1, [r4, #16]
 800704a:	b913      	cbnz	r3, 8007052 <_printf_float+0x18e>
 800704c:	6822      	ldr	r2, [r4, #0]
 800704e:	07d0      	lsls	r0, r2, #31
 8007050:	d502      	bpl.n	8007058 <_printf_float+0x194>
 8007052:	3301      	adds	r3, #1
 8007054:	440b      	add	r3, r1
 8007056:	6123      	str	r3, [r4, #16]
 8007058:	65a1      	str	r1, [r4, #88]	@ 0x58
 800705a:	f04f 0900 	mov.w	r9, #0
 800705e:	e7db      	b.n	8007018 <_printf_float+0x154>
 8007060:	b913      	cbnz	r3, 8007068 <_printf_float+0x1a4>
 8007062:	6822      	ldr	r2, [r4, #0]
 8007064:	07d2      	lsls	r2, r2, #31
 8007066:	d501      	bpl.n	800706c <_printf_float+0x1a8>
 8007068:	3302      	adds	r3, #2
 800706a:	e7f4      	b.n	8007056 <_printf_float+0x192>
 800706c:	2301      	movs	r3, #1
 800706e:	e7f2      	b.n	8007056 <_printf_float+0x192>
 8007070:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007076:	4299      	cmp	r1, r3
 8007078:	db05      	blt.n	8007086 <_printf_float+0x1c2>
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	6121      	str	r1, [r4, #16]
 800707e:	07d8      	lsls	r0, r3, #31
 8007080:	d5ea      	bpl.n	8007058 <_printf_float+0x194>
 8007082:	1c4b      	adds	r3, r1, #1
 8007084:	e7e7      	b.n	8007056 <_printf_float+0x192>
 8007086:	2900      	cmp	r1, #0
 8007088:	bfd4      	ite	le
 800708a:	f1c1 0202 	rsble	r2, r1, #2
 800708e:	2201      	movgt	r2, #1
 8007090:	4413      	add	r3, r2
 8007092:	e7e0      	b.n	8007056 <_printf_float+0x192>
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	055a      	lsls	r2, r3, #21
 8007098:	d407      	bmi.n	80070aa <_printf_float+0x1e6>
 800709a:	6923      	ldr	r3, [r4, #16]
 800709c:	4642      	mov	r2, r8
 800709e:	4631      	mov	r1, r6
 80070a0:	4628      	mov	r0, r5
 80070a2:	47b8      	blx	r7
 80070a4:	3001      	adds	r0, #1
 80070a6:	d12b      	bne.n	8007100 <_printf_float+0x23c>
 80070a8:	e767      	b.n	8006f7a <_printf_float+0xb6>
 80070aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80070ae:	f240 80dd 	bls.w	800726c <_printf_float+0x3a8>
 80070b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80070b6:	2200      	movs	r2, #0
 80070b8:	2300      	movs	r3, #0
 80070ba:	f7f9 fd2d 	bl	8000b18 <__aeabi_dcmpeq>
 80070be:	2800      	cmp	r0, #0
 80070c0:	d033      	beq.n	800712a <_printf_float+0x266>
 80070c2:	4a37      	ldr	r2, [pc, #220]	@ (80071a0 <_printf_float+0x2dc>)
 80070c4:	2301      	movs	r3, #1
 80070c6:	4631      	mov	r1, r6
 80070c8:	4628      	mov	r0, r5
 80070ca:	47b8      	blx	r7
 80070cc:	3001      	adds	r0, #1
 80070ce:	f43f af54 	beq.w	8006f7a <_printf_float+0xb6>
 80070d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80070d6:	4543      	cmp	r3, r8
 80070d8:	db02      	blt.n	80070e0 <_printf_float+0x21c>
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	07d8      	lsls	r0, r3, #31
 80070de:	d50f      	bpl.n	8007100 <_printf_float+0x23c>
 80070e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070e4:	4631      	mov	r1, r6
 80070e6:	4628      	mov	r0, r5
 80070e8:	47b8      	blx	r7
 80070ea:	3001      	adds	r0, #1
 80070ec:	f43f af45 	beq.w	8006f7a <_printf_float+0xb6>
 80070f0:	f04f 0900 	mov.w	r9, #0
 80070f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80070f8:	f104 0a1a 	add.w	sl, r4, #26
 80070fc:	45c8      	cmp	r8, r9
 80070fe:	dc09      	bgt.n	8007114 <_printf_float+0x250>
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	079b      	lsls	r3, r3, #30
 8007104:	f100 8103 	bmi.w	800730e <_printf_float+0x44a>
 8007108:	68e0      	ldr	r0, [r4, #12]
 800710a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800710c:	4298      	cmp	r0, r3
 800710e:	bfb8      	it	lt
 8007110:	4618      	movlt	r0, r3
 8007112:	e734      	b.n	8006f7e <_printf_float+0xba>
 8007114:	2301      	movs	r3, #1
 8007116:	4652      	mov	r2, sl
 8007118:	4631      	mov	r1, r6
 800711a:	4628      	mov	r0, r5
 800711c:	47b8      	blx	r7
 800711e:	3001      	adds	r0, #1
 8007120:	f43f af2b 	beq.w	8006f7a <_printf_float+0xb6>
 8007124:	f109 0901 	add.w	r9, r9, #1
 8007128:	e7e8      	b.n	80070fc <_printf_float+0x238>
 800712a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800712c:	2b00      	cmp	r3, #0
 800712e:	dc39      	bgt.n	80071a4 <_printf_float+0x2e0>
 8007130:	4a1b      	ldr	r2, [pc, #108]	@ (80071a0 <_printf_float+0x2dc>)
 8007132:	2301      	movs	r3, #1
 8007134:	4631      	mov	r1, r6
 8007136:	4628      	mov	r0, r5
 8007138:	47b8      	blx	r7
 800713a:	3001      	adds	r0, #1
 800713c:	f43f af1d 	beq.w	8006f7a <_printf_float+0xb6>
 8007140:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007144:	ea59 0303 	orrs.w	r3, r9, r3
 8007148:	d102      	bne.n	8007150 <_printf_float+0x28c>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	07d9      	lsls	r1, r3, #31
 800714e:	d5d7      	bpl.n	8007100 <_printf_float+0x23c>
 8007150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007154:	4631      	mov	r1, r6
 8007156:	4628      	mov	r0, r5
 8007158:	47b8      	blx	r7
 800715a:	3001      	adds	r0, #1
 800715c:	f43f af0d 	beq.w	8006f7a <_printf_float+0xb6>
 8007160:	f04f 0a00 	mov.w	sl, #0
 8007164:	f104 0b1a 	add.w	fp, r4, #26
 8007168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800716a:	425b      	negs	r3, r3
 800716c:	4553      	cmp	r3, sl
 800716e:	dc01      	bgt.n	8007174 <_printf_float+0x2b0>
 8007170:	464b      	mov	r3, r9
 8007172:	e793      	b.n	800709c <_printf_float+0x1d8>
 8007174:	2301      	movs	r3, #1
 8007176:	465a      	mov	r2, fp
 8007178:	4631      	mov	r1, r6
 800717a:	4628      	mov	r0, r5
 800717c:	47b8      	blx	r7
 800717e:	3001      	adds	r0, #1
 8007180:	f43f aefb 	beq.w	8006f7a <_printf_float+0xb6>
 8007184:	f10a 0a01 	add.w	sl, sl, #1
 8007188:	e7ee      	b.n	8007168 <_printf_float+0x2a4>
 800718a:	bf00      	nop
 800718c:	7fefffff 	.word	0x7fefffff
 8007190:	0800b5d8 	.word	0x0800b5d8
 8007194:	0800b5d4 	.word	0x0800b5d4
 8007198:	0800b5e0 	.word	0x0800b5e0
 800719c:	0800b5dc 	.word	0x0800b5dc
 80071a0:	0800b5e4 	.word	0x0800b5e4
 80071a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80071aa:	4553      	cmp	r3, sl
 80071ac:	bfa8      	it	ge
 80071ae:	4653      	movge	r3, sl
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	4699      	mov	r9, r3
 80071b4:	dc36      	bgt.n	8007224 <_printf_float+0x360>
 80071b6:	f04f 0b00 	mov.w	fp, #0
 80071ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071be:	f104 021a 	add.w	r2, r4, #26
 80071c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071c4:	9306      	str	r3, [sp, #24]
 80071c6:	eba3 0309 	sub.w	r3, r3, r9
 80071ca:	455b      	cmp	r3, fp
 80071cc:	dc31      	bgt.n	8007232 <_printf_float+0x36e>
 80071ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d0:	459a      	cmp	sl, r3
 80071d2:	dc3a      	bgt.n	800724a <_printf_float+0x386>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	07da      	lsls	r2, r3, #31
 80071d8:	d437      	bmi.n	800724a <_printf_float+0x386>
 80071da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071dc:	ebaa 0903 	sub.w	r9, sl, r3
 80071e0:	9b06      	ldr	r3, [sp, #24]
 80071e2:	ebaa 0303 	sub.w	r3, sl, r3
 80071e6:	4599      	cmp	r9, r3
 80071e8:	bfa8      	it	ge
 80071ea:	4699      	movge	r9, r3
 80071ec:	f1b9 0f00 	cmp.w	r9, #0
 80071f0:	dc33      	bgt.n	800725a <_printf_float+0x396>
 80071f2:	f04f 0800 	mov.w	r8, #0
 80071f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071fa:	f104 0b1a 	add.w	fp, r4, #26
 80071fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007200:	ebaa 0303 	sub.w	r3, sl, r3
 8007204:	eba3 0309 	sub.w	r3, r3, r9
 8007208:	4543      	cmp	r3, r8
 800720a:	f77f af79 	ble.w	8007100 <_printf_float+0x23c>
 800720e:	2301      	movs	r3, #1
 8007210:	465a      	mov	r2, fp
 8007212:	4631      	mov	r1, r6
 8007214:	4628      	mov	r0, r5
 8007216:	47b8      	blx	r7
 8007218:	3001      	adds	r0, #1
 800721a:	f43f aeae 	beq.w	8006f7a <_printf_float+0xb6>
 800721e:	f108 0801 	add.w	r8, r8, #1
 8007222:	e7ec      	b.n	80071fe <_printf_float+0x33a>
 8007224:	4642      	mov	r2, r8
 8007226:	4631      	mov	r1, r6
 8007228:	4628      	mov	r0, r5
 800722a:	47b8      	blx	r7
 800722c:	3001      	adds	r0, #1
 800722e:	d1c2      	bne.n	80071b6 <_printf_float+0x2f2>
 8007230:	e6a3      	b.n	8006f7a <_printf_float+0xb6>
 8007232:	2301      	movs	r3, #1
 8007234:	4631      	mov	r1, r6
 8007236:	4628      	mov	r0, r5
 8007238:	9206      	str	r2, [sp, #24]
 800723a:	47b8      	blx	r7
 800723c:	3001      	adds	r0, #1
 800723e:	f43f ae9c 	beq.w	8006f7a <_printf_float+0xb6>
 8007242:	9a06      	ldr	r2, [sp, #24]
 8007244:	f10b 0b01 	add.w	fp, fp, #1
 8007248:	e7bb      	b.n	80071c2 <_printf_float+0x2fe>
 800724a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800724e:	4631      	mov	r1, r6
 8007250:	4628      	mov	r0, r5
 8007252:	47b8      	blx	r7
 8007254:	3001      	adds	r0, #1
 8007256:	d1c0      	bne.n	80071da <_printf_float+0x316>
 8007258:	e68f      	b.n	8006f7a <_printf_float+0xb6>
 800725a:	9a06      	ldr	r2, [sp, #24]
 800725c:	464b      	mov	r3, r9
 800725e:	4442      	add	r2, r8
 8007260:	4631      	mov	r1, r6
 8007262:	4628      	mov	r0, r5
 8007264:	47b8      	blx	r7
 8007266:	3001      	adds	r0, #1
 8007268:	d1c3      	bne.n	80071f2 <_printf_float+0x32e>
 800726a:	e686      	b.n	8006f7a <_printf_float+0xb6>
 800726c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007270:	f1ba 0f01 	cmp.w	sl, #1
 8007274:	dc01      	bgt.n	800727a <_printf_float+0x3b6>
 8007276:	07db      	lsls	r3, r3, #31
 8007278:	d536      	bpl.n	80072e8 <_printf_float+0x424>
 800727a:	2301      	movs	r3, #1
 800727c:	4642      	mov	r2, r8
 800727e:	4631      	mov	r1, r6
 8007280:	4628      	mov	r0, r5
 8007282:	47b8      	blx	r7
 8007284:	3001      	adds	r0, #1
 8007286:	f43f ae78 	beq.w	8006f7a <_printf_float+0xb6>
 800728a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800728e:	4631      	mov	r1, r6
 8007290:	4628      	mov	r0, r5
 8007292:	47b8      	blx	r7
 8007294:	3001      	adds	r0, #1
 8007296:	f43f ae70 	beq.w	8006f7a <_printf_float+0xb6>
 800729a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800729e:	2200      	movs	r2, #0
 80072a0:	2300      	movs	r3, #0
 80072a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072a6:	f7f9 fc37 	bl	8000b18 <__aeabi_dcmpeq>
 80072aa:	b9c0      	cbnz	r0, 80072de <_printf_float+0x41a>
 80072ac:	4653      	mov	r3, sl
 80072ae:	f108 0201 	add.w	r2, r8, #1
 80072b2:	4631      	mov	r1, r6
 80072b4:	4628      	mov	r0, r5
 80072b6:	47b8      	blx	r7
 80072b8:	3001      	adds	r0, #1
 80072ba:	d10c      	bne.n	80072d6 <_printf_float+0x412>
 80072bc:	e65d      	b.n	8006f7a <_printf_float+0xb6>
 80072be:	2301      	movs	r3, #1
 80072c0:	465a      	mov	r2, fp
 80072c2:	4631      	mov	r1, r6
 80072c4:	4628      	mov	r0, r5
 80072c6:	47b8      	blx	r7
 80072c8:	3001      	adds	r0, #1
 80072ca:	f43f ae56 	beq.w	8006f7a <_printf_float+0xb6>
 80072ce:	f108 0801 	add.w	r8, r8, #1
 80072d2:	45d0      	cmp	r8, sl
 80072d4:	dbf3      	blt.n	80072be <_printf_float+0x3fa>
 80072d6:	464b      	mov	r3, r9
 80072d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80072dc:	e6df      	b.n	800709e <_printf_float+0x1da>
 80072de:	f04f 0800 	mov.w	r8, #0
 80072e2:	f104 0b1a 	add.w	fp, r4, #26
 80072e6:	e7f4      	b.n	80072d2 <_printf_float+0x40e>
 80072e8:	2301      	movs	r3, #1
 80072ea:	4642      	mov	r2, r8
 80072ec:	e7e1      	b.n	80072b2 <_printf_float+0x3ee>
 80072ee:	2301      	movs	r3, #1
 80072f0:	464a      	mov	r2, r9
 80072f2:	4631      	mov	r1, r6
 80072f4:	4628      	mov	r0, r5
 80072f6:	47b8      	blx	r7
 80072f8:	3001      	adds	r0, #1
 80072fa:	f43f ae3e 	beq.w	8006f7a <_printf_float+0xb6>
 80072fe:	f108 0801 	add.w	r8, r8, #1
 8007302:	68e3      	ldr	r3, [r4, #12]
 8007304:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007306:	1a5b      	subs	r3, r3, r1
 8007308:	4543      	cmp	r3, r8
 800730a:	dcf0      	bgt.n	80072ee <_printf_float+0x42a>
 800730c:	e6fc      	b.n	8007108 <_printf_float+0x244>
 800730e:	f04f 0800 	mov.w	r8, #0
 8007312:	f104 0919 	add.w	r9, r4, #25
 8007316:	e7f4      	b.n	8007302 <_printf_float+0x43e>

08007318 <_printf_common>:
 8007318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800731c:	4616      	mov	r6, r2
 800731e:	4698      	mov	r8, r3
 8007320:	688a      	ldr	r2, [r1, #8]
 8007322:	690b      	ldr	r3, [r1, #16]
 8007324:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007328:	4293      	cmp	r3, r2
 800732a:	bfb8      	it	lt
 800732c:	4613      	movlt	r3, r2
 800732e:	6033      	str	r3, [r6, #0]
 8007330:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007334:	4607      	mov	r7, r0
 8007336:	460c      	mov	r4, r1
 8007338:	b10a      	cbz	r2, 800733e <_printf_common+0x26>
 800733a:	3301      	adds	r3, #1
 800733c:	6033      	str	r3, [r6, #0]
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	0699      	lsls	r1, r3, #26
 8007342:	bf42      	ittt	mi
 8007344:	6833      	ldrmi	r3, [r6, #0]
 8007346:	3302      	addmi	r3, #2
 8007348:	6033      	strmi	r3, [r6, #0]
 800734a:	6825      	ldr	r5, [r4, #0]
 800734c:	f015 0506 	ands.w	r5, r5, #6
 8007350:	d106      	bne.n	8007360 <_printf_common+0x48>
 8007352:	f104 0a19 	add.w	sl, r4, #25
 8007356:	68e3      	ldr	r3, [r4, #12]
 8007358:	6832      	ldr	r2, [r6, #0]
 800735a:	1a9b      	subs	r3, r3, r2
 800735c:	42ab      	cmp	r3, r5
 800735e:	dc26      	bgt.n	80073ae <_printf_common+0x96>
 8007360:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007364:	6822      	ldr	r2, [r4, #0]
 8007366:	3b00      	subs	r3, #0
 8007368:	bf18      	it	ne
 800736a:	2301      	movne	r3, #1
 800736c:	0692      	lsls	r2, r2, #26
 800736e:	d42b      	bmi.n	80073c8 <_printf_common+0xb0>
 8007370:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007374:	4641      	mov	r1, r8
 8007376:	4638      	mov	r0, r7
 8007378:	47c8      	blx	r9
 800737a:	3001      	adds	r0, #1
 800737c:	d01e      	beq.n	80073bc <_printf_common+0xa4>
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	6922      	ldr	r2, [r4, #16]
 8007382:	f003 0306 	and.w	r3, r3, #6
 8007386:	2b04      	cmp	r3, #4
 8007388:	bf02      	ittt	eq
 800738a:	68e5      	ldreq	r5, [r4, #12]
 800738c:	6833      	ldreq	r3, [r6, #0]
 800738e:	1aed      	subeq	r5, r5, r3
 8007390:	68a3      	ldr	r3, [r4, #8]
 8007392:	bf0c      	ite	eq
 8007394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007398:	2500      	movne	r5, #0
 800739a:	4293      	cmp	r3, r2
 800739c:	bfc4      	itt	gt
 800739e:	1a9b      	subgt	r3, r3, r2
 80073a0:	18ed      	addgt	r5, r5, r3
 80073a2:	2600      	movs	r6, #0
 80073a4:	341a      	adds	r4, #26
 80073a6:	42b5      	cmp	r5, r6
 80073a8:	d11a      	bne.n	80073e0 <_printf_common+0xc8>
 80073aa:	2000      	movs	r0, #0
 80073ac:	e008      	b.n	80073c0 <_printf_common+0xa8>
 80073ae:	2301      	movs	r3, #1
 80073b0:	4652      	mov	r2, sl
 80073b2:	4641      	mov	r1, r8
 80073b4:	4638      	mov	r0, r7
 80073b6:	47c8      	blx	r9
 80073b8:	3001      	adds	r0, #1
 80073ba:	d103      	bne.n	80073c4 <_printf_common+0xac>
 80073bc:	f04f 30ff 	mov.w	r0, #4294967295
 80073c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c4:	3501      	adds	r5, #1
 80073c6:	e7c6      	b.n	8007356 <_printf_common+0x3e>
 80073c8:	18e1      	adds	r1, r4, r3
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	2030      	movs	r0, #48	@ 0x30
 80073ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80073d2:	4422      	add	r2, r4
 80073d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80073d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80073dc:	3302      	adds	r3, #2
 80073de:	e7c7      	b.n	8007370 <_printf_common+0x58>
 80073e0:	2301      	movs	r3, #1
 80073e2:	4622      	mov	r2, r4
 80073e4:	4641      	mov	r1, r8
 80073e6:	4638      	mov	r0, r7
 80073e8:	47c8      	blx	r9
 80073ea:	3001      	adds	r0, #1
 80073ec:	d0e6      	beq.n	80073bc <_printf_common+0xa4>
 80073ee:	3601      	adds	r6, #1
 80073f0:	e7d9      	b.n	80073a6 <_printf_common+0x8e>
	...

080073f4 <_printf_i>:
 80073f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073f8:	7e0f      	ldrb	r7, [r1, #24]
 80073fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073fc:	2f78      	cmp	r7, #120	@ 0x78
 80073fe:	4691      	mov	r9, r2
 8007400:	4680      	mov	r8, r0
 8007402:	460c      	mov	r4, r1
 8007404:	469a      	mov	sl, r3
 8007406:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800740a:	d807      	bhi.n	800741c <_printf_i+0x28>
 800740c:	2f62      	cmp	r7, #98	@ 0x62
 800740e:	d80a      	bhi.n	8007426 <_printf_i+0x32>
 8007410:	2f00      	cmp	r7, #0
 8007412:	f000 80d1 	beq.w	80075b8 <_printf_i+0x1c4>
 8007416:	2f58      	cmp	r7, #88	@ 0x58
 8007418:	f000 80b8 	beq.w	800758c <_printf_i+0x198>
 800741c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007420:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007424:	e03a      	b.n	800749c <_printf_i+0xa8>
 8007426:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800742a:	2b15      	cmp	r3, #21
 800742c:	d8f6      	bhi.n	800741c <_printf_i+0x28>
 800742e:	a101      	add	r1, pc, #4	@ (adr r1, 8007434 <_printf_i+0x40>)
 8007430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007434:	0800748d 	.word	0x0800748d
 8007438:	080074a1 	.word	0x080074a1
 800743c:	0800741d 	.word	0x0800741d
 8007440:	0800741d 	.word	0x0800741d
 8007444:	0800741d 	.word	0x0800741d
 8007448:	0800741d 	.word	0x0800741d
 800744c:	080074a1 	.word	0x080074a1
 8007450:	0800741d 	.word	0x0800741d
 8007454:	0800741d 	.word	0x0800741d
 8007458:	0800741d 	.word	0x0800741d
 800745c:	0800741d 	.word	0x0800741d
 8007460:	0800759f 	.word	0x0800759f
 8007464:	080074cb 	.word	0x080074cb
 8007468:	08007559 	.word	0x08007559
 800746c:	0800741d 	.word	0x0800741d
 8007470:	0800741d 	.word	0x0800741d
 8007474:	080075c1 	.word	0x080075c1
 8007478:	0800741d 	.word	0x0800741d
 800747c:	080074cb 	.word	0x080074cb
 8007480:	0800741d 	.word	0x0800741d
 8007484:	0800741d 	.word	0x0800741d
 8007488:	08007561 	.word	0x08007561
 800748c:	6833      	ldr	r3, [r6, #0]
 800748e:	1d1a      	adds	r2, r3, #4
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6032      	str	r2, [r6, #0]
 8007494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007498:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800749c:	2301      	movs	r3, #1
 800749e:	e09c      	b.n	80075da <_printf_i+0x1e6>
 80074a0:	6833      	ldr	r3, [r6, #0]
 80074a2:	6820      	ldr	r0, [r4, #0]
 80074a4:	1d19      	adds	r1, r3, #4
 80074a6:	6031      	str	r1, [r6, #0]
 80074a8:	0606      	lsls	r6, r0, #24
 80074aa:	d501      	bpl.n	80074b0 <_printf_i+0xbc>
 80074ac:	681d      	ldr	r5, [r3, #0]
 80074ae:	e003      	b.n	80074b8 <_printf_i+0xc4>
 80074b0:	0645      	lsls	r5, r0, #25
 80074b2:	d5fb      	bpl.n	80074ac <_printf_i+0xb8>
 80074b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80074b8:	2d00      	cmp	r5, #0
 80074ba:	da03      	bge.n	80074c4 <_printf_i+0xd0>
 80074bc:	232d      	movs	r3, #45	@ 0x2d
 80074be:	426d      	negs	r5, r5
 80074c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074c4:	4858      	ldr	r0, [pc, #352]	@ (8007628 <_printf_i+0x234>)
 80074c6:	230a      	movs	r3, #10
 80074c8:	e011      	b.n	80074ee <_printf_i+0xfa>
 80074ca:	6821      	ldr	r1, [r4, #0]
 80074cc:	6833      	ldr	r3, [r6, #0]
 80074ce:	0608      	lsls	r0, r1, #24
 80074d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80074d4:	d402      	bmi.n	80074dc <_printf_i+0xe8>
 80074d6:	0649      	lsls	r1, r1, #25
 80074d8:	bf48      	it	mi
 80074da:	b2ad      	uxthmi	r5, r5
 80074dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80074de:	4852      	ldr	r0, [pc, #328]	@ (8007628 <_printf_i+0x234>)
 80074e0:	6033      	str	r3, [r6, #0]
 80074e2:	bf14      	ite	ne
 80074e4:	230a      	movne	r3, #10
 80074e6:	2308      	moveq	r3, #8
 80074e8:	2100      	movs	r1, #0
 80074ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80074ee:	6866      	ldr	r6, [r4, #4]
 80074f0:	60a6      	str	r6, [r4, #8]
 80074f2:	2e00      	cmp	r6, #0
 80074f4:	db05      	blt.n	8007502 <_printf_i+0x10e>
 80074f6:	6821      	ldr	r1, [r4, #0]
 80074f8:	432e      	orrs	r6, r5
 80074fa:	f021 0104 	bic.w	r1, r1, #4
 80074fe:	6021      	str	r1, [r4, #0]
 8007500:	d04b      	beq.n	800759a <_printf_i+0x1a6>
 8007502:	4616      	mov	r6, r2
 8007504:	fbb5 f1f3 	udiv	r1, r5, r3
 8007508:	fb03 5711 	mls	r7, r3, r1, r5
 800750c:	5dc7      	ldrb	r7, [r0, r7]
 800750e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007512:	462f      	mov	r7, r5
 8007514:	42bb      	cmp	r3, r7
 8007516:	460d      	mov	r5, r1
 8007518:	d9f4      	bls.n	8007504 <_printf_i+0x110>
 800751a:	2b08      	cmp	r3, #8
 800751c:	d10b      	bne.n	8007536 <_printf_i+0x142>
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	07df      	lsls	r7, r3, #31
 8007522:	d508      	bpl.n	8007536 <_printf_i+0x142>
 8007524:	6923      	ldr	r3, [r4, #16]
 8007526:	6861      	ldr	r1, [r4, #4]
 8007528:	4299      	cmp	r1, r3
 800752a:	bfde      	ittt	le
 800752c:	2330      	movle	r3, #48	@ 0x30
 800752e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007532:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007536:	1b92      	subs	r2, r2, r6
 8007538:	6122      	str	r2, [r4, #16]
 800753a:	f8cd a000 	str.w	sl, [sp]
 800753e:	464b      	mov	r3, r9
 8007540:	aa03      	add	r2, sp, #12
 8007542:	4621      	mov	r1, r4
 8007544:	4640      	mov	r0, r8
 8007546:	f7ff fee7 	bl	8007318 <_printf_common>
 800754a:	3001      	adds	r0, #1
 800754c:	d14a      	bne.n	80075e4 <_printf_i+0x1f0>
 800754e:	f04f 30ff 	mov.w	r0, #4294967295
 8007552:	b004      	add	sp, #16
 8007554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	f043 0320 	orr.w	r3, r3, #32
 800755e:	6023      	str	r3, [r4, #0]
 8007560:	4832      	ldr	r0, [pc, #200]	@ (800762c <_printf_i+0x238>)
 8007562:	2778      	movs	r7, #120	@ 0x78
 8007564:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007568:	6823      	ldr	r3, [r4, #0]
 800756a:	6831      	ldr	r1, [r6, #0]
 800756c:	061f      	lsls	r7, r3, #24
 800756e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007572:	d402      	bmi.n	800757a <_printf_i+0x186>
 8007574:	065f      	lsls	r7, r3, #25
 8007576:	bf48      	it	mi
 8007578:	b2ad      	uxthmi	r5, r5
 800757a:	6031      	str	r1, [r6, #0]
 800757c:	07d9      	lsls	r1, r3, #31
 800757e:	bf44      	itt	mi
 8007580:	f043 0320 	orrmi.w	r3, r3, #32
 8007584:	6023      	strmi	r3, [r4, #0]
 8007586:	b11d      	cbz	r5, 8007590 <_printf_i+0x19c>
 8007588:	2310      	movs	r3, #16
 800758a:	e7ad      	b.n	80074e8 <_printf_i+0xf4>
 800758c:	4826      	ldr	r0, [pc, #152]	@ (8007628 <_printf_i+0x234>)
 800758e:	e7e9      	b.n	8007564 <_printf_i+0x170>
 8007590:	6823      	ldr	r3, [r4, #0]
 8007592:	f023 0320 	bic.w	r3, r3, #32
 8007596:	6023      	str	r3, [r4, #0]
 8007598:	e7f6      	b.n	8007588 <_printf_i+0x194>
 800759a:	4616      	mov	r6, r2
 800759c:	e7bd      	b.n	800751a <_printf_i+0x126>
 800759e:	6833      	ldr	r3, [r6, #0]
 80075a0:	6825      	ldr	r5, [r4, #0]
 80075a2:	6961      	ldr	r1, [r4, #20]
 80075a4:	1d18      	adds	r0, r3, #4
 80075a6:	6030      	str	r0, [r6, #0]
 80075a8:	062e      	lsls	r6, r5, #24
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	d501      	bpl.n	80075b2 <_printf_i+0x1be>
 80075ae:	6019      	str	r1, [r3, #0]
 80075b0:	e002      	b.n	80075b8 <_printf_i+0x1c4>
 80075b2:	0668      	lsls	r0, r5, #25
 80075b4:	d5fb      	bpl.n	80075ae <_printf_i+0x1ba>
 80075b6:	8019      	strh	r1, [r3, #0]
 80075b8:	2300      	movs	r3, #0
 80075ba:	6123      	str	r3, [r4, #16]
 80075bc:	4616      	mov	r6, r2
 80075be:	e7bc      	b.n	800753a <_printf_i+0x146>
 80075c0:	6833      	ldr	r3, [r6, #0]
 80075c2:	1d1a      	adds	r2, r3, #4
 80075c4:	6032      	str	r2, [r6, #0]
 80075c6:	681e      	ldr	r6, [r3, #0]
 80075c8:	6862      	ldr	r2, [r4, #4]
 80075ca:	2100      	movs	r1, #0
 80075cc:	4630      	mov	r0, r6
 80075ce:	f7f8 fe27 	bl	8000220 <memchr>
 80075d2:	b108      	cbz	r0, 80075d8 <_printf_i+0x1e4>
 80075d4:	1b80      	subs	r0, r0, r6
 80075d6:	6060      	str	r0, [r4, #4]
 80075d8:	6863      	ldr	r3, [r4, #4]
 80075da:	6123      	str	r3, [r4, #16]
 80075dc:	2300      	movs	r3, #0
 80075de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075e2:	e7aa      	b.n	800753a <_printf_i+0x146>
 80075e4:	6923      	ldr	r3, [r4, #16]
 80075e6:	4632      	mov	r2, r6
 80075e8:	4649      	mov	r1, r9
 80075ea:	4640      	mov	r0, r8
 80075ec:	47d0      	blx	sl
 80075ee:	3001      	adds	r0, #1
 80075f0:	d0ad      	beq.n	800754e <_printf_i+0x15a>
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	079b      	lsls	r3, r3, #30
 80075f6:	d413      	bmi.n	8007620 <_printf_i+0x22c>
 80075f8:	68e0      	ldr	r0, [r4, #12]
 80075fa:	9b03      	ldr	r3, [sp, #12]
 80075fc:	4298      	cmp	r0, r3
 80075fe:	bfb8      	it	lt
 8007600:	4618      	movlt	r0, r3
 8007602:	e7a6      	b.n	8007552 <_printf_i+0x15e>
 8007604:	2301      	movs	r3, #1
 8007606:	4632      	mov	r2, r6
 8007608:	4649      	mov	r1, r9
 800760a:	4640      	mov	r0, r8
 800760c:	47d0      	blx	sl
 800760e:	3001      	adds	r0, #1
 8007610:	d09d      	beq.n	800754e <_printf_i+0x15a>
 8007612:	3501      	adds	r5, #1
 8007614:	68e3      	ldr	r3, [r4, #12]
 8007616:	9903      	ldr	r1, [sp, #12]
 8007618:	1a5b      	subs	r3, r3, r1
 800761a:	42ab      	cmp	r3, r5
 800761c:	dcf2      	bgt.n	8007604 <_printf_i+0x210>
 800761e:	e7eb      	b.n	80075f8 <_printf_i+0x204>
 8007620:	2500      	movs	r5, #0
 8007622:	f104 0619 	add.w	r6, r4, #25
 8007626:	e7f5      	b.n	8007614 <_printf_i+0x220>
 8007628:	0800b5e6 	.word	0x0800b5e6
 800762c:	0800b5f7 	.word	0x0800b5f7

08007630 <std>:
 8007630:	2300      	movs	r3, #0
 8007632:	b510      	push	{r4, lr}
 8007634:	4604      	mov	r4, r0
 8007636:	e9c0 3300 	strd	r3, r3, [r0]
 800763a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800763e:	6083      	str	r3, [r0, #8]
 8007640:	8181      	strh	r1, [r0, #12]
 8007642:	6643      	str	r3, [r0, #100]	@ 0x64
 8007644:	81c2      	strh	r2, [r0, #14]
 8007646:	6183      	str	r3, [r0, #24]
 8007648:	4619      	mov	r1, r3
 800764a:	2208      	movs	r2, #8
 800764c:	305c      	adds	r0, #92	@ 0x5c
 800764e:	f000 f944 	bl	80078da <memset>
 8007652:	4b0d      	ldr	r3, [pc, #52]	@ (8007688 <std+0x58>)
 8007654:	6263      	str	r3, [r4, #36]	@ 0x24
 8007656:	4b0d      	ldr	r3, [pc, #52]	@ (800768c <std+0x5c>)
 8007658:	62a3      	str	r3, [r4, #40]	@ 0x28
 800765a:	4b0d      	ldr	r3, [pc, #52]	@ (8007690 <std+0x60>)
 800765c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800765e:	4b0d      	ldr	r3, [pc, #52]	@ (8007694 <std+0x64>)
 8007660:	6323      	str	r3, [r4, #48]	@ 0x30
 8007662:	4b0d      	ldr	r3, [pc, #52]	@ (8007698 <std+0x68>)
 8007664:	6224      	str	r4, [r4, #32]
 8007666:	429c      	cmp	r4, r3
 8007668:	d006      	beq.n	8007678 <std+0x48>
 800766a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800766e:	4294      	cmp	r4, r2
 8007670:	d002      	beq.n	8007678 <std+0x48>
 8007672:	33d0      	adds	r3, #208	@ 0xd0
 8007674:	429c      	cmp	r4, r3
 8007676:	d105      	bne.n	8007684 <std+0x54>
 8007678:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800767c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007680:	f000 b9a8 	b.w	80079d4 <__retarget_lock_init_recursive>
 8007684:	bd10      	pop	{r4, pc}
 8007686:	bf00      	nop
 8007688:	08007821 	.word	0x08007821
 800768c:	08007843 	.word	0x08007843
 8007690:	0800787b 	.word	0x0800787b
 8007694:	0800789f 	.word	0x0800789f
 8007698:	200008d0 	.word	0x200008d0

0800769c <stdio_exit_handler>:
 800769c:	4a02      	ldr	r2, [pc, #8]	@ (80076a8 <stdio_exit_handler+0xc>)
 800769e:	4903      	ldr	r1, [pc, #12]	@ (80076ac <stdio_exit_handler+0x10>)
 80076a0:	4803      	ldr	r0, [pc, #12]	@ (80076b0 <stdio_exit_handler+0x14>)
 80076a2:	f000 b869 	b.w	8007778 <_fwalk_sglue>
 80076a6:	bf00      	nop
 80076a8:	20000020 	.word	0x20000020
 80076ac:	08009355 	.word	0x08009355
 80076b0:	20000030 	.word	0x20000030

080076b4 <cleanup_stdio>:
 80076b4:	6841      	ldr	r1, [r0, #4]
 80076b6:	4b0c      	ldr	r3, [pc, #48]	@ (80076e8 <cleanup_stdio+0x34>)
 80076b8:	4299      	cmp	r1, r3
 80076ba:	b510      	push	{r4, lr}
 80076bc:	4604      	mov	r4, r0
 80076be:	d001      	beq.n	80076c4 <cleanup_stdio+0x10>
 80076c0:	f001 fe48 	bl	8009354 <_fflush_r>
 80076c4:	68a1      	ldr	r1, [r4, #8]
 80076c6:	4b09      	ldr	r3, [pc, #36]	@ (80076ec <cleanup_stdio+0x38>)
 80076c8:	4299      	cmp	r1, r3
 80076ca:	d002      	beq.n	80076d2 <cleanup_stdio+0x1e>
 80076cc:	4620      	mov	r0, r4
 80076ce:	f001 fe41 	bl	8009354 <_fflush_r>
 80076d2:	68e1      	ldr	r1, [r4, #12]
 80076d4:	4b06      	ldr	r3, [pc, #24]	@ (80076f0 <cleanup_stdio+0x3c>)
 80076d6:	4299      	cmp	r1, r3
 80076d8:	d004      	beq.n	80076e4 <cleanup_stdio+0x30>
 80076da:	4620      	mov	r0, r4
 80076dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e0:	f001 be38 	b.w	8009354 <_fflush_r>
 80076e4:	bd10      	pop	{r4, pc}
 80076e6:	bf00      	nop
 80076e8:	200008d0 	.word	0x200008d0
 80076ec:	20000938 	.word	0x20000938
 80076f0:	200009a0 	.word	0x200009a0

080076f4 <global_stdio_init.part.0>:
 80076f4:	b510      	push	{r4, lr}
 80076f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007724 <global_stdio_init.part.0+0x30>)
 80076f8:	4c0b      	ldr	r4, [pc, #44]	@ (8007728 <global_stdio_init.part.0+0x34>)
 80076fa:	4a0c      	ldr	r2, [pc, #48]	@ (800772c <global_stdio_init.part.0+0x38>)
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	4620      	mov	r0, r4
 8007700:	2200      	movs	r2, #0
 8007702:	2104      	movs	r1, #4
 8007704:	f7ff ff94 	bl	8007630 <std>
 8007708:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800770c:	2201      	movs	r2, #1
 800770e:	2109      	movs	r1, #9
 8007710:	f7ff ff8e 	bl	8007630 <std>
 8007714:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007718:	2202      	movs	r2, #2
 800771a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800771e:	2112      	movs	r1, #18
 8007720:	f7ff bf86 	b.w	8007630 <std>
 8007724:	20000a08 	.word	0x20000a08
 8007728:	200008d0 	.word	0x200008d0
 800772c:	0800769d 	.word	0x0800769d

08007730 <__sfp_lock_acquire>:
 8007730:	4801      	ldr	r0, [pc, #4]	@ (8007738 <__sfp_lock_acquire+0x8>)
 8007732:	f000 b950 	b.w	80079d6 <__retarget_lock_acquire_recursive>
 8007736:	bf00      	nop
 8007738:	20000a11 	.word	0x20000a11

0800773c <__sfp_lock_release>:
 800773c:	4801      	ldr	r0, [pc, #4]	@ (8007744 <__sfp_lock_release+0x8>)
 800773e:	f000 b94b 	b.w	80079d8 <__retarget_lock_release_recursive>
 8007742:	bf00      	nop
 8007744:	20000a11 	.word	0x20000a11

08007748 <__sinit>:
 8007748:	b510      	push	{r4, lr}
 800774a:	4604      	mov	r4, r0
 800774c:	f7ff fff0 	bl	8007730 <__sfp_lock_acquire>
 8007750:	6a23      	ldr	r3, [r4, #32]
 8007752:	b11b      	cbz	r3, 800775c <__sinit+0x14>
 8007754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007758:	f7ff bff0 	b.w	800773c <__sfp_lock_release>
 800775c:	4b04      	ldr	r3, [pc, #16]	@ (8007770 <__sinit+0x28>)
 800775e:	6223      	str	r3, [r4, #32]
 8007760:	4b04      	ldr	r3, [pc, #16]	@ (8007774 <__sinit+0x2c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1f5      	bne.n	8007754 <__sinit+0xc>
 8007768:	f7ff ffc4 	bl	80076f4 <global_stdio_init.part.0>
 800776c:	e7f2      	b.n	8007754 <__sinit+0xc>
 800776e:	bf00      	nop
 8007770:	080076b5 	.word	0x080076b5
 8007774:	20000a08 	.word	0x20000a08

08007778 <_fwalk_sglue>:
 8007778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800777c:	4607      	mov	r7, r0
 800777e:	4688      	mov	r8, r1
 8007780:	4614      	mov	r4, r2
 8007782:	2600      	movs	r6, #0
 8007784:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007788:	f1b9 0901 	subs.w	r9, r9, #1
 800778c:	d505      	bpl.n	800779a <_fwalk_sglue+0x22>
 800778e:	6824      	ldr	r4, [r4, #0]
 8007790:	2c00      	cmp	r4, #0
 8007792:	d1f7      	bne.n	8007784 <_fwalk_sglue+0xc>
 8007794:	4630      	mov	r0, r6
 8007796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800779a:	89ab      	ldrh	r3, [r5, #12]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d907      	bls.n	80077b0 <_fwalk_sglue+0x38>
 80077a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077a4:	3301      	adds	r3, #1
 80077a6:	d003      	beq.n	80077b0 <_fwalk_sglue+0x38>
 80077a8:	4629      	mov	r1, r5
 80077aa:	4638      	mov	r0, r7
 80077ac:	47c0      	blx	r8
 80077ae:	4306      	orrs	r6, r0
 80077b0:	3568      	adds	r5, #104	@ 0x68
 80077b2:	e7e9      	b.n	8007788 <_fwalk_sglue+0x10>

080077b4 <sniprintf>:
 80077b4:	b40c      	push	{r2, r3}
 80077b6:	b530      	push	{r4, r5, lr}
 80077b8:	4b18      	ldr	r3, [pc, #96]	@ (800781c <sniprintf+0x68>)
 80077ba:	1e0c      	subs	r4, r1, #0
 80077bc:	681d      	ldr	r5, [r3, #0]
 80077be:	b09d      	sub	sp, #116	@ 0x74
 80077c0:	da08      	bge.n	80077d4 <sniprintf+0x20>
 80077c2:	238b      	movs	r3, #139	@ 0x8b
 80077c4:	602b      	str	r3, [r5, #0]
 80077c6:	f04f 30ff 	mov.w	r0, #4294967295
 80077ca:	b01d      	add	sp, #116	@ 0x74
 80077cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077d0:	b002      	add	sp, #8
 80077d2:	4770      	bx	lr
 80077d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80077d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80077dc:	f04f 0300 	mov.w	r3, #0
 80077e0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80077e2:	bf14      	ite	ne
 80077e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80077e8:	4623      	moveq	r3, r4
 80077ea:	9304      	str	r3, [sp, #16]
 80077ec:	9307      	str	r3, [sp, #28]
 80077ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80077f2:	9002      	str	r0, [sp, #8]
 80077f4:	9006      	str	r0, [sp, #24]
 80077f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80077fa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80077fc:	ab21      	add	r3, sp, #132	@ 0x84
 80077fe:	a902      	add	r1, sp, #8
 8007800:	4628      	mov	r0, r5
 8007802:	9301      	str	r3, [sp, #4]
 8007804:	f001 fc26 	bl	8009054 <_svfiprintf_r>
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	bfbc      	itt	lt
 800780c:	238b      	movlt	r3, #139	@ 0x8b
 800780e:	602b      	strlt	r3, [r5, #0]
 8007810:	2c00      	cmp	r4, #0
 8007812:	d0da      	beq.n	80077ca <sniprintf+0x16>
 8007814:	9b02      	ldr	r3, [sp, #8]
 8007816:	2200      	movs	r2, #0
 8007818:	701a      	strb	r2, [r3, #0]
 800781a:	e7d6      	b.n	80077ca <sniprintf+0x16>
 800781c:	2000002c 	.word	0x2000002c

08007820 <__sread>:
 8007820:	b510      	push	{r4, lr}
 8007822:	460c      	mov	r4, r1
 8007824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007828:	f000 f886 	bl	8007938 <_read_r>
 800782c:	2800      	cmp	r0, #0
 800782e:	bfab      	itete	ge
 8007830:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007832:	89a3      	ldrhlt	r3, [r4, #12]
 8007834:	181b      	addge	r3, r3, r0
 8007836:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800783a:	bfac      	ite	ge
 800783c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800783e:	81a3      	strhlt	r3, [r4, #12]
 8007840:	bd10      	pop	{r4, pc}

08007842 <__swrite>:
 8007842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007846:	461f      	mov	r7, r3
 8007848:	898b      	ldrh	r3, [r1, #12]
 800784a:	05db      	lsls	r3, r3, #23
 800784c:	4605      	mov	r5, r0
 800784e:	460c      	mov	r4, r1
 8007850:	4616      	mov	r6, r2
 8007852:	d505      	bpl.n	8007860 <__swrite+0x1e>
 8007854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007858:	2302      	movs	r3, #2
 800785a:	2200      	movs	r2, #0
 800785c:	f000 f85a 	bl	8007914 <_lseek_r>
 8007860:	89a3      	ldrh	r3, [r4, #12]
 8007862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007866:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800786a:	81a3      	strh	r3, [r4, #12]
 800786c:	4632      	mov	r2, r6
 800786e:	463b      	mov	r3, r7
 8007870:	4628      	mov	r0, r5
 8007872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007876:	f000 b871 	b.w	800795c <_write_r>

0800787a <__sseek>:
 800787a:	b510      	push	{r4, lr}
 800787c:	460c      	mov	r4, r1
 800787e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007882:	f000 f847 	bl	8007914 <_lseek_r>
 8007886:	1c43      	adds	r3, r0, #1
 8007888:	89a3      	ldrh	r3, [r4, #12]
 800788a:	bf15      	itete	ne
 800788c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800788e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007892:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007896:	81a3      	strheq	r3, [r4, #12]
 8007898:	bf18      	it	ne
 800789a:	81a3      	strhne	r3, [r4, #12]
 800789c:	bd10      	pop	{r4, pc}

0800789e <__sclose>:
 800789e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a2:	f000 b827 	b.w	80078f4 <_close_r>

080078a6 <memmove>:
 80078a6:	4288      	cmp	r0, r1
 80078a8:	b510      	push	{r4, lr}
 80078aa:	eb01 0402 	add.w	r4, r1, r2
 80078ae:	d902      	bls.n	80078b6 <memmove+0x10>
 80078b0:	4284      	cmp	r4, r0
 80078b2:	4623      	mov	r3, r4
 80078b4:	d807      	bhi.n	80078c6 <memmove+0x20>
 80078b6:	1e43      	subs	r3, r0, #1
 80078b8:	42a1      	cmp	r1, r4
 80078ba:	d008      	beq.n	80078ce <memmove+0x28>
 80078bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078c4:	e7f8      	b.n	80078b8 <memmove+0x12>
 80078c6:	4402      	add	r2, r0
 80078c8:	4601      	mov	r1, r0
 80078ca:	428a      	cmp	r2, r1
 80078cc:	d100      	bne.n	80078d0 <memmove+0x2a>
 80078ce:	bd10      	pop	{r4, pc}
 80078d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078d8:	e7f7      	b.n	80078ca <memmove+0x24>

080078da <memset>:
 80078da:	4402      	add	r2, r0
 80078dc:	4603      	mov	r3, r0
 80078de:	4293      	cmp	r3, r2
 80078e0:	d100      	bne.n	80078e4 <memset+0xa>
 80078e2:	4770      	bx	lr
 80078e4:	f803 1b01 	strb.w	r1, [r3], #1
 80078e8:	e7f9      	b.n	80078de <memset+0x4>
	...

080078ec <_localeconv_r>:
 80078ec:	4800      	ldr	r0, [pc, #0]	@ (80078f0 <_localeconv_r+0x4>)
 80078ee:	4770      	bx	lr
 80078f0:	2000016c 	.word	0x2000016c

080078f4 <_close_r>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	4d06      	ldr	r5, [pc, #24]	@ (8007910 <_close_r+0x1c>)
 80078f8:	2300      	movs	r3, #0
 80078fa:	4604      	mov	r4, r0
 80078fc:	4608      	mov	r0, r1
 80078fe:	602b      	str	r3, [r5, #0]
 8007900:	f7fa f97c 	bl	8001bfc <_close>
 8007904:	1c43      	adds	r3, r0, #1
 8007906:	d102      	bne.n	800790e <_close_r+0x1a>
 8007908:	682b      	ldr	r3, [r5, #0]
 800790a:	b103      	cbz	r3, 800790e <_close_r+0x1a>
 800790c:	6023      	str	r3, [r4, #0]
 800790e:	bd38      	pop	{r3, r4, r5, pc}
 8007910:	20000a0c 	.word	0x20000a0c

08007914 <_lseek_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4d07      	ldr	r5, [pc, #28]	@ (8007934 <_lseek_r+0x20>)
 8007918:	4604      	mov	r4, r0
 800791a:	4608      	mov	r0, r1
 800791c:	4611      	mov	r1, r2
 800791e:	2200      	movs	r2, #0
 8007920:	602a      	str	r2, [r5, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	f7fa f991 	bl	8001c4a <_lseek>
 8007928:	1c43      	adds	r3, r0, #1
 800792a:	d102      	bne.n	8007932 <_lseek_r+0x1e>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	b103      	cbz	r3, 8007932 <_lseek_r+0x1e>
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	bd38      	pop	{r3, r4, r5, pc}
 8007934:	20000a0c 	.word	0x20000a0c

08007938 <_read_r>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	4d07      	ldr	r5, [pc, #28]	@ (8007958 <_read_r+0x20>)
 800793c:	4604      	mov	r4, r0
 800793e:	4608      	mov	r0, r1
 8007940:	4611      	mov	r1, r2
 8007942:	2200      	movs	r2, #0
 8007944:	602a      	str	r2, [r5, #0]
 8007946:	461a      	mov	r2, r3
 8007948:	f7fa f91f 	bl	8001b8a <_read>
 800794c:	1c43      	adds	r3, r0, #1
 800794e:	d102      	bne.n	8007956 <_read_r+0x1e>
 8007950:	682b      	ldr	r3, [r5, #0]
 8007952:	b103      	cbz	r3, 8007956 <_read_r+0x1e>
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	bd38      	pop	{r3, r4, r5, pc}
 8007958:	20000a0c 	.word	0x20000a0c

0800795c <_write_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4d07      	ldr	r5, [pc, #28]	@ (800797c <_write_r+0x20>)
 8007960:	4604      	mov	r4, r0
 8007962:	4608      	mov	r0, r1
 8007964:	4611      	mov	r1, r2
 8007966:	2200      	movs	r2, #0
 8007968:	602a      	str	r2, [r5, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	f7fa f92a 	bl	8001bc4 <_write>
 8007970:	1c43      	adds	r3, r0, #1
 8007972:	d102      	bne.n	800797a <_write_r+0x1e>
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	b103      	cbz	r3, 800797a <_write_r+0x1e>
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	bd38      	pop	{r3, r4, r5, pc}
 800797c:	20000a0c 	.word	0x20000a0c

08007980 <__errno>:
 8007980:	4b01      	ldr	r3, [pc, #4]	@ (8007988 <__errno+0x8>)
 8007982:	6818      	ldr	r0, [r3, #0]
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	2000002c 	.word	0x2000002c

0800798c <__libc_init_array>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	4d0d      	ldr	r5, [pc, #52]	@ (80079c4 <__libc_init_array+0x38>)
 8007990:	4c0d      	ldr	r4, [pc, #52]	@ (80079c8 <__libc_init_array+0x3c>)
 8007992:	1b64      	subs	r4, r4, r5
 8007994:	10a4      	asrs	r4, r4, #2
 8007996:	2600      	movs	r6, #0
 8007998:	42a6      	cmp	r6, r4
 800799a:	d109      	bne.n	80079b0 <__libc_init_array+0x24>
 800799c:	4d0b      	ldr	r5, [pc, #44]	@ (80079cc <__libc_init_array+0x40>)
 800799e:	4c0c      	ldr	r4, [pc, #48]	@ (80079d0 <__libc_init_array+0x44>)
 80079a0:	f002 f84e 	bl	8009a40 <_init>
 80079a4:	1b64      	subs	r4, r4, r5
 80079a6:	10a4      	asrs	r4, r4, #2
 80079a8:	2600      	movs	r6, #0
 80079aa:	42a6      	cmp	r6, r4
 80079ac:	d105      	bne.n	80079ba <__libc_init_array+0x2e>
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b4:	4798      	blx	r3
 80079b6:	3601      	adds	r6, #1
 80079b8:	e7ee      	b.n	8007998 <__libc_init_array+0xc>
 80079ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80079be:	4798      	blx	r3
 80079c0:	3601      	adds	r6, #1
 80079c2:	e7f2      	b.n	80079aa <__libc_init_array+0x1e>
 80079c4:	0800b954 	.word	0x0800b954
 80079c8:	0800b954 	.word	0x0800b954
 80079cc:	0800b954 	.word	0x0800b954
 80079d0:	0800b958 	.word	0x0800b958

080079d4 <__retarget_lock_init_recursive>:
 80079d4:	4770      	bx	lr

080079d6 <__retarget_lock_acquire_recursive>:
 80079d6:	4770      	bx	lr

080079d8 <__retarget_lock_release_recursive>:
 80079d8:	4770      	bx	lr

080079da <memcpy>:
 80079da:	440a      	add	r2, r1
 80079dc:	4291      	cmp	r1, r2
 80079de:	f100 33ff 	add.w	r3, r0, #4294967295
 80079e2:	d100      	bne.n	80079e6 <memcpy+0xc>
 80079e4:	4770      	bx	lr
 80079e6:	b510      	push	{r4, lr}
 80079e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079f0:	4291      	cmp	r1, r2
 80079f2:	d1f9      	bne.n	80079e8 <memcpy+0xe>
 80079f4:	bd10      	pop	{r4, pc}

080079f6 <quorem>:
 80079f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fa:	6903      	ldr	r3, [r0, #16]
 80079fc:	690c      	ldr	r4, [r1, #16]
 80079fe:	42a3      	cmp	r3, r4
 8007a00:	4607      	mov	r7, r0
 8007a02:	db7e      	blt.n	8007b02 <quorem+0x10c>
 8007a04:	3c01      	subs	r4, #1
 8007a06:	f101 0814 	add.w	r8, r1, #20
 8007a0a:	00a3      	lsls	r3, r4, #2
 8007a0c:	f100 0514 	add.w	r5, r0, #20
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a16:	9301      	str	r3, [sp, #4]
 8007a18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a20:	3301      	adds	r3, #1
 8007a22:	429a      	cmp	r2, r3
 8007a24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a28:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a2c:	d32e      	bcc.n	8007a8c <quorem+0x96>
 8007a2e:	f04f 0a00 	mov.w	sl, #0
 8007a32:	46c4      	mov	ip, r8
 8007a34:	46ae      	mov	lr, r5
 8007a36:	46d3      	mov	fp, sl
 8007a38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a3c:	b298      	uxth	r0, r3
 8007a3e:	fb06 a000 	mla	r0, r6, r0, sl
 8007a42:	0c02      	lsrs	r2, r0, #16
 8007a44:	0c1b      	lsrs	r3, r3, #16
 8007a46:	fb06 2303 	mla	r3, r6, r3, r2
 8007a4a:	f8de 2000 	ldr.w	r2, [lr]
 8007a4e:	b280      	uxth	r0, r0
 8007a50:	b292      	uxth	r2, r2
 8007a52:	1a12      	subs	r2, r2, r0
 8007a54:	445a      	add	r2, fp
 8007a56:	f8de 0000 	ldr.w	r0, [lr]
 8007a5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007a64:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007a68:	b292      	uxth	r2, r2
 8007a6a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a6e:	45e1      	cmp	r9, ip
 8007a70:	f84e 2b04 	str.w	r2, [lr], #4
 8007a74:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a78:	d2de      	bcs.n	8007a38 <quorem+0x42>
 8007a7a:	9b00      	ldr	r3, [sp, #0]
 8007a7c:	58eb      	ldr	r3, [r5, r3]
 8007a7e:	b92b      	cbnz	r3, 8007a8c <quorem+0x96>
 8007a80:	9b01      	ldr	r3, [sp, #4]
 8007a82:	3b04      	subs	r3, #4
 8007a84:	429d      	cmp	r5, r3
 8007a86:	461a      	mov	r2, r3
 8007a88:	d32f      	bcc.n	8007aea <quorem+0xf4>
 8007a8a:	613c      	str	r4, [r7, #16]
 8007a8c:	4638      	mov	r0, r7
 8007a8e:	f001 f97d 	bl	8008d8c <__mcmp>
 8007a92:	2800      	cmp	r0, #0
 8007a94:	db25      	blt.n	8007ae2 <quorem+0xec>
 8007a96:	4629      	mov	r1, r5
 8007a98:	2000      	movs	r0, #0
 8007a9a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a9e:	f8d1 c000 	ldr.w	ip, [r1]
 8007aa2:	fa1f fe82 	uxth.w	lr, r2
 8007aa6:	fa1f f38c 	uxth.w	r3, ip
 8007aaa:	eba3 030e 	sub.w	r3, r3, lr
 8007aae:	4403      	add	r3, r0
 8007ab0:	0c12      	lsrs	r2, r2, #16
 8007ab2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007ab6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ac0:	45c1      	cmp	r9, r8
 8007ac2:	f841 3b04 	str.w	r3, [r1], #4
 8007ac6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007aca:	d2e6      	bcs.n	8007a9a <quorem+0xa4>
 8007acc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ad0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ad4:	b922      	cbnz	r2, 8007ae0 <quorem+0xea>
 8007ad6:	3b04      	subs	r3, #4
 8007ad8:	429d      	cmp	r5, r3
 8007ada:	461a      	mov	r2, r3
 8007adc:	d30b      	bcc.n	8007af6 <quorem+0x100>
 8007ade:	613c      	str	r4, [r7, #16]
 8007ae0:	3601      	adds	r6, #1
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	b003      	add	sp, #12
 8007ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aea:	6812      	ldr	r2, [r2, #0]
 8007aec:	3b04      	subs	r3, #4
 8007aee:	2a00      	cmp	r2, #0
 8007af0:	d1cb      	bne.n	8007a8a <quorem+0x94>
 8007af2:	3c01      	subs	r4, #1
 8007af4:	e7c6      	b.n	8007a84 <quorem+0x8e>
 8007af6:	6812      	ldr	r2, [r2, #0]
 8007af8:	3b04      	subs	r3, #4
 8007afa:	2a00      	cmp	r2, #0
 8007afc:	d1ef      	bne.n	8007ade <quorem+0xe8>
 8007afe:	3c01      	subs	r4, #1
 8007b00:	e7ea      	b.n	8007ad8 <quorem+0xe2>
 8007b02:	2000      	movs	r0, #0
 8007b04:	e7ee      	b.n	8007ae4 <quorem+0xee>
	...

08007b08 <_dtoa_r>:
 8007b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b0c:	69c7      	ldr	r7, [r0, #28]
 8007b0e:	b097      	sub	sp, #92	@ 0x5c
 8007b10:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007b14:	ec55 4b10 	vmov	r4, r5, d0
 8007b18:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007b1a:	9107      	str	r1, [sp, #28]
 8007b1c:	4681      	mov	r9, r0
 8007b1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007b20:	9311      	str	r3, [sp, #68]	@ 0x44
 8007b22:	b97f      	cbnz	r7, 8007b44 <_dtoa_r+0x3c>
 8007b24:	2010      	movs	r0, #16
 8007b26:	f000 fe09 	bl	800873c <malloc>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007b30:	b920      	cbnz	r0, 8007b3c <_dtoa_r+0x34>
 8007b32:	4ba9      	ldr	r3, [pc, #676]	@ (8007dd8 <_dtoa_r+0x2d0>)
 8007b34:	21ef      	movs	r1, #239	@ 0xef
 8007b36:	48a9      	ldr	r0, [pc, #676]	@ (8007ddc <_dtoa_r+0x2d4>)
 8007b38:	f001 fc44 	bl	80093c4 <__assert_func>
 8007b3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b40:	6007      	str	r7, [r0, #0]
 8007b42:	60c7      	str	r7, [r0, #12]
 8007b44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007b48:	6819      	ldr	r1, [r3, #0]
 8007b4a:	b159      	cbz	r1, 8007b64 <_dtoa_r+0x5c>
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	604a      	str	r2, [r1, #4]
 8007b50:	2301      	movs	r3, #1
 8007b52:	4093      	lsls	r3, r2
 8007b54:	608b      	str	r3, [r1, #8]
 8007b56:	4648      	mov	r0, r9
 8007b58:	f000 fee6 	bl	8008928 <_Bfree>
 8007b5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007b60:	2200      	movs	r2, #0
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	1e2b      	subs	r3, r5, #0
 8007b66:	bfb9      	ittee	lt
 8007b68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007b6c:	9305      	strlt	r3, [sp, #20]
 8007b6e:	2300      	movge	r3, #0
 8007b70:	6033      	strge	r3, [r6, #0]
 8007b72:	9f05      	ldr	r7, [sp, #20]
 8007b74:	4b9a      	ldr	r3, [pc, #616]	@ (8007de0 <_dtoa_r+0x2d8>)
 8007b76:	bfbc      	itt	lt
 8007b78:	2201      	movlt	r2, #1
 8007b7a:	6032      	strlt	r2, [r6, #0]
 8007b7c:	43bb      	bics	r3, r7
 8007b7e:	d112      	bne.n	8007ba6 <_dtoa_r+0x9e>
 8007b80:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007b82:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b8c:	4323      	orrs	r3, r4
 8007b8e:	f000 855a 	beq.w	8008646 <_dtoa_r+0xb3e>
 8007b92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b94:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007df4 <_dtoa_r+0x2ec>
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 855c 	beq.w	8008656 <_dtoa_r+0xb4e>
 8007b9e:	f10a 0303 	add.w	r3, sl, #3
 8007ba2:	f000 bd56 	b.w	8008652 <_dtoa_r+0xb4a>
 8007ba6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007baa:	2200      	movs	r2, #0
 8007bac:	ec51 0b17 	vmov	r0, r1, d7
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007bb6:	f7f8 ffaf 	bl	8000b18 <__aeabi_dcmpeq>
 8007bba:	4680      	mov	r8, r0
 8007bbc:	b158      	cbz	r0, 8007bd6 <_dtoa_r+0xce>
 8007bbe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	6013      	str	r3, [r2, #0]
 8007bc4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007bc6:	b113      	cbz	r3, 8007bce <_dtoa_r+0xc6>
 8007bc8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007bca:	4b86      	ldr	r3, [pc, #536]	@ (8007de4 <_dtoa_r+0x2dc>)
 8007bcc:	6013      	str	r3, [r2, #0]
 8007bce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007df8 <_dtoa_r+0x2f0>
 8007bd2:	f000 bd40 	b.w	8008656 <_dtoa_r+0xb4e>
 8007bd6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007bda:	aa14      	add	r2, sp, #80	@ 0x50
 8007bdc:	a915      	add	r1, sp, #84	@ 0x54
 8007bde:	4648      	mov	r0, r9
 8007be0:	f001 f984 	bl	8008eec <__d2b>
 8007be4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007be8:	9002      	str	r0, [sp, #8]
 8007bea:	2e00      	cmp	r6, #0
 8007bec:	d078      	beq.n	8007ce0 <_dtoa_r+0x1d8>
 8007bee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bf0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007bfc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007c00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007c04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007c08:	4619      	mov	r1, r3
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	4b76      	ldr	r3, [pc, #472]	@ (8007de8 <_dtoa_r+0x2e0>)
 8007c0e:	f7f8 fb63 	bl	80002d8 <__aeabi_dsub>
 8007c12:	a36b      	add	r3, pc, #428	@ (adr r3, 8007dc0 <_dtoa_r+0x2b8>)
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f7f8 fd16 	bl	8000648 <__aeabi_dmul>
 8007c1c:	a36a      	add	r3, pc, #424	@ (adr r3, 8007dc8 <_dtoa_r+0x2c0>)
 8007c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c22:	f7f8 fb5b 	bl	80002dc <__adddf3>
 8007c26:	4604      	mov	r4, r0
 8007c28:	4630      	mov	r0, r6
 8007c2a:	460d      	mov	r5, r1
 8007c2c:	f7f8 fca2 	bl	8000574 <__aeabi_i2d>
 8007c30:	a367      	add	r3, pc, #412	@ (adr r3, 8007dd0 <_dtoa_r+0x2c8>)
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	f7f8 fd07 	bl	8000648 <__aeabi_dmul>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	4620      	mov	r0, r4
 8007c40:	4629      	mov	r1, r5
 8007c42:	f7f8 fb4b 	bl	80002dc <__adddf3>
 8007c46:	4604      	mov	r4, r0
 8007c48:	460d      	mov	r5, r1
 8007c4a:	f7f8 ffad 	bl	8000ba8 <__aeabi_d2iz>
 8007c4e:	2200      	movs	r2, #0
 8007c50:	4607      	mov	r7, r0
 8007c52:	2300      	movs	r3, #0
 8007c54:	4620      	mov	r0, r4
 8007c56:	4629      	mov	r1, r5
 8007c58:	f7f8 ff68 	bl	8000b2c <__aeabi_dcmplt>
 8007c5c:	b140      	cbz	r0, 8007c70 <_dtoa_r+0x168>
 8007c5e:	4638      	mov	r0, r7
 8007c60:	f7f8 fc88 	bl	8000574 <__aeabi_i2d>
 8007c64:	4622      	mov	r2, r4
 8007c66:	462b      	mov	r3, r5
 8007c68:	f7f8 ff56 	bl	8000b18 <__aeabi_dcmpeq>
 8007c6c:	b900      	cbnz	r0, 8007c70 <_dtoa_r+0x168>
 8007c6e:	3f01      	subs	r7, #1
 8007c70:	2f16      	cmp	r7, #22
 8007c72:	d852      	bhi.n	8007d1a <_dtoa_r+0x212>
 8007c74:	4b5d      	ldr	r3, [pc, #372]	@ (8007dec <_dtoa_r+0x2e4>)
 8007c76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007c82:	f7f8 ff53 	bl	8000b2c <__aeabi_dcmplt>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d049      	beq.n	8007d1e <_dtoa_r+0x216>
 8007c8a:	3f01      	subs	r7, #1
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c90:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c92:	1b9b      	subs	r3, r3, r6
 8007c94:	1e5a      	subs	r2, r3, #1
 8007c96:	bf45      	ittet	mi
 8007c98:	f1c3 0301 	rsbmi	r3, r3, #1
 8007c9c:	9300      	strmi	r3, [sp, #0]
 8007c9e:	2300      	movpl	r3, #0
 8007ca0:	2300      	movmi	r3, #0
 8007ca2:	9206      	str	r2, [sp, #24]
 8007ca4:	bf54      	ite	pl
 8007ca6:	9300      	strpl	r3, [sp, #0]
 8007ca8:	9306      	strmi	r3, [sp, #24]
 8007caa:	2f00      	cmp	r7, #0
 8007cac:	db39      	blt.n	8007d22 <_dtoa_r+0x21a>
 8007cae:	9b06      	ldr	r3, [sp, #24]
 8007cb0:	970d      	str	r7, [sp, #52]	@ 0x34
 8007cb2:	443b      	add	r3, r7
 8007cb4:	9306      	str	r3, [sp, #24]
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	9308      	str	r3, [sp, #32]
 8007cba:	9b07      	ldr	r3, [sp, #28]
 8007cbc:	2b09      	cmp	r3, #9
 8007cbe:	d863      	bhi.n	8007d88 <_dtoa_r+0x280>
 8007cc0:	2b05      	cmp	r3, #5
 8007cc2:	bfc4      	itt	gt
 8007cc4:	3b04      	subgt	r3, #4
 8007cc6:	9307      	strgt	r3, [sp, #28]
 8007cc8:	9b07      	ldr	r3, [sp, #28]
 8007cca:	f1a3 0302 	sub.w	r3, r3, #2
 8007cce:	bfcc      	ite	gt
 8007cd0:	2400      	movgt	r4, #0
 8007cd2:	2401      	movle	r4, #1
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	d863      	bhi.n	8007da0 <_dtoa_r+0x298>
 8007cd8:	e8df f003 	tbb	[pc, r3]
 8007cdc:	2b375452 	.word	0x2b375452
 8007ce0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007ce4:	441e      	add	r6, r3
 8007ce6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007cea:	2b20      	cmp	r3, #32
 8007cec:	bfc1      	itttt	gt
 8007cee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007cf2:	409f      	lslgt	r7, r3
 8007cf4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007cf8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007cfc:	bfd6      	itet	le
 8007cfe:	f1c3 0320 	rsble	r3, r3, #32
 8007d02:	ea47 0003 	orrgt.w	r0, r7, r3
 8007d06:	fa04 f003 	lslle.w	r0, r4, r3
 8007d0a:	f7f8 fc23 	bl	8000554 <__aeabi_ui2d>
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007d14:	3e01      	subs	r6, #1
 8007d16:	9212      	str	r2, [sp, #72]	@ 0x48
 8007d18:	e776      	b.n	8007c08 <_dtoa_r+0x100>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e7b7      	b.n	8007c8e <_dtoa_r+0x186>
 8007d1e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007d20:	e7b6      	b.n	8007c90 <_dtoa_r+0x188>
 8007d22:	9b00      	ldr	r3, [sp, #0]
 8007d24:	1bdb      	subs	r3, r3, r7
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	427b      	negs	r3, r7
 8007d2a:	9308      	str	r3, [sp, #32]
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007d30:	e7c3      	b.n	8007cba <_dtoa_r+0x1b2>
 8007d32:	2301      	movs	r3, #1
 8007d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d38:	eb07 0b03 	add.w	fp, r7, r3
 8007d3c:	f10b 0301 	add.w	r3, fp, #1
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	9303      	str	r3, [sp, #12]
 8007d44:	bfb8      	it	lt
 8007d46:	2301      	movlt	r3, #1
 8007d48:	e006      	b.n	8007d58 <_dtoa_r+0x250>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	dd28      	ble.n	8007da6 <_dtoa_r+0x29e>
 8007d54:	469b      	mov	fp, r3
 8007d56:	9303      	str	r3, [sp, #12]
 8007d58:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	2204      	movs	r2, #4
 8007d60:	f102 0514 	add.w	r5, r2, #20
 8007d64:	429d      	cmp	r5, r3
 8007d66:	d926      	bls.n	8007db6 <_dtoa_r+0x2ae>
 8007d68:	6041      	str	r1, [r0, #4]
 8007d6a:	4648      	mov	r0, r9
 8007d6c:	f000 fd9c 	bl	80088a8 <_Balloc>
 8007d70:	4682      	mov	sl, r0
 8007d72:	2800      	cmp	r0, #0
 8007d74:	d142      	bne.n	8007dfc <_dtoa_r+0x2f4>
 8007d76:	4b1e      	ldr	r3, [pc, #120]	@ (8007df0 <_dtoa_r+0x2e8>)
 8007d78:	4602      	mov	r2, r0
 8007d7a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d7e:	e6da      	b.n	8007b36 <_dtoa_r+0x2e>
 8007d80:	2300      	movs	r3, #0
 8007d82:	e7e3      	b.n	8007d4c <_dtoa_r+0x244>
 8007d84:	2300      	movs	r3, #0
 8007d86:	e7d5      	b.n	8007d34 <_dtoa_r+0x22c>
 8007d88:	2401      	movs	r4, #1
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	9307      	str	r3, [sp, #28]
 8007d8e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007d90:	f04f 3bff 	mov.w	fp, #4294967295
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8cd b00c 	str.w	fp, [sp, #12]
 8007d9a:	2312      	movs	r3, #18
 8007d9c:	920c      	str	r2, [sp, #48]	@ 0x30
 8007d9e:	e7db      	b.n	8007d58 <_dtoa_r+0x250>
 8007da0:	2301      	movs	r3, #1
 8007da2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007da4:	e7f4      	b.n	8007d90 <_dtoa_r+0x288>
 8007da6:	f04f 0b01 	mov.w	fp, #1
 8007daa:	f8cd b00c 	str.w	fp, [sp, #12]
 8007dae:	465b      	mov	r3, fp
 8007db0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007db4:	e7d0      	b.n	8007d58 <_dtoa_r+0x250>
 8007db6:	3101      	adds	r1, #1
 8007db8:	0052      	lsls	r2, r2, #1
 8007dba:	e7d1      	b.n	8007d60 <_dtoa_r+0x258>
 8007dbc:	f3af 8000 	nop.w
 8007dc0:	636f4361 	.word	0x636f4361
 8007dc4:	3fd287a7 	.word	0x3fd287a7
 8007dc8:	8b60c8b3 	.word	0x8b60c8b3
 8007dcc:	3fc68a28 	.word	0x3fc68a28
 8007dd0:	509f79fb 	.word	0x509f79fb
 8007dd4:	3fd34413 	.word	0x3fd34413
 8007dd8:	0800b615 	.word	0x0800b615
 8007ddc:	0800b62c 	.word	0x0800b62c
 8007de0:	7ff00000 	.word	0x7ff00000
 8007de4:	0800b5e5 	.word	0x0800b5e5
 8007de8:	3ff80000 	.word	0x3ff80000
 8007dec:	0800b780 	.word	0x0800b780
 8007df0:	0800b684 	.word	0x0800b684
 8007df4:	0800b611 	.word	0x0800b611
 8007df8:	0800b5e4 	.word	0x0800b5e4
 8007dfc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e00:	6018      	str	r0, [r3, #0]
 8007e02:	9b03      	ldr	r3, [sp, #12]
 8007e04:	2b0e      	cmp	r3, #14
 8007e06:	f200 80a1 	bhi.w	8007f4c <_dtoa_r+0x444>
 8007e0a:	2c00      	cmp	r4, #0
 8007e0c:	f000 809e 	beq.w	8007f4c <_dtoa_r+0x444>
 8007e10:	2f00      	cmp	r7, #0
 8007e12:	dd33      	ble.n	8007e7c <_dtoa_r+0x374>
 8007e14:	4b9c      	ldr	r3, [pc, #624]	@ (8008088 <_dtoa_r+0x580>)
 8007e16:	f007 020f 	and.w	r2, r7, #15
 8007e1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e1e:	ed93 7b00 	vldr	d7, [r3]
 8007e22:	05f8      	lsls	r0, r7, #23
 8007e24:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007e28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007e2c:	d516      	bpl.n	8007e5c <_dtoa_r+0x354>
 8007e2e:	4b97      	ldr	r3, [pc, #604]	@ (800808c <_dtoa_r+0x584>)
 8007e30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007e34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e38:	f7f8 fd30 	bl	800089c <__aeabi_ddiv>
 8007e3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e40:	f004 040f 	and.w	r4, r4, #15
 8007e44:	2603      	movs	r6, #3
 8007e46:	4d91      	ldr	r5, [pc, #580]	@ (800808c <_dtoa_r+0x584>)
 8007e48:	b954      	cbnz	r4, 8007e60 <_dtoa_r+0x358>
 8007e4a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007e4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e52:	f7f8 fd23 	bl	800089c <__aeabi_ddiv>
 8007e56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e5a:	e028      	b.n	8007eae <_dtoa_r+0x3a6>
 8007e5c:	2602      	movs	r6, #2
 8007e5e:	e7f2      	b.n	8007e46 <_dtoa_r+0x33e>
 8007e60:	07e1      	lsls	r1, r4, #31
 8007e62:	d508      	bpl.n	8007e76 <_dtoa_r+0x36e>
 8007e64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007e68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e6c:	f7f8 fbec 	bl	8000648 <__aeabi_dmul>
 8007e70:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007e74:	3601      	adds	r6, #1
 8007e76:	1064      	asrs	r4, r4, #1
 8007e78:	3508      	adds	r5, #8
 8007e7a:	e7e5      	b.n	8007e48 <_dtoa_r+0x340>
 8007e7c:	f000 80af 	beq.w	8007fde <_dtoa_r+0x4d6>
 8007e80:	427c      	negs	r4, r7
 8007e82:	4b81      	ldr	r3, [pc, #516]	@ (8008088 <_dtoa_r+0x580>)
 8007e84:	4d81      	ldr	r5, [pc, #516]	@ (800808c <_dtoa_r+0x584>)
 8007e86:	f004 020f 	and.w	r2, r4, #15
 8007e8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007e96:	f7f8 fbd7 	bl	8000648 <__aeabi_dmul>
 8007e9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e9e:	1124      	asrs	r4, r4, #4
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	2602      	movs	r6, #2
 8007ea4:	2c00      	cmp	r4, #0
 8007ea6:	f040 808f 	bne.w	8007fc8 <_dtoa_r+0x4c0>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1d3      	bne.n	8007e56 <_dtoa_r+0x34e>
 8007eae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007eb0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 8094 	beq.w	8007fe2 <_dtoa_r+0x4da>
 8007eba:	4b75      	ldr	r3, [pc, #468]	@ (8008090 <_dtoa_r+0x588>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	f7f8 fe33 	bl	8000b2c <__aeabi_dcmplt>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	f000 808b 	beq.w	8007fe2 <_dtoa_r+0x4da>
 8007ecc:	9b03      	ldr	r3, [sp, #12]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 8087 	beq.w	8007fe2 <_dtoa_r+0x4da>
 8007ed4:	f1bb 0f00 	cmp.w	fp, #0
 8007ed8:	dd34      	ble.n	8007f44 <_dtoa_r+0x43c>
 8007eda:	4620      	mov	r0, r4
 8007edc:	4b6d      	ldr	r3, [pc, #436]	@ (8008094 <_dtoa_r+0x58c>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	f7f8 fbb1 	bl	8000648 <__aeabi_dmul>
 8007ee6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007eea:	f107 38ff 	add.w	r8, r7, #4294967295
 8007eee:	3601      	adds	r6, #1
 8007ef0:	465c      	mov	r4, fp
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f7f8 fb3e 	bl	8000574 <__aeabi_i2d>
 8007ef8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007efc:	f7f8 fba4 	bl	8000648 <__aeabi_dmul>
 8007f00:	4b65      	ldr	r3, [pc, #404]	@ (8008098 <_dtoa_r+0x590>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	f7f8 f9ea 	bl	80002dc <__adddf3>
 8007f08:	4605      	mov	r5, r0
 8007f0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007f0e:	2c00      	cmp	r4, #0
 8007f10:	d16a      	bne.n	8007fe8 <_dtoa_r+0x4e0>
 8007f12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f16:	4b61      	ldr	r3, [pc, #388]	@ (800809c <_dtoa_r+0x594>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f7f8 f9dd 	bl	80002d8 <__aeabi_dsub>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f26:	462a      	mov	r2, r5
 8007f28:	4633      	mov	r3, r6
 8007f2a:	f7f8 fe1d 	bl	8000b68 <__aeabi_dcmpgt>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	f040 8298 	bne.w	8008464 <_dtoa_r+0x95c>
 8007f34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f38:	462a      	mov	r2, r5
 8007f3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007f3e:	f7f8 fdf5 	bl	8000b2c <__aeabi_dcmplt>
 8007f42:	bb38      	cbnz	r0, 8007f94 <_dtoa_r+0x48c>
 8007f44:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007f48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007f4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f2c0 8157 	blt.w	8008202 <_dtoa_r+0x6fa>
 8007f54:	2f0e      	cmp	r7, #14
 8007f56:	f300 8154 	bgt.w	8008202 <_dtoa_r+0x6fa>
 8007f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8008088 <_dtoa_r+0x580>)
 8007f5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f60:	ed93 7b00 	vldr	d7, [r3]
 8007f64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	ed8d 7b00 	vstr	d7, [sp]
 8007f6c:	f280 80e5 	bge.w	800813a <_dtoa_r+0x632>
 8007f70:	9b03      	ldr	r3, [sp, #12]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f300 80e1 	bgt.w	800813a <_dtoa_r+0x632>
 8007f78:	d10c      	bne.n	8007f94 <_dtoa_r+0x48c>
 8007f7a:	4b48      	ldr	r3, [pc, #288]	@ (800809c <_dtoa_r+0x594>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	ec51 0b17 	vmov	r0, r1, d7
 8007f82:	f7f8 fb61 	bl	8000648 <__aeabi_dmul>
 8007f86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f8a:	f7f8 fde3 	bl	8000b54 <__aeabi_dcmpge>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	f000 8266 	beq.w	8008460 <_dtoa_r+0x958>
 8007f94:	2400      	movs	r4, #0
 8007f96:	4625      	mov	r5, r4
 8007f98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f9a:	4656      	mov	r6, sl
 8007f9c:	ea6f 0803 	mvn.w	r8, r3
 8007fa0:	2700      	movs	r7, #0
 8007fa2:	4621      	mov	r1, r4
 8007fa4:	4648      	mov	r0, r9
 8007fa6:	f000 fcbf 	bl	8008928 <_Bfree>
 8007faa:	2d00      	cmp	r5, #0
 8007fac:	f000 80bd 	beq.w	800812a <_dtoa_r+0x622>
 8007fb0:	b12f      	cbz	r7, 8007fbe <_dtoa_r+0x4b6>
 8007fb2:	42af      	cmp	r7, r5
 8007fb4:	d003      	beq.n	8007fbe <_dtoa_r+0x4b6>
 8007fb6:	4639      	mov	r1, r7
 8007fb8:	4648      	mov	r0, r9
 8007fba:	f000 fcb5 	bl	8008928 <_Bfree>
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	4648      	mov	r0, r9
 8007fc2:	f000 fcb1 	bl	8008928 <_Bfree>
 8007fc6:	e0b0      	b.n	800812a <_dtoa_r+0x622>
 8007fc8:	07e2      	lsls	r2, r4, #31
 8007fca:	d505      	bpl.n	8007fd8 <_dtoa_r+0x4d0>
 8007fcc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fd0:	f7f8 fb3a 	bl	8000648 <__aeabi_dmul>
 8007fd4:	3601      	adds	r6, #1
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	1064      	asrs	r4, r4, #1
 8007fda:	3508      	adds	r5, #8
 8007fdc:	e762      	b.n	8007ea4 <_dtoa_r+0x39c>
 8007fde:	2602      	movs	r6, #2
 8007fe0:	e765      	b.n	8007eae <_dtoa_r+0x3a6>
 8007fe2:	9c03      	ldr	r4, [sp, #12]
 8007fe4:	46b8      	mov	r8, r7
 8007fe6:	e784      	b.n	8007ef2 <_dtoa_r+0x3ea>
 8007fe8:	4b27      	ldr	r3, [pc, #156]	@ (8008088 <_dtoa_r+0x580>)
 8007fea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007fec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ff0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ff4:	4454      	add	r4, sl
 8007ff6:	2900      	cmp	r1, #0
 8007ff8:	d054      	beq.n	80080a4 <_dtoa_r+0x59c>
 8007ffa:	4929      	ldr	r1, [pc, #164]	@ (80080a0 <_dtoa_r+0x598>)
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	f7f8 fc4d 	bl	800089c <__aeabi_ddiv>
 8008002:	4633      	mov	r3, r6
 8008004:	462a      	mov	r2, r5
 8008006:	f7f8 f967 	bl	80002d8 <__aeabi_dsub>
 800800a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800800e:	4656      	mov	r6, sl
 8008010:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008014:	f7f8 fdc8 	bl	8000ba8 <__aeabi_d2iz>
 8008018:	4605      	mov	r5, r0
 800801a:	f7f8 faab 	bl	8000574 <__aeabi_i2d>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008026:	f7f8 f957 	bl	80002d8 <__aeabi_dsub>
 800802a:	3530      	adds	r5, #48	@ 0x30
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008034:	f806 5b01 	strb.w	r5, [r6], #1
 8008038:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800803c:	f7f8 fd76 	bl	8000b2c <__aeabi_dcmplt>
 8008040:	2800      	cmp	r0, #0
 8008042:	d172      	bne.n	800812a <_dtoa_r+0x622>
 8008044:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008048:	4911      	ldr	r1, [pc, #68]	@ (8008090 <_dtoa_r+0x588>)
 800804a:	2000      	movs	r0, #0
 800804c:	f7f8 f944 	bl	80002d8 <__aeabi_dsub>
 8008050:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008054:	f7f8 fd6a 	bl	8000b2c <__aeabi_dcmplt>
 8008058:	2800      	cmp	r0, #0
 800805a:	f040 80b4 	bne.w	80081c6 <_dtoa_r+0x6be>
 800805e:	42a6      	cmp	r6, r4
 8008060:	f43f af70 	beq.w	8007f44 <_dtoa_r+0x43c>
 8008064:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008068:	4b0a      	ldr	r3, [pc, #40]	@ (8008094 <_dtoa_r+0x58c>)
 800806a:	2200      	movs	r2, #0
 800806c:	f7f8 faec 	bl	8000648 <__aeabi_dmul>
 8008070:	4b08      	ldr	r3, [pc, #32]	@ (8008094 <_dtoa_r+0x58c>)
 8008072:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008076:	2200      	movs	r2, #0
 8008078:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800807c:	f7f8 fae4 	bl	8000648 <__aeabi_dmul>
 8008080:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008084:	e7c4      	b.n	8008010 <_dtoa_r+0x508>
 8008086:	bf00      	nop
 8008088:	0800b780 	.word	0x0800b780
 800808c:	0800b758 	.word	0x0800b758
 8008090:	3ff00000 	.word	0x3ff00000
 8008094:	40240000 	.word	0x40240000
 8008098:	401c0000 	.word	0x401c0000
 800809c:	40140000 	.word	0x40140000
 80080a0:	3fe00000 	.word	0x3fe00000
 80080a4:	4631      	mov	r1, r6
 80080a6:	4628      	mov	r0, r5
 80080a8:	f7f8 face 	bl	8000648 <__aeabi_dmul>
 80080ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80080b0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80080b2:	4656      	mov	r6, sl
 80080b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080b8:	f7f8 fd76 	bl	8000ba8 <__aeabi_d2iz>
 80080bc:	4605      	mov	r5, r0
 80080be:	f7f8 fa59 	bl	8000574 <__aeabi_i2d>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080ca:	f7f8 f905 	bl	80002d8 <__aeabi_dsub>
 80080ce:	3530      	adds	r5, #48	@ 0x30
 80080d0:	f806 5b01 	strb.w	r5, [r6], #1
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	42a6      	cmp	r6, r4
 80080da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80080de:	f04f 0200 	mov.w	r2, #0
 80080e2:	d124      	bne.n	800812e <_dtoa_r+0x626>
 80080e4:	4baf      	ldr	r3, [pc, #700]	@ (80083a4 <_dtoa_r+0x89c>)
 80080e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80080ea:	f7f8 f8f7 	bl	80002dc <__adddf3>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080f6:	f7f8 fd37 	bl	8000b68 <__aeabi_dcmpgt>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	d163      	bne.n	80081c6 <_dtoa_r+0x6be>
 80080fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008102:	49a8      	ldr	r1, [pc, #672]	@ (80083a4 <_dtoa_r+0x89c>)
 8008104:	2000      	movs	r0, #0
 8008106:	f7f8 f8e7 	bl	80002d8 <__aeabi_dsub>
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008112:	f7f8 fd0b 	bl	8000b2c <__aeabi_dcmplt>
 8008116:	2800      	cmp	r0, #0
 8008118:	f43f af14 	beq.w	8007f44 <_dtoa_r+0x43c>
 800811c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800811e:	1e73      	subs	r3, r6, #1
 8008120:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008122:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008126:	2b30      	cmp	r3, #48	@ 0x30
 8008128:	d0f8      	beq.n	800811c <_dtoa_r+0x614>
 800812a:	4647      	mov	r7, r8
 800812c:	e03b      	b.n	80081a6 <_dtoa_r+0x69e>
 800812e:	4b9e      	ldr	r3, [pc, #632]	@ (80083a8 <_dtoa_r+0x8a0>)
 8008130:	f7f8 fa8a 	bl	8000648 <__aeabi_dmul>
 8008134:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008138:	e7bc      	b.n	80080b4 <_dtoa_r+0x5ac>
 800813a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800813e:	4656      	mov	r6, sl
 8008140:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008144:	4620      	mov	r0, r4
 8008146:	4629      	mov	r1, r5
 8008148:	f7f8 fba8 	bl	800089c <__aeabi_ddiv>
 800814c:	f7f8 fd2c 	bl	8000ba8 <__aeabi_d2iz>
 8008150:	4680      	mov	r8, r0
 8008152:	f7f8 fa0f 	bl	8000574 <__aeabi_i2d>
 8008156:	e9dd 2300 	ldrd	r2, r3, [sp]
 800815a:	f7f8 fa75 	bl	8000648 <__aeabi_dmul>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	4620      	mov	r0, r4
 8008164:	4629      	mov	r1, r5
 8008166:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800816a:	f7f8 f8b5 	bl	80002d8 <__aeabi_dsub>
 800816e:	f806 4b01 	strb.w	r4, [r6], #1
 8008172:	9d03      	ldr	r5, [sp, #12]
 8008174:	eba6 040a 	sub.w	r4, r6, sl
 8008178:	42a5      	cmp	r5, r4
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	d133      	bne.n	80081e8 <_dtoa_r+0x6e0>
 8008180:	f7f8 f8ac 	bl	80002dc <__adddf3>
 8008184:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008188:	4604      	mov	r4, r0
 800818a:	460d      	mov	r5, r1
 800818c:	f7f8 fcec 	bl	8000b68 <__aeabi_dcmpgt>
 8008190:	b9c0      	cbnz	r0, 80081c4 <_dtoa_r+0x6bc>
 8008192:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008196:	4620      	mov	r0, r4
 8008198:	4629      	mov	r1, r5
 800819a:	f7f8 fcbd 	bl	8000b18 <__aeabi_dcmpeq>
 800819e:	b110      	cbz	r0, 80081a6 <_dtoa_r+0x69e>
 80081a0:	f018 0f01 	tst.w	r8, #1
 80081a4:	d10e      	bne.n	80081c4 <_dtoa_r+0x6bc>
 80081a6:	9902      	ldr	r1, [sp, #8]
 80081a8:	4648      	mov	r0, r9
 80081aa:	f000 fbbd 	bl	8008928 <_Bfree>
 80081ae:	2300      	movs	r3, #0
 80081b0:	7033      	strb	r3, [r6, #0]
 80081b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80081b4:	3701      	adds	r7, #1
 80081b6:	601f      	str	r7, [r3, #0]
 80081b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 824b 	beq.w	8008656 <_dtoa_r+0xb4e>
 80081c0:	601e      	str	r6, [r3, #0]
 80081c2:	e248      	b.n	8008656 <_dtoa_r+0xb4e>
 80081c4:	46b8      	mov	r8, r7
 80081c6:	4633      	mov	r3, r6
 80081c8:	461e      	mov	r6, r3
 80081ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081ce:	2a39      	cmp	r2, #57	@ 0x39
 80081d0:	d106      	bne.n	80081e0 <_dtoa_r+0x6d8>
 80081d2:	459a      	cmp	sl, r3
 80081d4:	d1f8      	bne.n	80081c8 <_dtoa_r+0x6c0>
 80081d6:	2230      	movs	r2, #48	@ 0x30
 80081d8:	f108 0801 	add.w	r8, r8, #1
 80081dc:	f88a 2000 	strb.w	r2, [sl]
 80081e0:	781a      	ldrb	r2, [r3, #0]
 80081e2:	3201      	adds	r2, #1
 80081e4:	701a      	strb	r2, [r3, #0]
 80081e6:	e7a0      	b.n	800812a <_dtoa_r+0x622>
 80081e8:	4b6f      	ldr	r3, [pc, #444]	@ (80083a8 <_dtoa_r+0x8a0>)
 80081ea:	2200      	movs	r2, #0
 80081ec:	f7f8 fa2c 	bl	8000648 <__aeabi_dmul>
 80081f0:	2200      	movs	r2, #0
 80081f2:	2300      	movs	r3, #0
 80081f4:	4604      	mov	r4, r0
 80081f6:	460d      	mov	r5, r1
 80081f8:	f7f8 fc8e 	bl	8000b18 <__aeabi_dcmpeq>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d09f      	beq.n	8008140 <_dtoa_r+0x638>
 8008200:	e7d1      	b.n	80081a6 <_dtoa_r+0x69e>
 8008202:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008204:	2a00      	cmp	r2, #0
 8008206:	f000 80ea 	beq.w	80083de <_dtoa_r+0x8d6>
 800820a:	9a07      	ldr	r2, [sp, #28]
 800820c:	2a01      	cmp	r2, #1
 800820e:	f300 80cd 	bgt.w	80083ac <_dtoa_r+0x8a4>
 8008212:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008214:	2a00      	cmp	r2, #0
 8008216:	f000 80c1 	beq.w	800839c <_dtoa_r+0x894>
 800821a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800821e:	9c08      	ldr	r4, [sp, #32]
 8008220:	9e00      	ldr	r6, [sp, #0]
 8008222:	9a00      	ldr	r2, [sp, #0]
 8008224:	441a      	add	r2, r3
 8008226:	9200      	str	r2, [sp, #0]
 8008228:	9a06      	ldr	r2, [sp, #24]
 800822a:	2101      	movs	r1, #1
 800822c:	441a      	add	r2, r3
 800822e:	4648      	mov	r0, r9
 8008230:	9206      	str	r2, [sp, #24]
 8008232:	f000 fc2d 	bl	8008a90 <__i2b>
 8008236:	4605      	mov	r5, r0
 8008238:	b166      	cbz	r6, 8008254 <_dtoa_r+0x74c>
 800823a:	9b06      	ldr	r3, [sp, #24]
 800823c:	2b00      	cmp	r3, #0
 800823e:	dd09      	ble.n	8008254 <_dtoa_r+0x74c>
 8008240:	42b3      	cmp	r3, r6
 8008242:	9a00      	ldr	r2, [sp, #0]
 8008244:	bfa8      	it	ge
 8008246:	4633      	movge	r3, r6
 8008248:	1ad2      	subs	r2, r2, r3
 800824a:	9200      	str	r2, [sp, #0]
 800824c:	9a06      	ldr	r2, [sp, #24]
 800824e:	1af6      	subs	r6, r6, r3
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	9306      	str	r3, [sp, #24]
 8008254:	9b08      	ldr	r3, [sp, #32]
 8008256:	b30b      	cbz	r3, 800829c <_dtoa_r+0x794>
 8008258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 80c6 	beq.w	80083ec <_dtoa_r+0x8e4>
 8008260:	2c00      	cmp	r4, #0
 8008262:	f000 80c0 	beq.w	80083e6 <_dtoa_r+0x8de>
 8008266:	4629      	mov	r1, r5
 8008268:	4622      	mov	r2, r4
 800826a:	4648      	mov	r0, r9
 800826c:	f000 fcc8 	bl	8008c00 <__pow5mult>
 8008270:	9a02      	ldr	r2, [sp, #8]
 8008272:	4601      	mov	r1, r0
 8008274:	4605      	mov	r5, r0
 8008276:	4648      	mov	r0, r9
 8008278:	f000 fc20 	bl	8008abc <__multiply>
 800827c:	9902      	ldr	r1, [sp, #8]
 800827e:	4680      	mov	r8, r0
 8008280:	4648      	mov	r0, r9
 8008282:	f000 fb51 	bl	8008928 <_Bfree>
 8008286:	9b08      	ldr	r3, [sp, #32]
 8008288:	1b1b      	subs	r3, r3, r4
 800828a:	9308      	str	r3, [sp, #32]
 800828c:	f000 80b1 	beq.w	80083f2 <_dtoa_r+0x8ea>
 8008290:	9a08      	ldr	r2, [sp, #32]
 8008292:	4641      	mov	r1, r8
 8008294:	4648      	mov	r0, r9
 8008296:	f000 fcb3 	bl	8008c00 <__pow5mult>
 800829a:	9002      	str	r0, [sp, #8]
 800829c:	2101      	movs	r1, #1
 800829e:	4648      	mov	r0, r9
 80082a0:	f000 fbf6 	bl	8008a90 <__i2b>
 80082a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082a6:	4604      	mov	r4, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 81d8 	beq.w	800865e <_dtoa_r+0xb56>
 80082ae:	461a      	mov	r2, r3
 80082b0:	4601      	mov	r1, r0
 80082b2:	4648      	mov	r0, r9
 80082b4:	f000 fca4 	bl	8008c00 <__pow5mult>
 80082b8:	9b07      	ldr	r3, [sp, #28]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	4604      	mov	r4, r0
 80082be:	f300 809f 	bgt.w	8008400 <_dtoa_r+0x8f8>
 80082c2:	9b04      	ldr	r3, [sp, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f040 8097 	bne.w	80083f8 <_dtoa_r+0x8f0>
 80082ca:	9b05      	ldr	r3, [sp, #20]
 80082cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f040 8093 	bne.w	80083fc <_dtoa_r+0x8f4>
 80082d6:	9b05      	ldr	r3, [sp, #20]
 80082d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082dc:	0d1b      	lsrs	r3, r3, #20
 80082de:	051b      	lsls	r3, r3, #20
 80082e0:	b133      	cbz	r3, 80082f0 <_dtoa_r+0x7e8>
 80082e2:	9b00      	ldr	r3, [sp, #0]
 80082e4:	3301      	adds	r3, #1
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	9b06      	ldr	r3, [sp, #24]
 80082ea:	3301      	adds	r3, #1
 80082ec:	9306      	str	r3, [sp, #24]
 80082ee:	2301      	movs	r3, #1
 80082f0:	9308      	str	r3, [sp, #32]
 80082f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 81b8 	beq.w	800866a <_dtoa_r+0xb62>
 80082fa:	6923      	ldr	r3, [r4, #16]
 80082fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008300:	6918      	ldr	r0, [r3, #16]
 8008302:	f000 fb79 	bl	80089f8 <__hi0bits>
 8008306:	f1c0 0020 	rsb	r0, r0, #32
 800830a:	9b06      	ldr	r3, [sp, #24]
 800830c:	4418      	add	r0, r3
 800830e:	f010 001f 	ands.w	r0, r0, #31
 8008312:	f000 8082 	beq.w	800841a <_dtoa_r+0x912>
 8008316:	f1c0 0320 	rsb	r3, r0, #32
 800831a:	2b04      	cmp	r3, #4
 800831c:	dd73      	ble.n	8008406 <_dtoa_r+0x8fe>
 800831e:	9b00      	ldr	r3, [sp, #0]
 8008320:	f1c0 001c 	rsb	r0, r0, #28
 8008324:	4403      	add	r3, r0
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	9b06      	ldr	r3, [sp, #24]
 800832a:	4403      	add	r3, r0
 800832c:	4406      	add	r6, r0
 800832e:	9306      	str	r3, [sp, #24]
 8008330:	9b00      	ldr	r3, [sp, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	dd05      	ble.n	8008342 <_dtoa_r+0x83a>
 8008336:	9902      	ldr	r1, [sp, #8]
 8008338:	461a      	mov	r2, r3
 800833a:	4648      	mov	r0, r9
 800833c:	f000 fcba 	bl	8008cb4 <__lshift>
 8008340:	9002      	str	r0, [sp, #8]
 8008342:	9b06      	ldr	r3, [sp, #24]
 8008344:	2b00      	cmp	r3, #0
 8008346:	dd05      	ble.n	8008354 <_dtoa_r+0x84c>
 8008348:	4621      	mov	r1, r4
 800834a:	461a      	mov	r2, r3
 800834c:	4648      	mov	r0, r9
 800834e:	f000 fcb1 	bl	8008cb4 <__lshift>
 8008352:	4604      	mov	r4, r0
 8008354:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008356:	2b00      	cmp	r3, #0
 8008358:	d061      	beq.n	800841e <_dtoa_r+0x916>
 800835a:	9802      	ldr	r0, [sp, #8]
 800835c:	4621      	mov	r1, r4
 800835e:	f000 fd15 	bl	8008d8c <__mcmp>
 8008362:	2800      	cmp	r0, #0
 8008364:	da5b      	bge.n	800841e <_dtoa_r+0x916>
 8008366:	2300      	movs	r3, #0
 8008368:	9902      	ldr	r1, [sp, #8]
 800836a:	220a      	movs	r2, #10
 800836c:	4648      	mov	r0, r9
 800836e:	f000 fafd 	bl	800896c <__multadd>
 8008372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008374:	9002      	str	r0, [sp, #8]
 8008376:	f107 38ff 	add.w	r8, r7, #4294967295
 800837a:	2b00      	cmp	r3, #0
 800837c:	f000 8177 	beq.w	800866e <_dtoa_r+0xb66>
 8008380:	4629      	mov	r1, r5
 8008382:	2300      	movs	r3, #0
 8008384:	220a      	movs	r2, #10
 8008386:	4648      	mov	r0, r9
 8008388:	f000 faf0 	bl	800896c <__multadd>
 800838c:	f1bb 0f00 	cmp.w	fp, #0
 8008390:	4605      	mov	r5, r0
 8008392:	dc6f      	bgt.n	8008474 <_dtoa_r+0x96c>
 8008394:	9b07      	ldr	r3, [sp, #28]
 8008396:	2b02      	cmp	r3, #2
 8008398:	dc49      	bgt.n	800842e <_dtoa_r+0x926>
 800839a:	e06b      	b.n	8008474 <_dtoa_r+0x96c>
 800839c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800839e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80083a2:	e73c      	b.n	800821e <_dtoa_r+0x716>
 80083a4:	3fe00000 	.word	0x3fe00000
 80083a8:	40240000 	.word	0x40240000
 80083ac:	9b03      	ldr	r3, [sp, #12]
 80083ae:	1e5c      	subs	r4, r3, #1
 80083b0:	9b08      	ldr	r3, [sp, #32]
 80083b2:	42a3      	cmp	r3, r4
 80083b4:	db09      	blt.n	80083ca <_dtoa_r+0x8c2>
 80083b6:	1b1c      	subs	r4, r3, r4
 80083b8:	9b03      	ldr	r3, [sp, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f6bf af30 	bge.w	8008220 <_dtoa_r+0x718>
 80083c0:	9b00      	ldr	r3, [sp, #0]
 80083c2:	9a03      	ldr	r2, [sp, #12]
 80083c4:	1a9e      	subs	r6, r3, r2
 80083c6:	2300      	movs	r3, #0
 80083c8:	e72b      	b.n	8008222 <_dtoa_r+0x71a>
 80083ca:	9b08      	ldr	r3, [sp, #32]
 80083cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80083ce:	9408      	str	r4, [sp, #32]
 80083d0:	1ae3      	subs	r3, r4, r3
 80083d2:	441a      	add	r2, r3
 80083d4:	9e00      	ldr	r6, [sp, #0]
 80083d6:	9b03      	ldr	r3, [sp, #12]
 80083d8:	920d      	str	r2, [sp, #52]	@ 0x34
 80083da:	2400      	movs	r4, #0
 80083dc:	e721      	b.n	8008222 <_dtoa_r+0x71a>
 80083de:	9c08      	ldr	r4, [sp, #32]
 80083e0:	9e00      	ldr	r6, [sp, #0]
 80083e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80083e4:	e728      	b.n	8008238 <_dtoa_r+0x730>
 80083e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80083ea:	e751      	b.n	8008290 <_dtoa_r+0x788>
 80083ec:	9a08      	ldr	r2, [sp, #32]
 80083ee:	9902      	ldr	r1, [sp, #8]
 80083f0:	e750      	b.n	8008294 <_dtoa_r+0x78c>
 80083f2:	f8cd 8008 	str.w	r8, [sp, #8]
 80083f6:	e751      	b.n	800829c <_dtoa_r+0x794>
 80083f8:	2300      	movs	r3, #0
 80083fa:	e779      	b.n	80082f0 <_dtoa_r+0x7e8>
 80083fc:	9b04      	ldr	r3, [sp, #16]
 80083fe:	e777      	b.n	80082f0 <_dtoa_r+0x7e8>
 8008400:	2300      	movs	r3, #0
 8008402:	9308      	str	r3, [sp, #32]
 8008404:	e779      	b.n	80082fa <_dtoa_r+0x7f2>
 8008406:	d093      	beq.n	8008330 <_dtoa_r+0x828>
 8008408:	9a00      	ldr	r2, [sp, #0]
 800840a:	331c      	adds	r3, #28
 800840c:	441a      	add	r2, r3
 800840e:	9200      	str	r2, [sp, #0]
 8008410:	9a06      	ldr	r2, [sp, #24]
 8008412:	441a      	add	r2, r3
 8008414:	441e      	add	r6, r3
 8008416:	9206      	str	r2, [sp, #24]
 8008418:	e78a      	b.n	8008330 <_dtoa_r+0x828>
 800841a:	4603      	mov	r3, r0
 800841c:	e7f4      	b.n	8008408 <_dtoa_r+0x900>
 800841e:	9b03      	ldr	r3, [sp, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	46b8      	mov	r8, r7
 8008424:	dc20      	bgt.n	8008468 <_dtoa_r+0x960>
 8008426:	469b      	mov	fp, r3
 8008428:	9b07      	ldr	r3, [sp, #28]
 800842a:	2b02      	cmp	r3, #2
 800842c:	dd1e      	ble.n	800846c <_dtoa_r+0x964>
 800842e:	f1bb 0f00 	cmp.w	fp, #0
 8008432:	f47f adb1 	bne.w	8007f98 <_dtoa_r+0x490>
 8008436:	4621      	mov	r1, r4
 8008438:	465b      	mov	r3, fp
 800843a:	2205      	movs	r2, #5
 800843c:	4648      	mov	r0, r9
 800843e:	f000 fa95 	bl	800896c <__multadd>
 8008442:	4601      	mov	r1, r0
 8008444:	4604      	mov	r4, r0
 8008446:	9802      	ldr	r0, [sp, #8]
 8008448:	f000 fca0 	bl	8008d8c <__mcmp>
 800844c:	2800      	cmp	r0, #0
 800844e:	f77f ada3 	ble.w	8007f98 <_dtoa_r+0x490>
 8008452:	4656      	mov	r6, sl
 8008454:	2331      	movs	r3, #49	@ 0x31
 8008456:	f806 3b01 	strb.w	r3, [r6], #1
 800845a:	f108 0801 	add.w	r8, r8, #1
 800845e:	e59f      	b.n	8007fa0 <_dtoa_r+0x498>
 8008460:	9c03      	ldr	r4, [sp, #12]
 8008462:	46b8      	mov	r8, r7
 8008464:	4625      	mov	r5, r4
 8008466:	e7f4      	b.n	8008452 <_dtoa_r+0x94a>
 8008468:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800846c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800846e:	2b00      	cmp	r3, #0
 8008470:	f000 8101 	beq.w	8008676 <_dtoa_r+0xb6e>
 8008474:	2e00      	cmp	r6, #0
 8008476:	dd05      	ble.n	8008484 <_dtoa_r+0x97c>
 8008478:	4629      	mov	r1, r5
 800847a:	4632      	mov	r2, r6
 800847c:	4648      	mov	r0, r9
 800847e:	f000 fc19 	bl	8008cb4 <__lshift>
 8008482:	4605      	mov	r5, r0
 8008484:	9b08      	ldr	r3, [sp, #32]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d05c      	beq.n	8008544 <_dtoa_r+0xa3c>
 800848a:	6869      	ldr	r1, [r5, #4]
 800848c:	4648      	mov	r0, r9
 800848e:	f000 fa0b 	bl	80088a8 <_Balloc>
 8008492:	4606      	mov	r6, r0
 8008494:	b928      	cbnz	r0, 80084a2 <_dtoa_r+0x99a>
 8008496:	4b82      	ldr	r3, [pc, #520]	@ (80086a0 <_dtoa_r+0xb98>)
 8008498:	4602      	mov	r2, r0
 800849a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800849e:	f7ff bb4a 	b.w	8007b36 <_dtoa_r+0x2e>
 80084a2:	692a      	ldr	r2, [r5, #16]
 80084a4:	3202      	adds	r2, #2
 80084a6:	0092      	lsls	r2, r2, #2
 80084a8:	f105 010c 	add.w	r1, r5, #12
 80084ac:	300c      	adds	r0, #12
 80084ae:	f7ff fa94 	bl	80079da <memcpy>
 80084b2:	2201      	movs	r2, #1
 80084b4:	4631      	mov	r1, r6
 80084b6:	4648      	mov	r0, r9
 80084b8:	f000 fbfc 	bl	8008cb4 <__lshift>
 80084bc:	f10a 0301 	add.w	r3, sl, #1
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	eb0a 030b 	add.w	r3, sl, fp
 80084c6:	9308      	str	r3, [sp, #32]
 80084c8:	9b04      	ldr	r3, [sp, #16]
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	462f      	mov	r7, r5
 80084d0:	9306      	str	r3, [sp, #24]
 80084d2:	4605      	mov	r5, r0
 80084d4:	9b00      	ldr	r3, [sp, #0]
 80084d6:	9802      	ldr	r0, [sp, #8]
 80084d8:	4621      	mov	r1, r4
 80084da:	f103 3bff 	add.w	fp, r3, #4294967295
 80084de:	f7ff fa8a 	bl	80079f6 <quorem>
 80084e2:	4603      	mov	r3, r0
 80084e4:	3330      	adds	r3, #48	@ 0x30
 80084e6:	9003      	str	r0, [sp, #12]
 80084e8:	4639      	mov	r1, r7
 80084ea:	9802      	ldr	r0, [sp, #8]
 80084ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80084ee:	f000 fc4d 	bl	8008d8c <__mcmp>
 80084f2:	462a      	mov	r2, r5
 80084f4:	9004      	str	r0, [sp, #16]
 80084f6:	4621      	mov	r1, r4
 80084f8:	4648      	mov	r0, r9
 80084fa:	f000 fc63 	bl	8008dc4 <__mdiff>
 80084fe:	68c2      	ldr	r2, [r0, #12]
 8008500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008502:	4606      	mov	r6, r0
 8008504:	bb02      	cbnz	r2, 8008548 <_dtoa_r+0xa40>
 8008506:	4601      	mov	r1, r0
 8008508:	9802      	ldr	r0, [sp, #8]
 800850a:	f000 fc3f 	bl	8008d8c <__mcmp>
 800850e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008510:	4602      	mov	r2, r0
 8008512:	4631      	mov	r1, r6
 8008514:	4648      	mov	r0, r9
 8008516:	920c      	str	r2, [sp, #48]	@ 0x30
 8008518:	9309      	str	r3, [sp, #36]	@ 0x24
 800851a:	f000 fa05 	bl	8008928 <_Bfree>
 800851e:	9b07      	ldr	r3, [sp, #28]
 8008520:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008522:	9e00      	ldr	r6, [sp, #0]
 8008524:	ea42 0103 	orr.w	r1, r2, r3
 8008528:	9b06      	ldr	r3, [sp, #24]
 800852a:	4319      	orrs	r1, r3
 800852c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800852e:	d10d      	bne.n	800854c <_dtoa_r+0xa44>
 8008530:	2b39      	cmp	r3, #57	@ 0x39
 8008532:	d027      	beq.n	8008584 <_dtoa_r+0xa7c>
 8008534:	9a04      	ldr	r2, [sp, #16]
 8008536:	2a00      	cmp	r2, #0
 8008538:	dd01      	ble.n	800853e <_dtoa_r+0xa36>
 800853a:	9b03      	ldr	r3, [sp, #12]
 800853c:	3331      	adds	r3, #49	@ 0x31
 800853e:	f88b 3000 	strb.w	r3, [fp]
 8008542:	e52e      	b.n	8007fa2 <_dtoa_r+0x49a>
 8008544:	4628      	mov	r0, r5
 8008546:	e7b9      	b.n	80084bc <_dtoa_r+0x9b4>
 8008548:	2201      	movs	r2, #1
 800854a:	e7e2      	b.n	8008512 <_dtoa_r+0xa0a>
 800854c:	9904      	ldr	r1, [sp, #16]
 800854e:	2900      	cmp	r1, #0
 8008550:	db04      	blt.n	800855c <_dtoa_r+0xa54>
 8008552:	9807      	ldr	r0, [sp, #28]
 8008554:	4301      	orrs	r1, r0
 8008556:	9806      	ldr	r0, [sp, #24]
 8008558:	4301      	orrs	r1, r0
 800855a:	d120      	bne.n	800859e <_dtoa_r+0xa96>
 800855c:	2a00      	cmp	r2, #0
 800855e:	ddee      	ble.n	800853e <_dtoa_r+0xa36>
 8008560:	9902      	ldr	r1, [sp, #8]
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	2201      	movs	r2, #1
 8008566:	4648      	mov	r0, r9
 8008568:	f000 fba4 	bl	8008cb4 <__lshift>
 800856c:	4621      	mov	r1, r4
 800856e:	9002      	str	r0, [sp, #8]
 8008570:	f000 fc0c 	bl	8008d8c <__mcmp>
 8008574:	2800      	cmp	r0, #0
 8008576:	9b00      	ldr	r3, [sp, #0]
 8008578:	dc02      	bgt.n	8008580 <_dtoa_r+0xa78>
 800857a:	d1e0      	bne.n	800853e <_dtoa_r+0xa36>
 800857c:	07da      	lsls	r2, r3, #31
 800857e:	d5de      	bpl.n	800853e <_dtoa_r+0xa36>
 8008580:	2b39      	cmp	r3, #57	@ 0x39
 8008582:	d1da      	bne.n	800853a <_dtoa_r+0xa32>
 8008584:	2339      	movs	r3, #57	@ 0x39
 8008586:	f88b 3000 	strb.w	r3, [fp]
 800858a:	4633      	mov	r3, r6
 800858c:	461e      	mov	r6, r3
 800858e:	3b01      	subs	r3, #1
 8008590:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008594:	2a39      	cmp	r2, #57	@ 0x39
 8008596:	d04e      	beq.n	8008636 <_dtoa_r+0xb2e>
 8008598:	3201      	adds	r2, #1
 800859a:	701a      	strb	r2, [r3, #0]
 800859c:	e501      	b.n	8007fa2 <_dtoa_r+0x49a>
 800859e:	2a00      	cmp	r2, #0
 80085a0:	dd03      	ble.n	80085aa <_dtoa_r+0xaa2>
 80085a2:	2b39      	cmp	r3, #57	@ 0x39
 80085a4:	d0ee      	beq.n	8008584 <_dtoa_r+0xa7c>
 80085a6:	3301      	adds	r3, #1
 80085a8:	e7c9      	b.n	800853e <_dtoa_r+0xa36>
 80085aa:	9a00      	ldr	r2, [sp, #0]
 80085ac:	9908      	ldr	r1, [sp, #32]
 80085ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80085b2:	428a      	cmp	r2, r1
 80085b4:	d028      	beq.n	8008608 <_dtoa_r+0xb00>
 80085b6:	9902      	ldr	r1, [sp, #8]
 80085b8:	2300      	movs	r3, #0
 80085ba:	220a      	movs	r2, #10
 80085bc:	4648      	mov	r0, r9
 80085be:	f000 f9d5 	bl	800896c <__multadd>
 80085c2:	42af      	cmp	r7, r5
 80085c4:	9002      	str	r0, [sp, #8]
 80085c6:	f04f 0300 	mov.w	r3, #0
 80085ca:	f04f 020a 	mov.w	r2, #10
 80085ce:	4639      	mov	r1, r7
 80085d0:	4648      	mov	r0, r9
 80085d2:	d107      	bne.n	80085e4 <_dtoa_r+0xadc>
 80085d4:	f000 f9ca 	bl	800896c <__multadd>
 80085d8:	4607      	mov	r7, r0
 80085da:	4605      	mov	r5, r0
 80085dc:	9b00      	ldr	r3, [sp, #0]
 80085de:	3301      	adds	r3, #1
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	e777      	b.n	80084d4 <_dtoa_r+0x9cc>
 80085e4:	f000 f9c2 	bl	800896c <__multadd>
 80085e8:	4629      	mov	r1, r5
 80085ea:	4607      	mov	r7, r0
 80085ec:	2300      	movs	r3, #0
 80085ee:	220a      	movs	r2, #10
 80085f0:	4648      	mov	r0, r9
 80085f2:	f000 f9bb 	bl	800896c <__multadd>
 80085f6:	4605      	mov	r5, r0
 80085f8:	e7f0      	b.n	80085dc <_dtoa_r+0xad4>
 80085fa:	f1bb 0f00 	cmp.w	fp, #0
 80085fe:	bfcc      	ite	gt
 8008600:	465e      	movgt	r6, fp
 8008602:	2601      	movle	r6, #1
 8008604:	4456      	add	r6, sl
 8008606:	2700      	movs	r7, #0
 8008608:	9902      	ldr	r1, [sp, #8]
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	2201      	movs	r2, #1
 800860e:	4648      	mov	r0, r9
 8008610:	f000 fb50 	bl	8008cb4 <__lshift>
 8008614:	4621      	mov	r1, r4
 8008616:	9002      	str	r0, [sp, #8]
 8008618:	f000 fbb8 	bl	8008d8c <__mcmp>
 800861c:	2800      	cmp	r0, #0
 800861e:	dcb4      	bgt.n	800858a <_dtoa_r+0xa82>
 8008620:	d102      	bne.n	8008628 <_dtoa_r+0xb20>
 8008622:	9b00      	ldr	r3, [sp, #0]
 8008624:	07db      	lsls	r3, r3, #31
 8008626:	d4b0      	bmi.n	800858a <_dtoa_r+0xa82>
 8008628:	4633      	mov	r3, r6
 800862a:	461e      	mov	r6, r3
 800862c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008630:	2a30      	cmp	r2, #48	@ 0x30
 8008632:	d0fa      	beq.n	800862a <_dtoa_r+0xb22>
 8008634:	e4b5      	b.n	8007fa2 <_dtoa_r+0x49a>
 8008636:	459a      	cmp	sl, r3
 8008638:	d1a8      	bne.n	800858c <_dtoa_r+0xa84>
 800863a:	2331      	movs	r3, #49	@ 0x31
 800863c:	f108 0801 	add.w	r8, r8, #1
 8008640:	f88a 3000 	strb.w	r3, [sl]
 8008644:	e4ad      	b.n	8007fa2 <_dtoa_r+0x49a>
 8008646:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008648:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80086a4 <_dtoa_r+0xb9c>
 800864c:	b11b      	cbz	r3, 8008656 <_dtoa_r+0xb4e>
 800864e:	f10a 0308 	add.w	r3, sl, #8
 8008652:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	4650      	mov	r0, sl
 8008658:	b017      	add	sp, #92	@ 0x5c
 800865a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865e:	9b07      	ldr	r3, [sp, #28]
 8008660:	2b01      	cmp	r3, #1
 8008662:	f77f ae2e 	ble.w	80082c2 <_dtoa_r+0x7ba>
 8008666:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008668:	9308      	str	r3, [sp, #32]
 800866a:	2001      	movs	r0, #1
 800866c:	e64d      	b.n	800830a <_dtoa_r+0x802>
 800866e:	f1bb 0f00 	cmp.w	fp, #0
 8008672:	f77f aed9 	ble.w	8008428 <_dtoa_r+0x920>
 8008676:	4656      	mov	r6, sl
 8008678:	9802      	ldr	r0, [sp, #8]
 800867a:	4621      	mov	r1, r4
 800867c:	f7ff f9bb 	bl	80079f6 <quorem>
 8008680:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008684:	f806 3b01 	strb.w	r3, [r6], #1
 8008688:	eba6 020a 	sub.w	r2, r6, sl
 800868c:	4593      	cmp	fp, r2
 800868e:	ddb4      	ble.n	80085fa <_dtoa_r+0xaf2>
 8008690:	9902      	ldr	r1, [sp, #8]
 8008692:	2300      	movs	r3, #0
 8008694:	220a      	movs	r2, #10
 8008696:	4648      	mov	r0, r9
 8008698:	f000 f968 	bl	800896c <__multadd>
 800869c:	9002      	str	r0, [sp, #8]
 800869e:	e7eb      	b.n	8008678 <_dtoa_r+0xb70>
 80086a0:	0800b684 	.word	0x0800b684
 80086a4:	0800b608 	.word	0x0800b608

080086a8 <_free_r>:
 80086a8:	b538      	push	{r3, r4, r5, lr}
 80086aa:	4605      	mov	r5, r0
 80086ac:	2900      	cmp	r1, #0
 80086ae:	d041      	beq.n	8008734 <_free_r+0x8c>
 80086b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086b4:	1f0c      	subs	r4, r1, #4
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	bfb8      	it	lt
 80086ba:	18e4      	addlt	r4, r4, r3
 80086bc:	f000 f8e8 	bl	8008890 <__malloc_lock>
 80086c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008738 <_free_r+0x90>)
 80086c2:	6813      	ldr	r3, [r2, #0]
 80086c4:	b933      	cbnz	r3, 80086d4 <_free_r+0x2c>
 80086c6:	6063      	str	r3, [r4, #4]
 80086c8:	6014      	str	r4, [r2, #0]
 80086ca:	4628      	mov	r0, r5
 80086cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086d0:	f000 b8e4 	b.w	800889c <__malloc_unlock>
 80086d4:	42a3      	cmp	r3, r4
 80086d6:	d908      	bls.n	80086ea <_free_r+0x42>
 80086d8:	6820      	ldr	r0, [r4, #0]
 80086da:	1821      	adds	r1, r4, r0
 80086dc:	428b      	cmp	r3, r1
 80086de:	bf01      	itttt	eq
 80086e0:	6819      	ldreq	r1, [r3, #0]
 80086e2:	685b      	ldreq	r3, [r3, #4]
 80086e4:	1809      	addeq	r1, r1, r0
 80086e6:	6021      	streq	r1, [r4, #0]
 80086e8:	e7ed      	b.n	80086c6 <_free_r+0x1e>
 80086ea:	461a      	mov	r2, r3
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	b10b      	cbz	r3, 80086f4 <_free_r+0x4c>
 80086f0:	42a3      	cmp	r3, r4
 80086f2:	d9fa      	bls.n	80086ea <_free_r+0x42>
 80086f4:	6811      	ldr	r1, [r2, #0]
 80086f6:	1850      	adds	r0, r2, r1
 80086f8:	42a0      	cmp	r0, r4
 80086fa:	d10b      	bne.n	8008714 <_free_r+0x6c>
 80086fc:	6820      	ldr	r0, [r4, #0]
 80086fe:	4401      	add	r1, r0
 8008700:	1850      	adds	r0, r2, r1
 8008702:	4283      	cmp	r3, r0
 8008704:	6011      	str	r1, [r2, #0]
 8008706:	d1e0      	bne.n	80086ca <_free_r+0x22>
 8008708:	6818      	ldr	r0, [r3, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	6053      	str	r3, [r2, #4]
 800870e:	4408      	add	r0, r1
 8008710:	6010      	str	r0, [r2, #0]
 8008712:	e7da      	b.n	80086ca <_free_r+0x22>
 8008714:	d902      	bls.n	800871c <_free_r+0x74>
 8008716:	230c      	movs	r3, #12
 8008718:	602b      	str	r3, [r5, #0]
 800871a:	e7d6      	b.n	80086ca <_free_r+0x22>
 800871c:	6820      	ldr	r0, [r4, #0]
 800871e:	1821      	adds	r1, r4, r0
 8008720:	428b      	cmp	r3, r1
 8008722:	bf04      	itt	eq
 8008724:	6819      	ldreq	r1, [r3, #0]
 8008726:	685b      	ldreq	r3, [r3, #4]
 8008728:	6063      	str	r3, [r4, #4]
 800872a:	bf04      	itt	eq
 800872c:	1809      	addeq	r1, r1, r0
 800872e:	6021      	streq	r1, [r4, #0]
 8008730:	6054      	str	r4, [r2, #4]
 8008732:	e7ca      	b.n	80086ca <_free_r+0x22>
 8008734:	bd38      	pop	{r3, r4, r5, pc}
 8008736:	bf00      	nop
 8008738:	20000a18 	.word	0x20000a18

0800873c <malloc>:
 800873c:	4b02      	ldr	r3, [pc, #8]	@ (8008748 <malloc+0xc>)
 800873e:	4601      	mov	r1, r0
 8008740:	6818      	ldr	r0, [r3, #0]
 8008742:	f000 b825 	b.w	8008790 <_malloc_r>
 8008746:	bf00      	nop
 8008748:	2000002c 	.word	0x2000002c

0800874c <sbrk_aligned>:
 800874c:	b570      	push	{r4, r5, r6, lr}
 800874e:	4e0f      	ldr	r6, [pc, #60]	@ (800878c <sbrk_aligned+0x40>)
 8008750:	460c      	mov	r4, r1
 8008752:	6831      	ldr	r1, [r6, #0]
 8008754:	4605      	mov	r5, r0
 8008756:	b911      	cbnz	r1, 800875e <sbrk_aligned+0x12>
 8008758:	f000 fe24 	bl	80093a4 <_sbrk_r>
 800875c:	6030      	str	r0, [r6, #0]
 800875e:	4621      	mov	r1, r4
 8008760:	4628      	mov	r0, r5
 8008762:	f000 fe1f 	bl	80093a4 <_sbrk_r>
 8008766:	1c43      	adds	r3, r0, #1
 8008768:	d103      	bne.n	8008772 <sbrk_aligned+0x26>
 800876a:	f04f 34ff 	mov.w	r4, #4294967295
 800876e:	4620      	mov	r0, r4
 8008770:	bd70      	pop	{r4, r5, r6, pc}
 8008772:	1cc4      	adds	r4, r0, #3
 8008774:	f024 0403 	bic.w	r4, r4, #3
 8008778:	42a0      	cmp	r0, r4
 800877a:	d0f8      	beq.n	800876e <sbrk_aligned+0x22>
 800877c:	1a21      	subs	r1, r4, r0
 800877e:	4628      	mov	r0, r5
 8008780:	f000 fe10 	bl	80093a4 <_sbrk_r>
 8008784:	3001      	adds	r0, #1
 8008786:	d1f2      	bne.n	800876e <sbrk_aligned+0x22>
 8008788:	e7ef      	b.n	800876a <sbrk_aligned+0x1e>
 800878a:	bf00      	nop
 800878c:	20000a14 	.word	0x20000a14

08008790 <_malloc_r>:
 8008790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008794:	1ccd      	adds	r5, r1, #3
 8008796:	f025 0503 	bic.w	r5, r5, #3
 800879a:	3508      	adds	r5, #8
 800879c:	2d0c      	cmp	r5, #12
 800879e:	bf38      	it	cc
 80087a0:	250c      	movcc	r5, #12
 80087a2:	2d00      	cmp	r5, #0
 80087a4:	4606      	mov	r6, r0
 80087a6:	db01      	blt.n	80087ac <_malloc_r+0x1c>
 80087a8:	42a9      	cmp	r1, r5
 80087aa:	d904      	bls.n	80087b6 <_malloc_r+0x26>
 80087ac:	230c      	movs	r3, #12
 80087ae:	6033      	str	r3, [r6, #0]
 80087b0:	2000      	movs	r0, #0
 80087b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800888c <_malloc_r+0xfc>
 80087ba:	f000 f869 	bl	8008890 <__malloc_lock>
 80087be:	f8d8 3000 	ldr.w	r3, [r8]
 80087c2:	461c      	mov	r4, r3
 80087c4:	bb44      	cbnz	r4, 8008818 <_malloc_r+0x88>
 80087c6:	4629      	mov	r1, r5
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7ff ffbf 	bl	800874c <sbrk_aligned>
 80087ce:	1c43      	adds	r3, r0, #1
 80087d0:	4604      	mov	r4, r0
 80087d2:	d158      	bne.n	8008886 <_malloc_r+0xf6>
 80087d4:	f8d8 4000 	ldr.w	r4, [r8]
 80087d8:	4627      	mov	r7, r4
 80087da:	2f00      	cmp	r7, #0
 80087dc:	d143      	bne.n	8008866 <_malloc_r+0xd6>
 80087de:	2c00      	cmp	r4, #0
 80087e0:	d04b      	beq.n	800887a <_malloc_r+0xea>
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	4639      	mov	r1, r7
 80087e6:	4630      	mov	r0, r6
 80087e8:	eb04 0903 	add.w	r9, r4, r3
 80087ec:	f000 fdda 	bl	80093a4 <_sbrk_r>
 80087f0:	4581      	cmp	r9, r0
 80087f2:	d142      	bne.n	800887a <_malloc_r+0xea>
 80087f4:	6821      	ldr	r1, [r4, #0]
 80087f6:	1a6d      	subs	r5, r5, r1
 80087f8:	4629      	mov	r1, r5
 80087fa:	4630      	mov	r0, r6
 80087fc:	f7ff ffa6 	bl	800874c <sbrk_aligned>
 8008800:	3001      	adds	r0, #1
 8008802:	d03a      	beq.n	800887a <_malloc_r+0xea>
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	442b      	add	r3, r5
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	f8d8 3000 	ldr.w	r3, [r8]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	bb62      	cbnz	r2, 800886c <_malloc_r+0xdc>
 8008812:	f8c8 7000 	str.w	r7, [r8]
 8008816:	e00f      	b.n	8008838 <_malloc_r+0xa8>
 8008818:	6822      	ldr	r2, [r4, #0]
 800881a:	1b52      	subs	r2, r2, r5
 800881c:	d420      	bmi.n	8008860 <_malloc_r+0xd0>
 800881e:	2a0b      	cmp	r2, #11
 8008820:	d917      	bls.n	8008852 <_malloc_r+0xc2>
 8008822:	1961      	adds	r1, r4, r5
 8008824:	42a3      	cmp	r3, r4
 8008826:	6025      	str	r5, [r4, #0]
 8008828:	bf18      	it	ne
 800882a:	6059      	strne	r1, [r3, #4]
 800882c:	6863      	ldr	r3, [r4, #4]
 800882e:	bf08      	it	eq
 8008830:	f8c8 1000 	streq.w	r1, [r8]
 8008834:	5162      	str	r2, [r4, r5]
 8008836:	604b      	str	r3, [r1, #4]
 8008838:	4630      	mov	r0, r6
 800883a:	f000 f82f 	bl	800889c <__malloc_unlock>
 800883e:	f104 000b 	add.w	r0, r4, #11
 8008842:	1d23      	adds	r3, r4, #4
 8008844:	f020 0007 	bic.w	r0, r0, #7
 8008848:	1ac2      	subs	r2, r0, r3
 800884a:	bf1c      	itt	ne
 800884c:	1a1b      	subne	r3, r3, r0
 800884e:	50a3      	strne	r3, [r4, r2]
 8008850:	e7af      	b.n	80087b2 <_malloc_r+0x22>
 8008852:	6862      	ldr	r2, [r4, #4]
 8008854:	42a3      	cmp	r3, r4
 8008856:	bf0c      	ite	eq
 8008858:	f8c8 2000 	streq.w	r2, [r8]
 800885c:	605a      	strne	r2, [r3, #4]
 800885e:	e7eb      	b.n	8008838 <_malloc_r+0xa8>
 8008860:	4623      	mov	r3, r4
 8008862:	6864      	ldr	r4, [r4, #4]
 8008864:	e7ae      	b.n	80087c4 <_malloc_r+0x34>
 8008866:	463c      	mov	r4, r7
 8008868:	687f      	ldr	r7, [r7, #4]
 800886a:	e7b6      	b.n	80087da <_malloc_r+0x4a>
 800886c:	461a      	mov	r2, r3
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	42a3      	cmp	r3, r4
 8008872:	d1fb      	bne.n	800886c <_malloc_r+0xdc>
 8008874:	2300      	movs	r3, #0
 8008876:	6053      	str	r3, [r2, #4]
 8008878:	e7de      	b.n	8008838 <_malloc_r+0xa8>
 800887a:	230c      	movs	r3, #12
 800887c:	6033      	str	r3, [r6, #0]
 800887e:	4630      	mov	r0, r6
 8008880:	f000 f80c 	bl	800889c <__malloc_unlock>
 8008884:	e794      	b.n	80087b0 <_malloc_r+0x20>
 8008886:	6005      	str	r5, [r0, #0]
 8008888:	e7d6      	b.n	8008838 <_malloc_r+0xa8>
 800888a:	bf00      	nop
 800888c:	20000a18 	.word	0x20000a18

08008890 <__malloc_lock>:
 8008890:	4801      	ldr	r0, [pc, #4]	@ (8008898 <__malloc_lock+0x8>)
 8008892:	f7ff b8a0 	b.w	80079d6 <__retarget_lock_acquire_recursive>
 8008896:	bf00      	nop
 8008898:	20000a10 	.word	0x20000a10

0800889c <__malloc_unlock>:
 800889c:	4801      	ldr	r0, [pc, #4]	@ (80088a4 <__malloc_unlock+0x8>)
 800889e:	f7ff b89b 	b.w	80079d8 <__retarget_lock_release_recursive>
 80088a2:	bf00      	nop
 80088a4:	20000a10 	.word	0x20000a10

080088a8 <_Balloc>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	69c6      	ldr	r6, [r0, #28]
 80088ac:	4604      	mov	r4, r0
 80088ae:	460d      	mov	r5, r1
 80088b0:	b976      	cbnz	r6, 80088d0 <_Balloc+0x28>
 80088b2:	2010      	movs	r0, #16
 80088b4:	f7ff ff42 	bl	800873c <malloc>
 80088b8:	4602      	mov	r2, r0
 80088ba:	61e0      	str	r0, [r4, #28]
 80088bc:	b920      	cbnz	r0, 80088c8 <_Balloc+0x20>
 80088be:	4b18      	ldr	r3, [pc, #96]	@ (8008920 <_Balloc+0x78>)
 80088c0:	4818      	ldr	r0, [pc, #96]	@ (8008924 <_Balloc+0x7c>)
 80088c2:	216b      	movs	r1, #107	@ 0x6b
 80088c4:	f000 fd7e 	bl	80093c4 <__assert_func>
 80088c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088cc:	6006      	str	r6, [r0, #0]
 80088ce:	60c6      	str	r6, [r0, #12]
 80088d0:	69e6      	ldr	r6, [r4, #28]
 80088d2:	68f3      	ldr	r3, [r6, #12]
 80088d4:	b183      	cbz	r3, 80088f8 <_Balloc+0x50>
 80088d6:	69e3      	ldr	r3, [r4, #28]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088de:	b9b8      	cbnz	r0, 8008910 <_Balloc+0x68>
 80088e0:	2101      	movs	r1, #1
 80088e2:	fa01 f605 	lsl.w	r6, r1, r5
 80088e6:	1d72      	adds	r2, r6, #5
 80088e8:	0092      	lsls	r2, r2, #2
 80088ea:	4620      	mov	r0, r4
 80088ec:	f000 fd88 	bl	8009400 <_calloc_r>
 80088f0:	b160      	cbz	r0, 800890c <_Balloc+0x64>
 80088f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088f6:	e00e      	b.n	8008916 <_Balloc+0x6e>
 80088f8:	2221      	movs	r2, #33	@ 0x21
 80088fa:	2104      	movs	r1, #4
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 fd7f 	bl	8009400 <_calloc_r>
 8008902:	69e3      	ldr	r3, [r4, #28]
 8008904:	60f0      	str	r0, [r6, #12]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1e4      	bne.n	80088d6 <_Balloc+0x2e>
 800890c:	2000      	movs	r0, #0
 800890e:	bd70      	pop	{r4, r5, r6, pc}
 8008910:	6802      	ldr	r2, [r0, #0]
 8008912:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008916:	2300      	movs	r3, #0
 8008918:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800891c:	e7f7      	b.n	800890e <_Balloc+0x66>
 800891e:	bf00      	nop
 8008920:	0800b615 	.word	0x0800b615
 8008924:	0800b695 	.word	0x0800b695

08008928 <_Bfree>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	69c6      	ldr	r6, [r0, #28]
 800892c:	4605      	mov	r5, r0
 800892e:	460c      	mov	r4, r1
 8008930:	b976      	cbnz	r6, 8008950 <_Bfree+0x28>
 8008932:	2010      	movs	r0, #16
 8008934:	f7ff ff02 	bl	800873c <malloc>
 8008938:	4602      	mov	r2, r0
 800893a:	61e8      	str	r0, [r5, #28]
 800893c:	b920      	cbnz	r0, 8008948 <_Bfree+0x20>
 800893e:	4b09      	ldr	r3, [pc, #36]	@ (8008964 <_Bfree+0x3c>)
 8008940:	4809      	ldr	r0, [pc, #36]	@ (8008968 <_Bfree+0x40>)
 8008942:	218f      	movs	r1, #143	@ 0x8f
 8008944:	f000 fd3e 	bl	80093c4 <__assert_func>
 8008948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800894c:	6006      	str	r6, [r0, #0]
 800894e:	60c6      	str	r6, [r0, #12]
 8008950:	b13c      	cbz	r4, 8008962 <_Bfree+0x3a>
 8008952:	69eb      	ldr	r3, [r5, #28]
 8008954:	6862      	ldr	r2, [r4, #4]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800895c:	6021      	str	r1, [r4, #0]
 800895e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008962:	bd70      	pop	{r4, r5, r6, pc}
 8008964:	0800b615 	.word	0x0800b615
 8008968:	0800b695 	.word	0x0800b695

0800896c <__multadd>:
 800896c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008970:	690d      	ldr	r5, [r1, #16]
 8008972:	4607      	mov	r7, r0
 8008974:	460c      	mov	r4, r1
 8008976:	461e      	mov	r6, r3
 8008978:	f101 0c14 	add.w	ip, r1, #20
 800897c:	2000      	movs	r0, #0
 800897e:	f8dc 3000 	ldr.w	r3, [ip]
 8008982:	b299      	uxth	r1, r3
 8008984:	fb02 6101 	mla	r1, r2, r1, r6
 8008988:	0c1e      	lsrs	r6, r3, #16
 800898a:	0c0b      	lsrs	r3, r1, #16
 800898c:	fb02 3306 	mla	r3, r2, r6, r3
 8008990:	b289      	uxth	r1, r1
 8008992:	3001      	adds	r0, #1
 8008994:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008998:	4285      	cmp	r5, r0
 800899a:	f84c 1b04 	str.w	r1, [ip], #4
 800899e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80089a2:	dcec      	bgt.n	800897e <__multadd+0x12>
 80089a4:	b30e      	cbz	r6, 80089ea <__multadd+0x7e>
 80089a6:	68a3      	ldr	r3, [r4, #8]
 80089a8:	42ab      	cmp	r3, r5
 80089aa:	dc19      	bgt.n	80089e0 <__multadd+0x74>
 80089ac:	6861      	ldr	r1, [r4, #4]
 80089ae:	4638      	mov	r0, r7
 80089b0:	3101      	adds	r1, #1
 80089b2:	f7ff ff79 	bl	80088a8 <_Balloc>
 80089b6:	4680      	mov	r8, r0
 80089b8:	b928      	cbnz	r0, 80089c6 <__multadd+0x5a>
 80089ba:	4602      	mov	r2, r0
 80089bc:	4b0c      	ldr	r3, [pc, #48]	@ (80089f0 <__multadd+0x84>)
 80089be:	480d      	ldr	r0, [pc, #52]	@ (80089f4 <__multadd+0x88>)
 80089c0:	21ba      	movs	r1, #186	@ 0xba
 80089c2:	f000 fcff 	bl	80093c4 <__assert_func>
 80089c6:	6922      	ldr	r2, [r4, #16]
 80089c8:	3202      	adds	r2, #2
 80089ca:	f104 010c 	add.w	r1, r4, #12
 80089ce:	0092      	lsls	r2, r2, #2
 80089d0:	300c      	adds	r0, #12
 80089d2:	f7ff f802 	bl	80079da <memcpy>
 80089d6:	4621      	mov	r1, r4
 80089d8:	4638      	mov	r0, r7
 80089da:	f7ff ffa5 	bl	8008928 <_Bfree>
 80089de:	4644      	mov	r4, r8
 80089e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089e4:	3501      	adds	r5, #1
 80089e6:	615e      	str	r6, [r3, #20]
 80089e8:	6125      	str	r5, [r4, #16]
 80089ea:	4620      	mov	r0, r4
 80089ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f0:	0800b684 	.word	0x0800b684
 80089f4:	0800b695 	.word	0x0800b695

080089f8 <__hi0bits>:
 80089f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80089fc:	4603      	mov	r3, r0
 80089fe:	bf36      	itet	cc
 8008a00:	0403      	lslcc	r3, r0, #16
 8008a02:	2000      	movcs	r0, #0
 8008a04:	2010      	movcc	r0, #16
 8008a06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a0a:	bf3c      	itt	cc
 8008a0c:	021b      	lslcc	r3, r3, #8
 8008a0e:	3008      	addcc	r0, #8
 8008a10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a14:	bf3c      	itt	cc
 8008a16:	011b      	lslcc	r3, r3, #4
 8008a18:	3004      	addcc	r0, #4
 8008a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a1e:	bf3c      	itt	cc
 8008a20:	009b      	lslcc	r3, r3, #2
 8008a22:	3002      	addcc	r0, #2
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	db05      	blt.n	8008a34 <__hi0bits+0x3c>
 8008a28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a2c:	f100 0001 	add.w	r0, r0, #1
 8008a30:	bf08      	it	eq
 8008a32:	2020      	moveq	r0, #32
 8008a34:	4770      	bx	lr

08008a36 <__lo0bits>:
 8008a36:	6803      	ldr	r3, [r0, #0]
 8008a38:	4602      	mov	r2, r0
 8008a3a:	f013 0007 	ands.w	r0, r3, #7
 8008a3e:	d00b      	beq.n	8008a58 <__lo0bits+0x22>
 8008a40:	07d9      	lsls	r1, r3, #31
 8008a42:	d421      	bmi.n	8008a88 <__lo0bits+0x52>
 8008a44:	0798      	lsls	r0, r3, #30
 8008a46:	bf49      	itett	mi
 8008a48:	085b      	lsrmi	r3, r3, #1
 8008a4a:	089b      	lsrpl	r3, r3, #2
 8008a4c:	2001      	movmi	r0, #1
 8008a4e:	6013      	strmi	r3, [r2, #0]
 8008a50:	bf5c      	itt	pl
 8008a52:	6013      	strpl	r3, [r2, #0]
 8008a54:	2002      	movpl	r0, #2
 8008a56:	4770      	bx	lr
 8008a58:	b299      	uxth	r1, r3
 8008a5a:	b909      	cbnz	r1, 8008a60 <__lo0bits+0x2a>
 8008a5c:	0c1b      	lsrs	r3, r3, #16
 8008a5e:	2010      	movs	r0, #16
 8008a60:	b2d9      	uxtb	r1, r3
 8008a62:	b909      	cbnz	r1, 8008a68 <__lo0bits+0x32>
 8008a64:	3008      	adds	r0, #8
 8008a66:	0a1b      	lsrs	r3, r3, #8
 8008a68:	0719      	lsls	r1, r3, #28
 8008a6a:	bf04      	itt	eq
 8008a6c:	091b      	lsreq	r3, r3, #4
 8008a6e:	3004      	addeq	r0, #4
 8008a70:	0799      	lsls	r1, r3, #30
 8008a72:	bf04      	itt	eq
 8008a74:	089b      	lsreq	r3, r3, #2
 8008a76:	3002      	addeq	r0, #2
 8008a78:	07d9      	lsls	r1, r3, #31
 8008a7a:	d403      	bmi.n	8008a84 <__lo0bits+0x4e>
 8008a7c:	085b      	lsrs	r3, r3, #1
 8008a7e:	f100 0001 	add.w	r0, r0, #1
 8008a82:	d003      	beq.n	8008a8c <__lo0bits+0x56>
 8008a84:	6013      	str	r3, [r2, #0]
 8008a86:	4770      	bx	lr
 8008a88:	2000      	movs	r0, #0
 8008a8a:	4770      	bx	lr
 8008a8c:	2020      	movs	r0, #32
 8008a8e:	4770      	bx	lr

08008a90 <__i2b>:
 8008a90:	b510      	push	{r4, lr}
 8008a92:	460c      	mov	r4, r1
 8008a94:	2101      	movs	r1, #1
 8008a96:	f7ff ff07 	bl	80088a8 <_Balloc>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	b928      	cbnz	r0, 8008aaa <__i2b+0x1a>
 8008a9e:	4b05      	ldr	r3, [pc, #20]	@ (8008ab4 <__i2b+0x24>)
 8008aa0:	4805      	ldr	r0, [pc, #20]	@ (8008ab8 <__i2b+0x28>)
 8008aa2:	f240 1145 	movw	r1, #325	@ 0x145
 8008aa6:	f000 fc8d 	bl	80093c4 <__assert_func>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	6144      	str	r4, [r0, #20]
 8008aae:	6103      	str	r3, [r0, #16]
 8008ab0:	bd10      	pop	{r4, pc}
 8008ab2:	bf00      	nop
 8008ab4:	0800b684 	.word	0x0800b684
 8008ab8:	0800b695 	.word	0x0800b695

08008abc <__multiply>:
 8008abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac0:	4617      	mov	r7, r2
 8008ac2:	690a      	ldr	r2, [r1, #16]
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	bfa8      	it	ge
 8008aca:	463b      	movge	r3, r7
 8008acc:	4689      	mov	r9, r1
 8008ace:	bfa4      	itt	ge
 8008ad0:	460f      	movge	r7, r1
 8008ad2:	4699      	movge	r9, r3
 8008ad4:	693d      	ldr	r5, [r7, #16]
 8008ad6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	6879      	ldr	r1, [r7, #4]
 8008ade:	eb05 060a 	add.w	r6, r5, sl
 8008ae2:	42b3      	cmp	r3, r6
 8008ae4:	b085      	sub	sp, #20
 8008ae6:	bfb8      	it	lt
 8008ae8:	3101      	addlt	r1, #1
 8008aea:	f7ff fedd 	bl	80088a8 <_Balloc>
 8008aee:	b930      	cbnz	r0, 8008afe <__multiply+0x42>
 8008af0:	4602      	mov	r2, r0
 8008af2:	4b41      	ldr	r3, [pc, #260]	@ (8008bf8 <__multiply+0x13c>)
 8008af4:	4841      	ldr	r0, [pc, #260]	@ (8008bfc <__multiply+0x140>)
 8008af6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008afa:	f000 fc63 	bl	80093c4 <__assert_func>
 8008afe:	f100 0414 	add.w	r4, r0, #20
 8008b02:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008b06:	4623      	mov	r3, r4
 8008b08:	2200      	movs	r2, #0
 8008b0a:	4573      	cmp	r3, lr
 8008b0c:	d320      	bcc.n	8008b50 <__multiply+0x94>
 8008b0e:	f107 0814 	add.w	r8, r7, #20
 8008b12:	f109 0114 	add.w	r1, r9, #20
 8008b16:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008b1a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008b1e:	9302      	str	r3, [sp, #8]
 8008b20:	1beb      	subs	r3, r5, r7
 8008b22:	3b15      	subs	r3, #21
 8008b24:	f023 0303 	bic.w	r3, r3, #3
 8008b28:	3304      	adds	r3, #4
 8008b2a:	3715      	adds	r7, #21
 8008b2c:	42bd      	cmp	r5, r7
 8008b2e:	bf38      	it	cc
 8008b30:	2304      	movcc	r3, #4
 8008b32:	9301      	str	r3, [sp, #4]
 8008b34:	9b02      	ldr	r3, [sp, #8]
 8008b36:	9103      	str	r1, [sp, #12]
 8008b38:	428b      	cmp	r3, r1
 8008b3a:	d80c      	bhi.n	8008b56 <__multiply+0x9a>
 8008b3c:	2e00      	cmp	r6, #0
 8008b3e:	dd03      	ble.n	8008b48 <__multiply+0x8c>
 8008b40:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d055      	beq.n	8008bf4 <__multiply+0x138>
 8008b48:	6106      	str	r6, [r0, #16]
 8008b4a:	b005      	add	sp, #20
 8008b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b50:	f843 2b04 	str.w	r2, [r3], #4
 8008b54:	e7d9      	b.n	8008b0a <__multiply+0x4e>
 8008b56:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b5a:	f1ba 0f00 	cmp.w	sl, #0
 8008b5e:	d01f      	beq.n	8008ba0 <__multiply+0xe4>
 8008b60:	46c4      	mov	ip, r8
 8008b62:	46a1      	mov	r9, r4
 8008b64:	2700      	movs	r7, #0
 8008b66:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b6a:	f8d9 3000 	ldr.w	r3, [r9]
 8008b6e:	fa1f fb82 	uxth.w	fp, r2
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b78:	443b      	add	r3, r7
 8008b7a:	f8d9 7000 	ldr.w	r7, [r9]
 8008b7e:	0c12      	lsrs	r2, r2, #16
 8008b80:	0c3f      	lsrs	r7, r7, #16
 8008b82:	fb0a 7202 	mla	r2, sl, r2, r7
 8008b86:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b90:	4565      	cmp	r5, ip
 8008b92:	f849 3b04 	str.w	r3, [r9], #4
 8008b96:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008b9a:	d8e4      	bhi.n	8008b66 <__multiply+0xaa>
 8008b9c:	9b01      	ldr	r3, [sp, #4]
 8008b9e:	50e7      	str	r7, [r4, r3]
 8008ba0:	9b03      	ldr	r3, [sp, #12]
 8008ba2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008ba6:	3104      	adds	r1, #4
 8008ba8:	f1b9 0f00 	cmp.w	r9, #0
 8008bac:	d020      	beq.n	8008bf0 <__multiply+0x134>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	4647      	mov	r7, r8
 8008bb2:	46a4      	mov	ip, r4
 8008bb4:	f04f 0a00 	mov.w	sl, #0
 8008bb8:	f8b7 b000 	ldrh.w	fp, [r7]
 8008bbc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008bc0:	fb09 220b 	mla	r2, r9, fp, r2
 8008bc4:	4452      	add	r2, sl
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bcc:	f84c 3b04 	str.w	r3, [ip], #4
 8008bd0:	f857 3b04 	ldr.w	r3, [r7], #4
 8008bd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bd8:	f8bc 3000 	ldrh.w	r3, [ip]
 8008bdc:	fb09 330a 	mla	r3, r9, sl, r3
 8008be0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008be4:	42bd      	cmp	r5, r7
 8008be6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bea:	d8e5      	bhi.n	8008bb8 <__multiply+0xfc>
 8008bec:	9a01      	ldr	r2, [sp, #4]
 8008bee:	50a3      	str	r3, [r4, r2]
 8008bf0:	3404      	adds	r4, #4
 8008bf2:	e79f      	b.n	8008b34 <__multiply+0x78>
 8008bf4:	3e01      	subs	r6, #1
 8008bf6:	e7a1      	b.n	8008b3c <__multiply+0x80>
 8008bf8:	0800b684 	.word	0x0800b684
 8008bfc:	0800b695 	.word	0x0800b695

08008c00 <__pow5mult>:
 8008c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c04:	4615      	mov	r5, r2
 8008c06:	f012 0203 	ands.w	r2, r2, #3
 8008c0a:	4607      	mov	r7, r0
 8008c0c:	460e      	mov	r6, r1
 8008c0e:	d007      	beq.n	8008c20 <__pow5mult+0x20>
 8008c10:	4c25      	ldr	r4, [pc, #148]	@ (8008ca8 <__pow5mult+0xa8>)
 8008c12:	3a01      	subs	r2, #1
 8008c14:	2300      	movs	r3, #0
 8008c16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c1a:	f7ff fea7 	bl	800896c <__multadd>
 8008c1e:	4606      	mov	r6, r0
 8008c20:	10ad      	asrs	r5, r5, #2
 8008c22:	d03d      	beq.n	8008ca0 <__pow5mult+0xa0>
 8008c24:	69fc      	ldr	r4, [r7, #28]
 8008c26:	b97c      	cbnz	r4, 8008c48 <__pow5mult+0x48>
 8008c28:	2010      	movs	r0, #16
 8008c2a:	f7ff fd87 	bl	800873c <malloc>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	61f8      	str	r0, [r7, #28]
 8008c32:	b928      	cbnz	r0, 8008c40 <__pow5mult+0x40>
 8008c34:	4b1d      	ldr	r3, [pc, #116]	@ (8008cac <__pow5mult+0xac>)
 8008c36:	481e      	ldr	r0, [pc, #120]	@ (8008cb0 <__pow5mult+0xb0>)
 8008c38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c3c:	f000 fbc2 	bl	80093c4 <__assert_func>
 8008c40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c44:	6004      	str	r4, [r0, #0]
 8008c46:	60c4      	str	r4, [r0, #12]
 8008c48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c50:	b94c      	cbnz	r4, 8008c66 <__pow5mult+0x66>
 8008c52:	f240 2171 	movw	r1, #625	@ 0x271
 8008c56:	4638      	mov	r0, r7
 8008c58:	f7ff ff1a 	bl	8008a90 <__i2b>
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c62:	4604      	mov	r4, r0
 8008c64:	6003      	str	r3, [r0, #0]
 8008c66:	f04f 0900 	mov.w	r9, #0
 8008c6a:	07eb      	lsls	r3, r5, #31
 8008c6c:	d50a      	bpl.n	8008c84 <__pow5mult+0x84>
 8008c6e:	4631      	mov	r1, r6
 8008c70:	4622      	mov	r2, r4
 8008c72:	4638      	mov	r0, r7
 8008c74:	f7ff ff22 	bl	8008abc <__multiply>
 8008c78:	4631      	mov	r1, r6
 8008c7a:	4680      	mov	r8, r0
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	f7ff fe53 	bl	8008928 <_Bfree>
 8008c82:	4646      	mov	r6, r8
 8008c84:	106d      	asrs	r5, r5, #1
 8008c86:	d00b      	beq.n	8008ca0 <__pow5mult+0xa0>
 8008c88:	6820      	ldr	r0, [r4, #0]
 8008c8a:	b938      	cbnz	r0, 8008c9c <__pow5mult+0x9c>
 8008c8c:	4622      	mov	r2, r4
 8008c8e:	4621      	mov	r1, r4
 8008c90:	4638      	mov	r0, r7
 8008c92:	f7ff ff13 	bl	8008abc <__multiply>
 8008c96:	6020      	str	r0, [r4, #0]
 8008c98:	f8c0 9000 	str.w	r9, [r0]
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	e7e4      	b.n	8008c6a <__pow5mult+0x6a>
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ca6:	bf00      	nop
 8008ca8:	0800b748 	.word	0x0800b748
 8008cac:	0800b615 	.word	0x0800b615
 8008cb0:	0800b695 	.word	0x0800b695

08008cb4 <__lshift>:
 8008cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb8:	460c      	mov	r4, r1
 8008cba:	6849      	ldr	r1, [r1, #4]
 8008cbc:	6923      	ldr	r3, [r4, #16]
 8008cbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cc2:	68a3      	ldr	r3, [r4, #8]
 8008cc4:	4607      	mov	r7, r0
 8008cc6:	4691      	mov	r9, r2
 8008cc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ccc:	f108 0601 	add.w	r6, r8, #1
 8008cd0:	42b3      	cmp	r3, r6
 8008cd2:	db0b      	blt.n	8008cec <__lshift+0x38>
 8008cd4:	4638      	mov	r0, r7
 8008cd6:	f7ff fde7 	bl	80088a8 <_Balloc>
 8008cda:	4605      	mov	r5, r0
 8008cdc:	b948      	cbnz	r0, 8008cf2 <__lshift+0x3e>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	4b28      	ldr	r3, [pc, #160]	@ (8008d84 <__lshift+0xd0>)
 8008ce2:	4829      	ldr	r0, [pc, #164]	@ (8008d88 <__lshift+0xd4>)
 8008ce4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008ce8:	f000 fb6c 	bl	80093c4 <__assert_func>
 8008cec:	3101      	adds	r1, #1
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	e7ee      	b.n	8008cd0 <__lshift+0x1c>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f100 0114 	add.w	r1, r0, #20
 8008cf8:	f100 0210 	add.w	r2, r0, #16
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	4553      	cmp	r3, sl
 8008d00:	db33      	blt.n	8008d6a <__lshift+0xb6>
 8008d02:	6920      	ldr	r0, [r4, #16]
 8008d04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d08:	f104 0314 	add.w	r3, r4, #20
 8008d0c:	f019 091f 	ands.w	r9, r9, #31
 8008d10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d18:	d02b      	beq.n	8008d72 <__lshift+0xbe>
 8008d1a:	f1c9 0e20 	rsb	lr, r9, #32
 8008d1e:	468a      	mov	sl, r1
 8008d20:	2200      	movs	r2, #0
 8008d22:	6818      	ldr	r0, [r3, #0]
 8008d24:	fa00 f009 	lsl.w	r0, r0, r9
 8008d28:	4310      	orrs	r0, r2
 8008d2a:	f84a 0b04 	str.w	r0, [sl], #4
 8008d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d32:	459c      	cmp	ip, r3
 8008d34:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d38:	d8f3      	bhi.n	8008d22 <__lshift+0x6e>
 8008d3a:	ebac 0304 	sub.w	r3, ip, r4
 8008d3e:	3b15      	subs	r3, #21
 8008d40:	f023 0303 	bic.w	r3, r3, #3
 8008d44:	3304      	adds	r3, #4
 8008d46:	f104 0015 	add.w	r0, r4, #21
 8008d4a:	4560      	cmp	r0, ip
 8008d4c:	bf88      	it	hi
 8008d4e:	2304      	movhi	r3, #4
 8008d50:	50ca      	str	r2, [r1, r3]
 8008d52:	b10a      	cbz	r2, 8008d58 <__lshift+0xa4>
 8008d54:	f108 0602 	add.w	r6, r8, #2
 8008d58:	3e01      	subs	r6, #1
 8008d5a:	4638      	mov	r0, r7
 8008d5c:	612e      	str	r6, [r5, #16]
 8008d5e:	4621      	mov	r1, r4
 8008d60:	f7ff fde2 	bl	8008928 <_Bfree>
 8008d64:	4628      	mov	r0, r5
 8008d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d6e:	3301      	adds	r3, #1
 8008d70:	e7c5      	b.n	8008cfe <__lshift+0x4a>
 8008d72:	3904      	subs	r1, #4
 8008d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d78:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d7c:	459c      	cmp	ip, r3
 8008d7e:	d8f9      	bhi.n	8008d74 <__lshift+0xc0>
 8008d80:	e7ea      	b.n	8008d58 <__lshift+0xa4>
 8008d82:	bf00      	nop
 8008d84:	0800b684 	.word	0x0800b684
 8008d88:	0800b695 	.word	0x0800b695

08008d8c <__mcmp>:
 8008d8c:	690a      	ldr	r2, [r1, #16]
 8008d8e:	4603      	mov	r3, r0
 8008d90:	6900      	ldr	r0, [r0, #16]
 8008d92:	1a80      	subs	r0, r0, r2
 8008d94:	b530      	push	{r4, r5, lr}
 8008d96:	d10e      	bne.n	8008db6 <__mcmp+0x2a>
 8008d98:	3314      	adds	r3, #20
 8008d9a:	3114      	adds	r1, #20
 8008d9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008da0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008da4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008da8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008dac:	4295      	cmp	r5, r2
 8008dae:	d003      	beq.n	8008db8 <__mcmp+0x2c>
 8008db0:	d205      	bcs.n	8008dbe <__mcmp+0x32>
 8008db2:	f04f 30ff 	mov.w	r0, #4294967295
 8008db6:	bd30      	pop	{r4, r5, pc}
 8008db8:	42a3      	cmp	r3, r4
 8008dba:	d3f3      	bcc.n	8008da4 <__mcmp+0x18>
 8008dbc:	e7fb      	b.n	8008db6 <__mcmp+0x2a>
 8008dbe:	2001      	movs	r0, #1
 8008dc0:	e7f9      	b.n	8008db6 <__mcmp+0x2a>
	...

08008dc4 <__mdiff>:
 8008dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc8:	4689      	mov	r9, r1
 8008dca:	4606      	mov	r6, r0
 8008dcc:	4611      	mov	r1, r2
 8008dce:	4648      	mov	r0, r9
 8008dd0:	4614      	mov	r4, r2
 8008dd2:	f7ff ffdb 	bl	8008d8c <__mcmp>
 8008dd6:	1e05      	subs	r5, r0, #0
 8008dd8:	d112      	bne.n	8008e00 <__mdiff+0x3c>
 8008dda:	4629      	mov	r1, r5
 8008ddc:	4630      	mov	r0, r6
 8008dde:	f7ff fd63 	bl	80088a8 <_Balloc>
 8008de2:	4602      	mov	r2, r0
 8008de4:	b928      	cbnz	r0, 8008df2 <__mdiff+0x2e>
 8008de6:	4b3f      	ldr	r3, [pc, #252]	@ (8008ee4 <__mdiff+0x120>)
 8008de8:	f240 2137 	movw	r1, #567	@ 0x237
 8008dec:	483e      	ldr	r0, [pc, #248]	@ (8008ee8 <__mdiff+0x124>)
 8008dee:	f000 fae9 	bl	80093c4 <__assert_func>
 8008df2:	2301      	movs	r3, #1
 8008df4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008df8:	4610      	mov	r0, r2
 8008dfa:	b003      	add	sp, #12
 8008dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e00:	bfbc      	itt	lt
 8008e02:	464b      	movlt	r3, r9
 8008e04:	46a1      	movlt	r9, r4
 8008e06:	4630      	mov	r0, r6
 8008e08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008e0c:	bfba      	itte	lt
 8008e0e:	461c      	movlt	r4, r3
 8008e10:	2501      	movlt	r5, #1
 8008e12:	2500      	movge	r5, #0
 8008e14:	f7ff fd48 	bl	80088a8 <_Balloc>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	b918      	cbnz	r0, 8008e24 <__mdiff+0x60>
 8008e1c:	4b31      	ldr	r3, [pc, #196]	@ (8008ee4 <__mdiff+0x120>)
 8008e1e:	f240 2145 	movw	r1, #581	@ 0x245
 8008e22:	e7e3      	b.n	8008dec <__mdiff+0x28>
 8008e24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e28:	6926      	ldr	r6, [r4, #16]
 8008e2a:	60c5      	str	r5, [r0, #12]
 8008e2c:	f109 0310 	add.w	r3, r9, #16
 8008e30:	f109 0514 	add.w	r5, r9, #20
 8008e34:	f104 0e14 	add.w	lr, r4, #20
 8008e38:	f100 0b14 	add.w	fp, r0, #20
 8008e3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e44:	9301      	str	r3, [sp, #4]
 8008e46:	46d9      	mov	r9, fp
 8008e48:	f04f 0c00 	mov.w	ip, #0
 8008e4c:	9b01      	ldr	r3, [sp, #4]
 8008e4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e52:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e56:	9301      	str	r3, [sp, #4]
 8008e58:	fa1f f38a 	uxth.w	r3, sl
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	b283      	uxth	r3, r0
 8008e60:	1acb      	subs	r3, r1, r3
 8008e62:	0c00      	lsrs	r0, r0, #16
 8008e64:	4463      	add	r3, ip
 8008e66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e74:	4576      	cmp	r6, lr
 8008e76:	f849 3b04 	str.w	r3, [r9], #4
 8008e7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e7e:	d8e5      	bhi.n	8008e4c <__mdiff+0x88>
 8008e80:	1b33      	subs	r3, r6, r4
 8008e82:	3b15      	subs	r3, #21
 8008e84:	f023 0303 	bic.w	r3, r3, #3
 8008e88:	3415      	adds	r4, #21
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	42a6      	cmp	r6, r4
 8008e8e:	bf38      	it	cc
 8008e90:	2304      	movcc	r3, #4
 8008e92:	441d      	add	r5, r3
 8008e94:	445b      	add	r3, fp
 8008e96:	461e      	mov	r6, r3
 8008e98:	462c      	mov	r4, r5
 8008e9a:	4544      	cmp	r4, r8
 8008e9c:	d30e      	bcc.n	8008ebc <__mdiff+0xf8>
 8008e9e:	f108 0103 	add.w	r1, r8, #3
 8008ea2:	1b49      	subs	r1, r1, r5
 8008ea4:	f021 0103 	bic.w	r1, r1, #3
 8008ea8:	3d03      	subs	r5, #3
 8008eaa:	45a8      	cmp	r8, r5
 8008eac:	bf38      	it	cc
 8008eae:	2100      	movcc	r1, #0
 8008eb0:	440b      	add	r3, r1
 8008eb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008eb6:	b191      	cbz	r1, 8008ede <__mdiff+0x11a>
 8008eb8:	6117      	str	r7, [r2, #16]
 8008eba:	e79d      	b.n	8008df8 <__mdiff+0x34>
 8008ebc:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ec0:	46e6      	mov	lr, ip
 8008ec2:	0c08      	lsrs	r0, r1, #16
 8008ec4:	fa1c fc81 	uxtah	ip, ip, r1
 8008ec8:	4471      	add	r1, lr
 8008eca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008ece:	b289      	uxth	r1, r1
 8008ed0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ed4:	f846 1b04 	str.w	r1, [r6], #4
 8008ed8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008edc:	e7dd      	b.n	8008e9a <__mdiff+0xd6>
 8008ede:	3f01      	subs	r7, #1
 8008ee0:	e7e7      	b.n	8008eb2 <__mdiff+0xee>
 8008ee2:	bf00      	nop
 8008ee4:	0800b684 	.word	0x0800b684
 8008ee8:	0800b695 	.word	0x0800b695

08008eec <__d2b>:
 8008eec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ef0:	460f      	mov	r7, r1
 8008ef2:	2101      	movs	r1, #1
 8008ef4:	ec59 8b10 	vmov	r8, r9, d0
 8008ef8:	4616      	mov	r6, r2
 8008efa:	f7ff fcd5 	bl	80088a8 <_Balloc>
 8008efe:	4604      	mov	r4, r0
 8008f00:	b930      	cbnz	r0, 8008f10 <__d2b+0x24>
 8008f02:	4602      	mov	r2, r0
 8008f04:	4b23      	ldr	r3, [pc, #140]	@ (8008f94 <__d2b+0xa8>)
 8008f06:	4824      	ldr	r0, [pc, #144]	@ (8008f98 <__d2b+0xac>)
 8008f08:	f240 310f 	movw	r1, #783	@ 0x30f
 8008f0c:	f000 fa5a 	bl	80093c4 <__assert_func>
 8008f10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f18:	b10d      	cbz	r5, 8008f1e <__d2b+0x32>
 8008f1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f1e:	9301      	str	r3, [sp, #4]
 8008f20:	f1b8 0300 	subs.w	r3, r8, #0
 8008f24:	d023      	beq.n	8008f6e <__d2b+0x82>
 8008f26:	4668      	mov	r0, sp
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	f7ff fd84 	bl	8008a36 <__lo0bits>
 8008f2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f32:	b1d0      	cbz	r0, 8008f6a <__d2b+0x7e>
 8008f34:	f1c0 0320 	rsb	r3, r0, #32
 8008f38:	fa02 f303 	lsl.w	r3, r2, r3
 8008f3c:	430b      	orrs	r3, r1
 8008f3e:	40c2      	lsrs	r2, r0
 8008f40:	6163      	str	r3, [r4, #20]
 8008f42:	9201      	str	r2, [sp, #4]
 8008f44:	9b01      	ldr	r3, [sp, #4]
 8008f46:	61a3      	str	r3, [r4, #24]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	bf0c      	ite	eq
 8008f4c:	2201      	moveq	r2, #1
 8008f4e:	2202      	movne	r2, #2
 8008f50:	6122      	str	r2, [r4, #16]
 8008f52:	b1a5      	cbz	r5, 8008f7e <__d2b+0x92>
 8008f54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008f58:	4405      	add	r5, r0
 8008f5a:	603d      	str	r5, [r7, #0]
 8008f5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008f60:	6030      	str	r0, [r6, #0]
 8008f62:	4620      	mov	r0, r4
 8008f64:	b003      	add	sp, #12
 8008f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f6a:	6161      	str	r1, [r4, #20]
 8008f6c:	e7ea      	b.n	8008f44 <__d2b+0x58>
 8008f6e:	a801      	add	r0, sp, #4
 8008f70:	f7ff fd61 	bl	8008a36 <__lo0bits>
 8008f74:	9b01      	ldr	r3, [sp, #4]
 8008f76:	6163      	str	r3, [r4, #20]
 8008f78:	3020      	adds	r0, #32
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	e7e8      	b.n	8008f50 <__d2b+0x64>
 8008f7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008f86:	6038      	str	r0, [r7, #0]
 8008f88:	6918      	ldr	r0, [r3, #16]
 8008f8a:	f7ff fd35 	bl	80089f8 <__hi0bits>
 8008f8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f92:	e7e5      	b.n	8008f60 <__d2b+0x74>
 8008f94:	0800b684 	.word	0x0800b684
 8008f98:	0800b695 	.word	0x0800b695

08008f9c <__ssputs_r>:
 8008f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa0:	688e      	ldr	r6, [r1, #8]
 8008fa2:	461f      	mov	r7, r3
 8008fa4:	42be      	cmp	r6, r7
 8008fa6:	680b      	ldr	r3, [r1, #0]
 8008fa8:	4682      	mov	sl, r0
 8008faa:	460c      	mov	r4, r1
 8008fac:	4690      	mov	r8, r2
 8008fae:	d82d      	bhi.n	800900c <__ssputs_r+0x70>
 8008fb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008fb8:	d026      	beq.n	8009008 <__ssputs_r+0x6c>
 8008fba:	6965      	ldr	r5, [r4, #20]
 8008fbc:	6909      	ldr	r1, [r1, #16]
 8008fbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fc2:	eba3 0901 	sub.w	r9, r3, r1
 8008fc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fca:	1c7b      	adds	r3, r7, #1
 8008fcc:	444b      	add	r3, r9
 8008fce:	106d      	asrs	r5, r5, #1
 8008fd0:	429d      	cmp	r5, r3
 8008fd2:	bf38      	it	cc
 8008fd4:	461d      	movcc	r5, r3
 8008fd6:	0553      	lsls	r3, r2, #21
 8008fd8:	d527      	bpl.n	800902a <__ssputs_r+0x8e>
 8008fda:	4629      	mov	r1, r5
 8008fdc:	f7ff fbd8 	bl	8008790 <_malloc_r>
 8008fe0:	4606      	mov	r6, r0
 8008fe2:	b360      	cbz	r0, 800903e <__ssputs_r+0xa2>
 8008fe4:	6921      	ldr	r1, [r4, #16]
 8008fe6:	464a      	mov	r2, r9
 8008fe8:	f7fe fcf7 	bl	80079da <memcpy>
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ff6:	81a3      	strh	r3, [r4, #12]
 8008ff8:	6126      	str	r6, [r4, #16]
 8008ffa:	6165      	str	r5, [r4, #20]
 8008ffc:	444e      	add	r6, r9
 8008ffe:	eba5 0509 	sub.w	r5, r5, r9
 8009002:	6026      	str	r6, [r4, #0]
 8009004:	60a5      	str	r5, [r4, #8]
 8009006:	463e      	mov	r6, r7
 8009008:	42be      	cmp	r6, r7
 800900a:	d900      	bls.n	800900e <__ssputs_r+0x72>
 800900c:	463e      	mov	r6, r7
 800900e:	6820      	ldr	r0, [r4, #0]
 8009010:	4632      	mov	r2, r6
 8009012:	4641      	mov	r1, r8
 8009014:	f7fe fc47 	bl	80078a6 <memmove>
 8009018:	68a3      	ldr	r3, [r4, #8]
 800901a:	1b9b      	subs	r3, r3, r6
 800901c:	60a3      	str	r3, [r4, #8]
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	4433      	add	r3, r6
 8009022:	6023      	str	r3, [r4, #0]
 8009024:	2000      	movs	r0, #0
 8009026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800902a:	462a      	mov	r2, r5
 800902c:	f000 fa0e 	bl	800944c <_realloc_r>
 8009030:	4606      	mov	r6, r0
 8009032:	2800      	cmp	r0, #0
 8009034:	d1e0      	bne.n	8008ff8 <__ssputs_r+0x5c>
 8009036:	6921      	ldr	r1, [r4, #16]
 8009038:	4650      	mov	r0, sl
 800903a:	f7ff fb35 	bl	80086a8 <_free_r>
 800903e:	230c      	movs	r3, #12
 8009040:	f8ca 3000 	str.w	r3, [sl]
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	f04f 30ff 	mov.w	r0, #4294967295
 8009050:	e7e9      	b.n	8009026 <__ssputs_r+0x8a>
	...

08009054 <_svfiprintf_r>:
 8009054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009058:	4698      	mov	r8, r3
 800905a:	898b      	ldrh	r3, [r1, #12]
 800905c:	061b      	lsls	r3, r3, #24
 800905e:	b09d      	sub	sp, #116	@ 0x74
 8009060:	4607      	mov	r7, r0
 8009062:	460d      	mov	r5, r1
 8009064:	4614      	mov	r4, r2
 8009066:	d510      	bpl.n	800908a <_svfiprintf_r+0x36>
 8009068:	690b      	ldr	r3, [r1, #16]
 800906a:	b973      	cbnz	r3, 800908a <_svfiprintf_r+0x36>
 800906c:	2140      	movs	r1, #64	@ 0x40
 800906e:	f7ff fb8f 	bl	8008790 <_malloc_r>
 8009072:	6028      	str	r0, [r5, #0]
 8009074:	6128      	str	r0, [r5, #16]
 8009076:	b930      	cbnz	r0, 8009086 <_svfiprintf_r+0x32>
 8009078:	230c      	movs	r3, #12
 800907a:	603b      	str	r3, [r7, #0]
 800907c:	f04f 30ff 	mov.w	r0, #4294967295
 8009080:	b01d      	add	sp, #116	@ 0x74
 8009082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009086:	2340      	movs	r3, #64	@ 0x40
 8009088:	616b      	str	r3, [r5, #20]
 800908a:	2300      	movs	r3, #0
 800908c:	9309      	str	r3, [sp, #36]	@ 0x24
 800908e:	2320      	movs	r3, #32
 8009090:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009094:	f8cd 800c 	str.w	r8, [sp, #12]
 8009098:	2330      	movs	r3, #48	@ 0x30
 800909a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009238 <_svfiprintf_r+0x1e4>
 800909e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090a2:	f04f 0901 	mov.w	r9, #1
 80090a6:	4623      	mov	r3, r4
 80090a8:	469a      	mov	sl, r3
 80090aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ae:	b10a      	cbz	r2, 80090b4 <_svfiprintf_r+0x60>
 80090b0:	2a25      	cmp	r2, #37	@ 0x25
 80090b2:	d1f9      	bne.n	80090a8 <_svfiprintf_r+0x54>
 80090b4:	ebba 0b04 	subs.w	fp, sl, r4
 80090b8:	d00b      	beq.n	80090d2 <_svfiprintf_r+0x7e>
 80090ba:	465b      	mov	r3, fp
 80090bc:	4622      	mov	r2, r4
 80090be:	4629      	mov	r1, r5
 80090c0:	4638      	mov	r0, r7
 80090c2:	f7ff ff6b 	bl	8008f9c <__ssputs_r>
 80090c6:	3001      	adds	r0, #1
 80090c8:	f000 80a7 	beq.w	800921a <_svfiprintf_r+0x1c6>
 80090cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090ce:	445a      	add	r2, fp
 80090d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80090d2:	f89a 3000 	ldrb.w	r3, [sl]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 809f 	beq.w	800921a <_svfiprintf_r+0x1c6>
 80090dc:	2300      	movs	r3, #0
 80090de:	f04f 32ff 	mov.w	r2, #4294967295
 80090e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090e6:	f10a 0a01 	add.w	sl, sl, #1
 80090ea:	9304      	str	r3, [sp, #16]
 80090ec:	9307      	str	r3, [sp, #28]
 80090ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80090f4:	4654      	mov	r4, sl
 80090f6:	2205      	movs	r2, #5
 80090f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090fc:	484e      	ldr	r0, [pc, #312]	@ (8009238 <_svfiprintf_r+0x1e4>)
 80090fe:	f7f7 f88f 	bl	8000220 <memchr>
 8009102:	9a04      	ldr	r2, [sp, #16]
 8009104:	b9d8      	cbnz	r0, 800913e <_svfiprintf_r+0xea>
 8009106:	06d0      	lsls	r0, r2, #27
 8009108:	bf44      	itt	mi
 800910a:	2320      	movmi	r3, #32
 800910c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009110:	0711      	lsls	r1, r2, #28
 8009112:	bf44      	itt	mi
 8009114:	232b      	movmi	r3, #43	@ 0x2b
 8009116:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800911a:	f89a 3000 	ldrb.w	r3, [sl]
 800911e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009120:	d015      	beq.n	800914e <_svfiprintf_r+0xfa>
 8009122:	9a07      	ldr	r2, [sp, #28]
 8009124:	4654      	mov	r4, sl
 8009126:	2000      	movs	r0, #0
 8009128:	f04f 0c0a 	mov.w	ip, #10
 800912c:	4621      	mov	r1, r4
 800912e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009132:	3b30      	subs	r3, #48	@ 0x30
 8009134:	2b09      	cmp	r3, #9
 8009136:	d94b      	bls.n	80091d0 <_svfiprintf_r+0x17c>
 8009138:	b1b0      	cbz	r0, 8009168 <_svfiprintf_r+0x114>
 800913a:	9207      	str	r2, [sp, #28]
 800913c:	e014      	b.n	8009168 <_svfiprintf_r+0x114>
 800913e:	eba0 0308 	sub.w	r3, r0, r8
 8009142:	fa09 f303 	lsl.w	r3, r9, r3
 8009146:	4313      	orrs	r3, r2
 8009148:	9304      	str	r3, [sp, #16]
 800914a:	46a2      	mov	sl, r4
 800914c:	e7d2      	b.n	80090f4 <_svfiprintf_r+0xa0>
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	1d19      	adds	r1, r3, #4
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	9103      	str	r1, [sp, #12]
 8009156:	2b00      	cmp	r3, #0
 8009158:	bfbb      	ittet	lt
 800915a:	425b      	neglt	r3, r3
 800915c:	f042 0202 	orrlt.w	r2, r2, #2
 8009160:	9307      	strge	r3, [sp, #28]
 8009162:	9307      	strlt	r3, [sp, #28]
 8009164:	bfb8      	it	lt
 8009166:	9204      	strlt	r2, [sp, #16]
 8009168:	7823      	ldrb	r3, [r4, #0]
 800916a:	2b2e      	cmp	r3, #46	@ 0x2e
 800916c:	d10a      	bne.n	8009184 <_svfiprintf_r+0x130>
 800916e:	7863      	ldrb	r3, [r4, #1]
 8009170:	2b2a      	cmp	r3, #42	@ 0x2a
 8009172:	d132      	bne.n	80091da <_svfiprintf_r+0x186>
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	1d1a      	adds	r2, r3, #4
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	9203      	str	r2, [sp, #12]
 800917c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009180:	3402      	adds	r4, #2
 8009182:	9305      	str	r3, [sp, #20]
 8009184:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009248 <_svfiprintf_r+0x1f4>
 8009188:	7821      	ldrb	r1, [r4, #0]
 800918a:	2203      	movs	r2, #3
 800918c:	4650      	mov	r0, sl
 800918e:	f7f7 f847 	bl	8000220 <memchr>
 8009192:	b138      	cbz	r0, 80091a4 <_svfiprintf_r+0x150>
 8009194:	9b04      	ldr	r3, [sp, #16]
 8009196:	eba0 000a 	sub.w	r0, r0, sl
 800919a:	2240      	movs	r2, #64	@ 0x40
 800919c:	4082      	lsls	r2, r0
 800919e:	4313      	orrs	r3, r2
 80091a0:	3401      	adds	r4, #1
 80091a2:	9304      	str	r3, [sp, #16]
 80091a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a8:	4824      	ldr	r0, [pc, #144]	@ (800923c <_svfiprintf_r+0x1e8>)
 80091aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091ae:	2206      	movs	r2, #6
 80091b0:	f7f7 f836 	bl	8000220 <memchr>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	d036      	beq.n	8009226 <_svfiprintf_r+0x1d2>
 80091b8:	4b21      	ldr	r3, [pc, #132]	@ (8009240 <_svfiprintf_r+0x1ec>)
 80091ba:	bb1b      	cbnz	r3, 8009204 <_svfiprintf_r+0x1b0>
 80091bc:	9b03      	ldr	r3, [sp, #12]
 80091be:	3307      	adds	r3, #7
 80091c0:	f023 0307 	bic.w	r3, r3, #7
 80091c4:	3308      	adds	r3, #8
 80091c6:	9303      	str	r3, [sp, #12]
 80091c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ca:	4433      	add	r3, r6
 80091cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80091ce:	e76a      	b.n	80090a6 <_svfiprintf_r+0x52>
 80091d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80091d4:	460c      	mov	r4, r1
 80091d6:	2001      	movs	r0, #1
 80091d8:	e7a8      	b.n	800912c <_svfiprintf_r+0xd8>
 80091da:	2300      	movs	r3, #0
 80091dc:	3401      	adds	r4, #1
 80091de:	9305      	str	r3, [sp, #20]
 80091e0:	4619      	mov	r1, r3
 80091e2:	f04f 0c0a 	mov.w	ip, #10
 80091e6:	4620      	mov	r0, r4
 80091e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ec:	3a30      	subs	r2, #48	@ 0x30
 80091ee:	2a09      	cmp	r2, #9
 80091f0:	d903      	bls.n	80091fa <_svfiprintf_r+0x1a6>
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0c6      	beq.n	8009184 <_svfiprintf_r+0x130>
 80091f6:	9105      	str	r1, [sp, #20]
 80091f8:	e7c4      	b.n	8009184 <_svfiprintf_r+0x130>
 80091fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80091fe:	4604      	mov	r4, r0
 8009200:	2301      	movs	r3, #1
 8009202:	e7f0      	b.n	80091e6 <_svfiprintf_r+0x192>
 8009204:	ab03      	add	r3, sp, #12
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	462a      	mov	r2, r5
 800920a:	4b0e      	ldr	r3, [pc, #56]	@ (8009244 <_svfiprintf_r+0x1f0>)
 800920c:	a904      	add	r1, sp, #16
 800920e:	4638      	mov	r0, r7
 8009210:	f7fd fe58 	bl	8006ec4 <_printf_float>
 8009214:	1c42      	adds	r2, r0, #1
 8009216:	4606      	mov	r6, r0
 8009218:	d1d6      	bne.n	80091c8 <_svfiprintf_r+0x174>
 800921a:	89ab      	ldrh	r3, [r5, #12]
 800921c:	065b      	lsls	r3, r3, #25
 800921e:	f53f af2d 	bmi.w	800907c <_svfiprintf_r+0x28>
 8009222:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009224:	e72c      	b.n	8009080 <_svfiprintf_r+0x2c>
 8009226:	ab03      	add	r3, sp, #12
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	462a      	mov	r2, r5
 800922c:	4b05      	ldr	r3, [pc, #20]	@ (8009244 <_svfiprintf_r+0x1f0>)
 800922e:	a904      	add	r1, sp, #16
 8009230:	4638      	mov	r0, r7
 8009232:	f7fe f8df 	bl	80073f4 <_printf_i>
 8009236:	e7ed      	b.n	8009214 <_svfiprintf_r+0x1c0>
 8009238:	0800b6ee 	.word	0x0800b6ee
 800923c:	0800b6f8 	.word	0x0800b6f8
 8009240:	08006ec5 	.word	0x08006ec5
 8009244:	08008f9d 	.word	0x08008f9d
 8009248:	0800b6f4 	.word	0x0800b6f4

0800924c <__sflush_r>:
 800924c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009254:	0716      	lsls	r6, r2, #28
 8009256:	4605      	mov	r5, r0
 8009258:	460c      	mov	r4, r1
 800925a:	d454      	bmi.n	8009306 <__sflush_r+0xba>
 800925c:	684b      	ldr	r3, [r1, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	dc02      	bgt.n	8009268 <__sflush_r+0x1c>
 8009262:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009264:	2b00      	cmp	r3, #0
 8009266:	dd48      	ble.n	80092fa <__sflush_r+0xae>
 8009268:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800926a:	2e00      	cmp	r6, #0
 800926c:	d045      	beq.n	80092fa <__sflush_r+0xae>
 800926e:	2300      	movs	r3, #0
 8009270:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009274:	682f      	ldr	r7, [r5, #0]
 8009276:	6a21      	ldr	r1, [r4, #32]
 8009278:	602b      	str	r3, [r5, #0]
 800927a:	d030      	beq.n	80092de <__sflush_r+0x92>
 800927c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	0759      	lsls	r1, r3, #29
 8009282:	d505      	bpl.n	8009290 <__sflush_r+0x44>
 8009284:	6863      	ldr	r3, [r4, #4]
 8009286:	1ad2      	subs	r2, r2, r3
 8009288:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800928a:	b10b      	cbz	r3, 8009290 <__sflush_r+0x44>
 800928c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800928e:	1ad2      	subs	r2, r2, r3
 8009290:	2300      	movs	r3, #0
 8009292:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009294:	6a21      	ldr	r1, [r4, #32]
 8009296:	4628      	mov	r0, r5
 8009298:	47b0      	blx	r6
 800929a:	1c43      	adds	r3, r0, #1
 800929c:	89a3      	ldrh	r3, [r4, #12]
 800929e:	d106      	bne.n	80092ae <__sflush_r+0x62>
 80092a0:	6829      	ldr	r1, [r5, #0]
 80092a2:	291d      	cmp	r1, #29
 80092a4:	d82b      	bhi.n	80092fe <__sflush_r+0xb2>
 80092a6:	4a2a      	ldr	r2, [pc, #168]	@ (8009350 <__sflush_r+0x104>)
 80092a8:	40ca      	lsrs	r2, r1
 80092aa:	07d6      	lsls	r6, r2, #31
 80092ac:	d527      	bpl.n	80092fe <__sflush_r+0xb2>
 80092ae:	2200      	movs	r2, #0
 80092b0:	6062      	str	r2, [r4, #4]
 80092b2:	04d9      	lsls	r1, r3, #19
 80092b4:	6922      	ldr	r2, [r4, #16]
 80092b6:	6022      	str	r2, [r4, #0]
 80092b8:	d504      	bpl.n	80092c4 <__sflush_r+0x78>
 80092ba:	1c42      	adds	r2, r0, #1
 80092bc:	d101      	bne.n	80092c2 <__sflush_r+0x76>
 80092be:	682b      	ldr	r3, [r5, #0]
 80092c0:	b903      	cbnz	r3, 80092c4 <__sflush_r+0x78>
 80092c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80092c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092c6:	602f      	str	r7, [r5, #0]
 80092c8:	b1b9      	cbz	r1, 80092fa <__sflush_r+0xae>
 80092ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092ce:	4299      	cmp	r1, r3
 80092d0:	d002      	beq.n	80092d8 <__sflush_r+0x8c>
 80092d2:	4628      	mov	r0, r5
 80092d4:	f7ff f9e8 	bl	80086a8 <_free_r>
 80092d8:	2300      	movs	r3, #0
 80092da:	6363      	str	r3, [r4, #52]	@ 0x34
 80092dc:	e00d      	b.n	80092fa <__sflush_r+0xae>
 80092de:	2301      	movs	r3, #1
 80092e0:	4628      	mov	r0, r5
 80092e2:	47b0      	blx	r6
 80092e4:	4602      	mov	r2, r0
 80092e6:	1c50      	adds	r0, r2, #1
 80092e8:	d1c9      	bne.n	800927e <__sflush_r+0x32>
 80092ea:	682b      	ldr	r3, [r5, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d0c6      	beq.n	800927e <__sflush_r+0x32>
 80092f0:	2b1d      	cmp	r3, #29
 80092f2:	d001      	beq.n	80092f8 <__sflush_r+0xac>
 80092f4:	2b16      	cmp	r3, #22
 80092f6:	d11e      	bne.n	8009336 <__sflush_r+0xea>
 80092f8:	602f      	str	r7, [r5, #0]
 80092fa:	2000      	movs	r0, #0
 80092fc:	e022      	b.n	8009344 <__sflush_r+0xf8>
 80092fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009302:	b21b      	sxth	r3, r3
 8009304:	e01b      	b.n	800933e <__sflush_r+0xf2>
 8009306:	690f      	ldr	r7, [r1, #16]
 8009308:	2f00      	cmp	r7, #0
 800930a:	d0f6      	beq.n	80092fa <__sflush_r+0xae>
 800930c:	0793      	lsls	r3, r2, #30
 800930e:	680e      	ldr	r6, [r1, #0]
 8009310:	bf08      	it	eq
 8009312:	694b      	ldreq	r3, [r1, #20]
 8009314:	600f      	str	r7, [r1, #0]
 8009316:	bf18      	it	ne
 8009318:	2300      	movne	r3, #0
 800931a:	eba6 0807 	sub.w	r8, r6, r7
 800931e:	608b      	str	r3, [r1, #8]
 8009320:	f1b8 0f00 	cmp.w	r8, #0
 8009324:	dde9      	ble.n	80092fa <__sflush_r+0xae>
 8009326:	6a21      	ldr	r1, [r4, #32]
 8009328:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800932a:	4643      	mov	r3, r8
 800932c:	463a      	mov	r2, r7
 800932e:	4628      	mov	r0, r5
 8009330:	47b0      	blx	r6
 8009332:	2800      	cmp	r0, #0
 8009334:	dc08      	bgt.n	8009348 <__sflush_r+0xfc>
 8009336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800933a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800933e:	81a3      	strh	r3, [r4, #12]
 8009340:	f04f 30ff 	mov.w	r0, #4294967295
 8009344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009348:	4407      	add	r7, r0
 800934a:	eba8 0800 	sub.w	r8, r8, r0
 800934e:	e7e7      	b.n	8009320 <__sflush_r+0xd4>
 8009350:	20400001 	.word	0x20400001

08009354 <_fflush_r>:
 8009354:	b538      	push	{r3, r4, r5, lr}
 8009356:	690b      	ldr	r3, [r1, #16]
 8009358:	4605      	mov	r5, r0
 800935a:	460c      	mov	r4, r1
 800935c:	b913      	cbnz	r3, 8009364 <_fflush_r+0x10>
 800935e:	2500      	movs	r5, #0
 8009360:	4628      	mov	r0, r5
 8009362:	bd38      	pop	{r3, r4, r5, pc}
 8009364:	b118      	cbz	r0, 800936e <_fflush_r+0x1a>
 8009366:	6a03      	ldr	r3, [r0, #32]
 8009368:	b90b      	cbnz	r3, 800936e <_fflush_r+0x1a>
 800936a:	f7fe f9ed 	bl	8007748 <__sinit>
 800936e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d0f3      	beq.n	800935e <_fflush_r+0xa>
 8009376:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009378:	07d0      	lsls	r0, r2, #31
 800937a:	d404      	bmi.n	8009386 <_fflush_r+0x32>
 800937c:	0599      	lsls	r1, r3, #22
 800937e:	d402      	bmi.n	8009386 <_fflush_r+0x32>
 8009380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009382:	f7fe fb28 	bl	80079d6 <__retarget_lock_acquire_recursive>
 8009386:	4628      	mov	r0, r5
 8009388:	4621      	mov	r1, r4
 800938a:	f7ff ff5f 	bl	800924c <__sflush_r>
 800938e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009390:	07da      	lsls	r2, r3, #31
 8009392:	4605      	mov	r5, r0
 8009394:	d4e4      	bmi.n	8009360 <_fflush_r+0xc>
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	059b      	lsls	r3, r3, #22
 800939a:	d4e1      	bmi.n	8009360 <_fflush_r+0xc>
 800939c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800939e:	f7fe fb1b 	bl	80079d8 <__retarget_lock_release_recursive>
 80093a2:	e7dd      	b.n	8009360 <_fflush_r+0xc>

080093a4 <_sbrk_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	4d06      	ldr	r5, [pc, #24]	@ (80093c0 <_sbrk_r+0x1c>)
 80093a8:	2300      	movs	r3, #0
 80093aa:	4604      	mov	r4, r0
 80093ac:	4608      	mov	r0, r1
 80093ae:	602b      	str	r3, [r5, #0]
 80093b0:	f7f8 fc58 	bl	8001c64 <_sbrk>
 80093b4:	1c43      	adds	r3, r0, #1
 80093b6:	d102      	bne.n	80093be <_sbrk_r+0x1a>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	b103      	cbz	r3, 80093be <_sbrk_r+0x1a>
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	bd38      	pop	{r3, r4, r5, pc}
 80093c0:	20000a0c 	.word	0x20000a0c

080093c4 <__assert_func>:
 80093c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093c6:	4614      	mov	r4, r2
 80093c8:	461a      	mov	r2, r3
 80093ca:	4b09      	ldr	r3, [pc, #36]	@ (80093f0 <__assert_func+0x2c>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4605      	mov	r5, r0
 80093d0:	68d8      	ldr	r0, [r3, #12]
 80093d2:	b14c      	cbz	r4, 80093e8 <__assert_func+0x24>
 80093d4:	4b07      	ldr	r3, [pc, #28]	@ (80093f4 <__assert_func+0x30>)
 80093d6:	9100      	str	r1, [sp, #0]
 80093d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093dc:	4906      	ldr	r1, [pc, #24]	@ (80093f8 <__assert_func+0x34>)
 80093de:	462b      	mov	r3, r5
 80093e0:	f000 f870 	bl	80094c4 <fiprintf>
 80093e4:	f000 f880 	bl	80094e8 <abort>
 80093e8:	4b04      	ldr	r3, [pc, #16]	@ (80093fc <__assert_func+0x38>)
 80093ea:	461c      	mov	r4, r3
 80093ec:	e7f3      	b.n	80093d6 <__assert_func+0x12>
 80093ee:	bf00      	nop
 80093f0:	2000002c 	.word	0x2000002c
 80093f4:	0800b709 	.word	0x0800b709
 80093f8:	0800b716 	.word	0x0800b716
 80093fc:	0800b744 	.word	0x0800b744

08009400 <_calloc_r>:
 8009400:	b570      	push	{r4, r5, r6, lr}
 8009402:	fba1 5402 	umull	r5, r4, r1, r2
 8009406:	b934      	cbnz	r4, 8009416 <_calloc_r+0x16>
 8009408:	4629      	mov	r1, r5
 800940a:	f7ff f9c1 	bl	8008790 <_malloc_r>
 800940e:	4606      	mov	r6, r0
 8009410:	b928      	cbnz	r0, 800941e <_calloc_r+0x1e>
 8009412:	4630      	mov	r0, r6
 8009414:	bd70      	pop	{r4, r5, r6, pc}
 8009416:	220c      	movs	r2, #12
 8009418:	6002      	str	r2, [r0, #0]
 800941a:	2600      	movs	r6, #0
 800941c:	e7f9      	b.n	8009412 <_calloc_r+0x12>
 800941e:	462a      	mov	r2, r5
 8009420:	4621      	mov	r1, r4
 8009422:	f7fe fa5a 	bl	80078da <memset>
 8009426:	e7f4      	b.n	8009412 <_calloc_r+0x12>

08009428 <__ascii_mbtowc>:
 8009428:	b082      	sub	sp, #8
 800942a:	b901      	cbnz	r1, 800942e <__ascii_mbtowc+0x6>
 800942c:	a901      	add	r1, sp, #4
 800942e:	b142      	cbz	r2, 8009442 <__ascii_mbtowc+0x1a>
 8009430:	b14b      	cbz	r3, 8009446 <__ascii_mbtowc+0x1e>
 8009432:	7813      	ldrb	r3, [r2, #0]
 8009434:	600b      	str	r3, [r1, #0]
 8009436:	7812      	ldrb	r2, [r2, #0]
 8009438:	1e10      	subs	r0, r2, #0
 800943a:	bf18      	it	ne
 800943c:	2001      	movne	r0, #1
 800943e:	b002      	add	sp, #8
 8009440:	4770      	bx	lr
 8009442:	4610      	mov	r0, r2
 8009444:	e7fb      	b.n	800943e <__ascii_mbtowc+0x16>
 8009446:	f06f 0001 	mvn.w	r0, #1
 800944a:	e7f8      	b.n	800943e <__ascii_mbtowc+0x16>

0800944c <_realloc_r>:
 800944c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009450:	4607      	mov	r7, r0
 8009452:	4614      	mov	r4, r2
 8009454:	460d      	mov	r5, r1
 8009456:	b921      	cbnz	r1, 8009462 <_realloc_r+0x16>
 8009458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800945c:	4611      	mov	r1, r2
 800945e:	f7ff b997 	b.w	8008790 <_malloc_r>
 8009462:	b92a      	cbnz	r2, 8009470 <_realloc_r+0x24>
 8009464:	f7ff f920 	bl	80086a8 <_free_r>
 8009468:	4625      	mov	r5, r4
 800946a:	4628      	mov	r0, r5
 800946c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009470:	f000 f841 	bl	80094f6 <_malloc_usable_size_r>
 8009474:	4284      	cmp	r4, r0
 8009476:	4606      	mov	r6, r0
 8009478:	d802      	bhi.n	8009480 <_realloc_r+0x34>
 800947a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800947e:	d8f4      	bhi.n	800946a <_realloc_r+0x1e>
 8009480:	4621      	mov	r1, r4
 8009482:	4638      	mov	r0, r7
 8009484:	f7ff f984 	bl	8008790 <_malloc_r>
 8009488:	4680      	mov	r8, r0
 800948a:	b908      	cbnz	r0, 8009490 <_realloc_r+0x44>
 800948c:	4645      	mov	r5, r8
 800948e:	e7ec      	b.n	800946a <_realloc_r+0x1e>
 8009490:	42b4      	cmp	r4, r6
 8009492:	4622      	mov	r2, r4
 8009494:	4629      	mov	r1, r5
 8009496:	bf28      	it	cs
 8009498:	4632      	movcs	r2, r6
 800949a:	f7fe fa9e 	bl	80079da <memcpy>
 800949e:	4629      	mov	r1, r5
 80094a0:	4638      	mov	r0, r7
 80094a2:	f7ff f901 	bl	80086a8 <_free_r>
 80094a6:	e7f1      	b.n	800948c <_realloc_r+0x40>

080094a8 <__ascii_wctomb>:
 80094a8:	4603      	mov	r3, r0
 80094aa:	4608      	mov	r0, r1
 80094ac:	b141      	cbz	r1, 80094c0 <__ascii_wctomb+0x18>
 80094ae:	2aff      	cmp	r2, #255	@ 0xff
 80094b0:	d904      	bls.n	80094bc <__ascii_wctomb+0x14>
 80094b2:	228a      	movs	r2, #138	@ 0x8a
 80094b4:	601a      	str	r2, [r3, #0]
 80094b6:	f04f 30ff 	mov.w	r0, #4294967295
 80094ba:	4770      	bx	lr
 80094bc:	700a      	strb	r2, [r1, #0]
 80094be:	2001      	movs	r0, #1
 80094c0:	4770      	bx	lr
	...

080094c4 <fiprintf>:
 80094c4:	b40e      	push	{r1, r2, r3}
 80094c6:	b503      	push	{r0, r1, lr}
 80094c8:	4601      	mov	r1, r0
 80094ca:	ab03      	add	r3, sp, #12
 80094cc:	4805      	ldr	r0, [pc, #20]	@ (80094e4 <fiprintf+0x20>)
 80094ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80094d2:	6800      	ldr	r0, [r0, #0]
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	f000 f83f 	bl	8009558 <_vfiprintf_r>
 80094da:	b002      	add	sp, #8
 80094dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80094e0:	b003      	add	sp, #12
 80094e2:	4770      	bx	lr
 80094e4:	2000002c 	.word	0x2000002c

080094e8 <abort>:
 80094e8:	b508      	push	{r3, lr}
 80094ea:	2006      	movs	r0, #6
 80094ec:	f000 fa08 	bl	8009900 <raise>
 80094f0:	2001      	movs	r0, #1
 80094f2:	f7f8 fb3f 	bl	8001b74 <_exit>

080094f6 <_malloc_usable_size_r>:
 80094f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094fa:	1f18      	subs	r0, r3, #4
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	bfbc      	itt	lt
 8009500:	580b      	ldrlt	r3, [r1, r0]
 8009502:	18c0      	addlt	r0, r0, r3
 8009504:	4770      	bx	lr

08009506 <__sfputc_r>:
 8009506:	6893      	ldr	r3, [r2, #8]
 8009508:	3b01      	subs	r3, #1
 800950a:	2b00      	cmp	r3, #0
 800950c:	b410      	push	{r4}
 800950e:	6093      	str	r3, [r2, #8]
 8009510:	da08      	bge.n	8009524 <__sfputc_r+0x1e>
 8009512:	6994      	ldr	r4, [r2, #24]
 8009514:	42a3      	cmp	r3, r4
 8009516:	db01      	blt.n	800951c <__sfputc_r+0x16>
 8009518:	290a      	cmp	r1, #10
 800951a:	d103      	bne.n	8009524 <__sfputc_r+0x1e>
 800951c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009520:	f000 b932 	b.w	8009788 <__swbuf_r>
 8009524:	6813      	ldr	r3, [r2, #0]
 8009526:	1c58      	adds	r0, r3, #1
 8009528:	6010      	str	r0, [r2, #0]
 800952a:	7019      	strb	r1, [r3, #0]
 800952c:	4608      	mov	r0, r1
 800952e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009532:	4770      	bx	lr

08009534 <__sfputs_r>:
 8009534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009536:	4606      	mov	r6, r0
 8009538:	460f      	mov	r7, r1
 800953a:	4614      	mov	r4, r2
 800953c:	18d5      	adds	r5, r2, r3
 800953e:	42ac      	cmp	r4, r5
 8009540:	d101      	bne.n	8009546 <__sfputs_r+0x12>
 8009542:	2000      	movs	r0, #0
 8009544:	e007      	b.n	8009556 <__sfputs_r+0x22>
 8009546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800954a:	463a      	mov	r2, r7
 800954c:	4630      	mov	r0, r6
 800954e:	f7ff ffda 	bl	8009506 <__sfputc_r>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	d1f3      	bne.n	800953e <__sfputs_r+0xa>
 8009556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009558 <_vfiprintf_r>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	460d      	mov	r5, r1
 800955e:	b09d      	sub	sp, #116	@ 0x74
 8009560:	4614      	mov	r4, r2
 8009562:	4698      	mov	r8, r3
 8009564:	4606      	mov	r6, r0
 8009566:	b118      	cbz	r0, 8009570 <_vfiprintf_r+0x18>
 8009568:	6a03      	ldr	r3, [r0, #32]
 800956a:	b90b      	cbnz	r3, 8009570 <_vfiprintf_r+0x18>
 800956c:	f7fe f8ec 	bl	8007748 <__sinit>
 8009570:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009572:	07d9      	lsls	r1, r3, #31
 8009574:	d405      	bmi.n	8009582 <_vfiprintf_r+0x2a>
 8009576:	89ab      	ldrh	r3, [r5, #12]
 8009578:	059a      	lsls	r2, r3, #22
 800957a:	d402      	bmi.n	8009582 <_vfiprintf_r+0x2a>
 800957c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800957e:	f7fe fa2a 	bl	80079d6 <__retarget_lock_acquire_recursive>
 8009582:	89ab      	ldrh	r3, [r5, #12]
 8009584:	071b      	lsls	r3, r3, #28
 8009586:	d501      	bpl.n	800958c <_vfiprintf_r+0x34>
 8009588:	692b      	ldr	r3, [r5, #16]
 800958a:	b99b      	cbnz	r3, 80095b4 <_vfiprintf_r+0x5c>
 800958c:	4629      	mov	r1, r5
 800958e:	4630      	mov	r0, r6
 8009590:	f000 f938 	bl	8009804 <__swsetup_r>
 8009594:	b170      	cbz	r0, 80095b4 <_vfiprintf_r+0x5c>
 8009596:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009598:	07dc      	lsls	r4, r3, #31
 800959a:	d504      	bpl.n	80095a6 <_vfiprintf_r+0x4e>
 800959c:	f04f 30ff 	mov.w	r0, #4294967295
 80095a0:	b01d      	add	sp, #116	@ 0x74
 80095a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a6:	89ab      	ldrh	r3, [r5, #12]
 80095a8:	0598      	lsls	r0, r3, #22
 80095aa:	d4f7      	bmi.n	800959c <_vfiprintf_r+0x44>
 80095ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095ae:	f7fe fa13 	bl	80079d8 <__retarget_lock_release_recursive>
 80095b2:	e7f3      	b.n	800959c <_vfiprintf_r+0x44>
 80095b4:	2300      	movs	r3, #0
 80095b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80095b8:	2320      	movs	r3, #32
 80095ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095be:	f8cd 800c 	str.w	r8, [sp, #12]
 80095c2:	2330      	movs	r3, #48	@ 0x30
 80095c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009774 <_vfiprintf_r+0x21c>
 80095c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095cc:	f04f 0901 	mov.w	r9, #1
 80095d0:	4623      	mov	r3, r4
 80095d2:	469a      	mov	sl, r3
 80095d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095d8:	b10a      	cbz	r2, 80095de <_vfiprintf_r+0x86>
 80095da:	2a25      	cmp	r2, #37	@ 0x25
 80095dc:	d1f9      	bne.n	80095d2 <_vfiprintf_r+0x7a>
 80095de:	ebba 0b04 	subs.w	fp, sl, r4
 80095e2:	d00b      	beq.n	80095fc <_vfiprintf_r+0xa4>
 80095e4:	465b      	mov	r3, fp
 80095e6:	4622      	mov	r2, r4
 80095e8:	4629      	mov	r1, r5
 80095ea:	4630      	mov	r0, r6
 80095ec:	f7ff ffa2 	bl	8009534 <__sfputs_r>
 80095f0:	3001      	adds	r0, #1
 80095f2:	f000 80a7 	beq.w	8009744 <_vfiprintf_r+0x1ec>
 80095f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095f8:	445a      	add	r2, fp
 80095fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80095fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 809f 	beq.w	8009744 <_vfiprintf_r+0x1ec>
 8009606:	2300      	movs	r3, #0
 8009608:	f04f 32ff 	mov.w	r2, #4294967295
 800960c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009610:	f10a 0a01 	add.w	sl, sl, #1
 8009614:	9304      	str	r3, [sp, #16]
 8009616:	9307      	str	r3, [sp, #28]
 8009618:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800961c:	931a      	str	r3, [sp, #104]	@ 0x68
 800961e:	4654      	mov	r4, sl
 8009620:	2205      	movs	r2, #5
 8009622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009626:	4853      	ldr	r0, [pc, #332]	@ (8009774 <_vfiprintf_r+0x21c>)
 8009628:	f7f6 fdfa 	bl	8000220 <memchr>
 800962c:	9a04      	ldr	r2, [sp, #16]
 800962e:	b9d8      	cbnz	r0, 8009668 <_vfiprintf_r+0x110>
 8009630:	06d1      	lsls	r1, r2, #27
 8009632:	bf44      	itt	mi
 8009634:	2320      	movmi	r3, #32
 8009636:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800963a:	0713      	lsls	r3, r2, #28
 800963c:	bf44      	itt	mi
 800963e:	232b      	movmi	r3, #43	@ 0x2b
 8009640:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009644:	f89a 3000 	ldrb.w	r3, [sl]
 8009648:	2b2a      	cmp	r3, #42	@ 0x2a
 800964a:	d015      	beq.n	8009678 <_vfiprintf_r+0x120>
 800964c:	9a07      	ldr	r2, [sp, #28]
 800964e:	4654      	mov	r4, sl
 8009650:	2000      	movs	r0, #0
 8009652:	f04f 0c0a 	mov.w	ip, #10
 8009656:	4621      	mov	r1, r4
 8009658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800965c:	3b30      	subs	r3, #48	@ 0x30
 800965e:	2b09      	cmp	r3, #9
 8009660:	d94b      	bls.n	80096fa <_vfiprintf_r+0x1a2>
 8009662:	b1b0      	cbz	r0, 8009692 <_vfiprintf_r+0x13a>
 8009664:	9207      	str	r2, [sp, #28]
 8009666:	e014      	b.n	8009692 <_vfiprintf_r+0x13a>
 8009668:	eba0 0308 	sub.w	r3, r0, r8
 800966c:	fa09 f303 	lsl.w	r3, r9, r3
 8009670:	4313      	orrs	r3, r2
 8009672:	9304      	str	r3, [sp, #16]
 8009674:	46a2      	mov	sl, r4
 8009676:	e7d2      	b.n	800961e <_vfiprintf_r+0xc6>
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	1d19      	adds	r1, r3, #4
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	9103      	str	r1, [sp, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	bfbb      	ittet	lt
 8009684:	425b      	neglt	r3, r3
 8009686:	f042 0202 	orrlt.w	r2, r2, #2
 800968a:	9307      	strge	r3, [sp, #28]
 800968c:	9307      	strlt	r3, [sp, #28]
 800968e:	bfb8      	it	lt
 8009690:	9204      	strlt	r2, [sp, #16]
 8009692:	7823      	ldrb	r3, [r4, #0]
 8009694:	2b2e      	cmp	r3, #46	@ 0x2e
 8009696:	d10a      	bne.n	80096ae <_vfiprintf_r+0x156>
 8009698:	7863      	ldrb	r3, [r4, #1]
 800969a:	2b2a      	cmp	r3, #42	@ 0x2a
 800969c:	d132      	bne.n	8009704 <_vfiprintf_r+0x1ac>
 800969e:	9b03      	ldr	r3, [sp, #12]
 80096a0:	1d1a      	adds	r2, r3, #4
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	9203      	str	r2, [sp, #12]
 80096a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096aa:	3402      	adds	r4, #2
 80096ac:	9305      	str	r3, [sp, #20]
 80096ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009784 <_vfiprintf_r+0x22c>
 80096b2:	7821      	ldrb	r1, [r4, #0]
 80096b4:	2203      	movs	r2, #3
 80096b6:	4650      	mov	r0, sl
 80096b8:	f7f6 fdb2 	bl	8000220 <memchr>
 80096bc:	b138      	cbz	r0, 80096ce <_vfiprintf_r+0x176>
 80096be:	9b04      	ldr	r3, [sp, #16]
 80096c0:	eba0 000a 	sub.w	r0, r0, sl
 80096c4:	2240      	movs	r2, #64	@ 0x40
 80096c6:	4082      	lsls	r2, r0
 80096c8:	4313      	orrs	r3, r2
 80096ca:	3401      	adds	r4, #1
 80096cc:	9304      	str	r3, [sp, #16]
 80096ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d2:	4829      	ldr	r0, [pc, #164]	@ (8009778 <_vfiprintf_r+0x220>)
 80096d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096d8:	2206      	movs	r2, #6
 80096da:	f7f6 fda1 	bl	8000220 <memchr>
 80096de:	2800      	cmp	r0, #0
 80096e0:	d03f      	beq.n	8009762 <_vfiprintf_r+0x20a>
 80096e2:	4b26      	ldr	r3, [pc, #152]	@ (800977c <_vfiprintf_r+0x224>)
 80096e4:	bb1b      	cbnz	r3, 800972e <_vfiprintf_r+0x1d6>
 80096e6:	9b03      	ldr	r3, [sp, #12]
 80096e8:	3307      	adds	r3, #7
 80096ea:	f023 0307 	bic.w	r3, r3, #7
 80096ee:	3308      	adds	r3, #8
 80096f0:	9303      	str	r3, [sp, #12]
 80096f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096f4:	443b      	add	r3, r7
 80096f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80096f8:	e76a      	b.n	80095d0 <_vfiprintf_r+0x78>
 80096fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80096fe:	460c      	mov	r4, r1
 8009700:	2001      	movs	r0, #1
 8009702:	e7a8      	b.n	8009656 <_vfiprintf_r+0xfe>
 8009704:	2300      	movs	r3, #0
 8009706:	3401      	adds	r4, #1
 8009708:	9305      	str	r3, [sp, #20]
 800970a:	4619      	mov	r1, r3
 800970c:	f04f 0c0a 	mov.w	ip, #10
 8009710:	4620      	mov	r0, r4
 8009712:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009716:	3a30      	subs	r2, #48	@ 0x30
 8009718:	2a09      	cmp	r2, #9
 800971a:	d903      	bls.n	8009724 <_vfiprintf_r+0x1cc>
 800971c:	2b00      	cmp	r3, #0
 800971e:	d0c6      	beq.n	80096ae <_vfiprintf_r+0x156>
 8009720:	9105      	str	r1, [sp, #20]
 8009722:	e7c4      	b.n	80096ae <_vfiprintf_r+0x156>
 8009724:	fb0c 2101 	mla	r1, ip, r1, r2
 8009728:	4604      	mov	r4, r0
 800972a:	2301      	movs	r3, #1
 800972c:	e7f0      	b.n	8009710 <_vfiprintf_r+0x1b8>
 800972e:	ab03      	add	r3, sp, #12
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	462a      	mov	r2, r5
 8009734:	4b12      	ldr	r3, [pc, #72]	@ (8009780 <_vfiprintf_r+0x228>)
 8009736:	a904      	add	r1, sp, #16
 8009738:	4630      	mov	r0, r6
 800973a:	f7fd fbc3 	bl	8006ec4 <_printf_float>
 800973e:	4607      	mov	r7, r0
 8009740:	1c78      	adds	r0, r7, #1
 8009742:	d1d6      	bne.n	80096f2 <_vfiprintf_r+0x19a>
 8009744:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009746:	07d9      	lsls	r1, r3, #31
 8009748:	d405      	bmi.n	8009756 <_vfiprintf_r+0x1fe>
 800974a:	89ab      	ldrh	r3, [r5, #12]
 800974c:	059a      	lsls	r2, r3, #22
 800974e:	d402      	bmi.n	8009756 <_vfiprintf_r+0x1fe>
 8009750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009752:	f7fe f941 	bl	80079d8 <__retarget_lock_release_recursive>
 8009756:	89ab      	ldrh	r3, [r5, #12]
 8009758:	065b      	lsls	r3, r3, #25
 800975a:	f53f af1f 	bmi.w	800959c <_vfiprintf_r+0x44>
 800975e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009760:	e71e      	b.n	80095a0 <_vfiprintf_r+0x48>
 8009762:	ab03      	add	r3, sp, #12
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	462a      	mov	r2, r5
 8009768:	4b05      	ldr	r3, [pc, #20]	@ (8009780 <_vfiprintf_r+0x228>)
 800976a:	a904      	add	r1, sp, #16
 800976c:	4630      	mov	r0, r6
 800976e:	f7fd fe41 	bl	80073f4 <_printf_i>
 8009772:	e7e4      	b.n	800973e <_vfiprintf_r+0x1e6>
 8009774:	0800b6ee 	.word	0x0800b6ee
 8009778:	0800b6f8 	.word	0x0800b6f8
 800977c:	08006ec5 	.word	0x08006ec5
 8009780:	08009535 	.word	0x08009535
 8009784:	0800b6f4 	.word	0x0800b6f4

08009788 <__swbuf_r>:
 8009788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978a:	460e      	mov	r6, r1
 800978c:	4614      	mov	r4, r2
 800978e:	4605      	mov	r5, r0
 8009790:	b118      	cbz	r0, 800979a <__swbuf_r+0x12>
 8009792:	6a03      	ldr	r3, [r0, #32]
 8009794:	b90b      	cbnz	r3, 800979a <__swbuf_r+0x12>
 8009796:	f7fd ffd7 	bl	8007748 <__sinit>
 800979a:	69a3      	ldr	r3, [r4, #24]
 800979c:	60a3      	str	r3, [r4, #8]
 800979e:	89a3      	ldrh	r3, [r4, #12]
 80097a0:	071a      	lsls	r2, r3, #28
 80097a2:	d501      	bpl.n	80097a8 <__swbuf_r+0x20>
 80097a4:	6923      	ldr	r3, [r4, #16]
 80097a6:	b943      	cbnz	r3, 80097ba <__swbuf_r+0x32>
 80097a8:	4621      	mov	r1, r4
 80097aa:	4628      	mov	r0, r5
 80097ac:	f000 f82a 	bl	8009804 <__swsetup_r>
 80097b0:	b118      	cbz	r0, 80097ba <__swbuf_r+0x32>
 80097b2:	f04f 37ff 	mov.w	r7, #4294967295
 80097b6:	4638      	mov	r0, r7
 80097b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097ba:	6823      	ldr	r3, [r4, #0]
 80097bc:	6922      	ldr	r2, [r4, #16]
 80097be:	1a98      	subs	r0, r3, r2
 80097c0:	6963      	ldr	r3, [r4, #20]
 80097c2:	b2f6      	uxtb	r6, r6
 80097c4:	4283      	cmp	r3, r0
 80097c6:	4637      	mov	r7, r6
 80097c8:	dc05      	bgt.n	80097d6 <__swbuf_r+0x4e>
 80097ca:	4621      	mov	r1, r4
 80097cc:	4628      	mov	r0, r5
 80097ce:	f7ff fdc1 	bl	8009354 <_fflush_r>
 80097d2:	2800      	cmp	r0, #0
 80097d4:	d1ed      	bne.n	80097b2 <__swbuf_r+0x2a>
 80097d6:	68a3      	ldr	r3, [r4, #8]
 80097d8:	3b01      	subs	r3, #1
 80097da:	60a3      	str	r3, [r4, #8]
 80097dc:	6823      	ldr	r3, [r4, #0]
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	6022      	str	r2, [r4, #0]
 80097e2:	701e      	strb	r6, [r3, #0]
 80097e4:	6962      	ldr	r2, [r4, #20]
 80097e6:	1c43      	adds	r3, r0, #1
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d004      	beq.n	80097f6 <__swbuf_r+0x6e>
 80097ec:	89a3      	ldrh	r3, [r4, #12]
 80097ee:	07db      	lsls	r3, r3, #31
 80097f0:	d5e1      	bpl.n	80097b6 <__swbuf_r+0x2e>
 80097f2:	2e0a      	cmp	r6, #10
 80097f4:	d1df      	bne.n	80097b6 <__swbuf_r+0x2e>
 80097f6:	4621      	mov	r1, r4
 80097f8:	4628      	mov	r0, r5
 80097fa:	f7ff fdab 	bl	8009354 <_fflush_r>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d0d9      	beq.n	80097b6 <__swbuf_r+0x2e>
 8009802:	e7d6      	b.n	80097b2 <__swbuf_r+0x2a>

08009804 <__swsetup_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	4b29      	ldr	r3, [pc, #164]	@ (80098ac <__swsetup_r+0xa8>)
 8009808:	4605      	mov	r5, r0
 800980a:	6818      	ldr	r0, [r3, #0]
 800980c:	460c      	mov	r4, r1
 800980e:	b118      	cbz	r0, 8009818 <__swsetup_r+0x14>
 8009810:	6a03      	ldr	r3, [r0, #32]
 8009812:	b90b      	cbnz	r3, 8009818 <__swsetup_r+0x14>
 8009814:	f7fd ff98 	bl	8007748 <__sinit>
 8009818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800981c:	0719      	lsls	r1, r3, #28
 800981e:	d422      	bmi.n	8009866 <__swsetup_r+0x62>
 8009820:	06da      	lsls	r2, r3, #27
 8009822:	d407      	bmi.n	8009834 <__swsetup_r+0x30>
 8009824:	2209      	movs	r2, #9
 8009826:	602a      	str	r2, [r5, #0]
 8009828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800982c:	81a3      	strh	r3, [r4, #12]
 800982e:	f04f 30ff 	mov.w	r0, #4294967295
 8009832:	e033      	b.n	800989c <__swsetup_r+0x98>
 8009834:	0758      	lsls	r0, r3, #29
 8009836:	d512      	bpl.n	800985e <__swsetup_r+0x5a>
 8009838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800983a:	b141      	cbz	r1, 800984e <__swsetup_r+0x4a>
 800983c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009840:	4299      	cmp	r1, r3
 8009842:	d002      	beq.n	800984a <__swsetup_r+0x46>
 8009844:	4628      	mov	r0, r5
 8009846:	f7fe ff2f 	bl	80086a8 <_free_r>
 800984a:	2300      	movs	r3, #0
 800984c:	6363      	str	r3, [r4, #52]	@ 0x34
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009854:	81a3      	strh	r3, [r4, #12]
 8009856:	2300      	movs	r3, #0
 8009858:	6063      	str	r3, [r4, #4]
 800985a:	6923      	ldr	r3, [r4, #16]
 800985c:	6023      	str	r3, [r4, #0]
 800985e:	89a3      	ldrh	r3, [r4, #12]
 8009860:	f043 0308 	orr.w	r3, r3, #8
 8009864:	81a3      	strh	r3, [r4, #12]
 8009866:	6923      	ldr	r3, [r4, #16]
 8009868:	b94b      	cbnz	r3, 800987e <__swsetup_r+0x7a>
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009874:	d003      	beq.n	800987e <__swsetup_r+0x7a>
 8009876:	4621      	mov	r1, r4
 8009878:	4628      	mov	r0, r5
 800987a:	f000 f883 	bl	8009984 <__smakebuf_r>
 800987e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009882:	f013 0201 	ands.w	r2, r3, #1
 8009886:	d00a      	beq.n	800989e <__swsetup_r+0x9a>
 8009888:	2200      	movs	r2, #0
 800988a:	60a2      	str	r2, [r4, #8]
 800988c:	6962      	ldr	r2, [r4, #20]
 800988e:	4252      	negs	r2, r2
 8009890:	61a2      	str	r2, [r4, #24]
 8009892:	6922      	ldr	r2, [r4, #16]
 8009894:	b942      	cbnz	r2, 80098a8 <__swsetup_r+0xa4>
 8009896:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800989a:	d1c5      	bne.n	8009828 <__swsetup_r+0x24>
 800989c:	bd38      	pop	{r3, r4, r5, pc}
 800989e:	0799      	lsls	r1, r3, #30
 80098a0:	bf58      	it	pl
 80098a2:	6962      	ldrpl	r2, [r4, #20]
 80098a4:	60a2      	str	r2, [r4, #8]
 80098a6:	e7f4      	b.n	8009892 <__swsetup_r+0x8e>
 80098a8:	2000      	movs	r0, #0
 80098aa:	e7f7      	b.n	800989c <__swsetup_r+0x98>
 80098ac:	2000002c 	.word	0x2000002c

080098b0 <_raise_r>:
 80098b0:	291f      	cmp	r1, #31
 80098b2:	b538      	push	{r3, r4, r5, lr}
 80098b4:	4605      	mov	r5, r0
 80098b6:	460c      	mov	r4, r1
 80098b8:	d904      	bls.n	80098c4 <_raise_r+0x14>
 80098ba:	2316      	movs	r3, #22
 80098bc:	6003      	str	r3, [r0, #0]
 80098be:	f04f 30ff 	mov.w	r0, #4294967295
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
 80098c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80098c6:	b112      	cbz	r2, 80098ce <_raise_r+0x1e>
 80098c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098cc:	b94b      	cbnz	r3, 80098e2 <_raise_r+0x32>
 80098ce:	4628      	mov	r0, r5
 80098d0:	f000 f830 	bl	8009934 <_getpid_r>
 80098d4:	4622      	mov	r2, r4
 80098d6:	4601      	mov	r1, r0
 80098d8:	4628      	mov	r0, r5
 80098da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098de:	f000 b817 	b.w	8009910 <_kill_r>
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d00a      	beq.n	80098fc <_raise_r+0x4c>
 80098e6:	1c59      	adds	r1, r3, #1
 80098e8:	d103      	bne.n	80098f2 <_raise_r+0x42>
 80098ea:	2316      	movs	r3, #22
 80098ec:	6003      	str	r3, [r0, #0]
 80098ee:	2001      	movs	r0, #1
 80098f0:	e7e7      	b.n	80098c2 <_raise_r+0x12>
 80098f2:	2100      	movs	r1, #0
 80098f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80098f8:	4620      	mov	r0, r4
 80098fa:	4798      	blx	r3
 80098fc:	2000      	movs	r0, #0
 80098fe:	e7e0      	b.n	80098c2 <_raise_r+0x12>

08009900 <raise>:
 8009900:	4b02      	ldr	r3, [pc, #8]	@ (800990c <raise+0xc>)
 8009902:	4601      	mov	r1, r0
 8009904:	6818      	ldr	r0, [r3, #0]
 8009906:	f7ff bfd3 	b.w	80098b0 <_raise_r>
 800990a:	bf00      	nop
 800990c:	2000002c 	.word	0x2000002c

08009910 <_kill_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	4d07      	ldr	r5, [pc, #28]	@ (8009930 <_kill_r+0x20>)
 8009914:	2300      	movs	r3, #0
 8009916:	4604      	mov	r4, r0
 8009918:	4608      	mov	r0, r1
 800991a:	4611      	mov	r1, r2
 800991c:	602b      	str	r3, [r5, #0]
 800991e:	f7f8 f919 	bl	8001b54 <_kill>
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	d102      	bne.n	800992c <_kill_r+0x1c>
 8009926:	682b      	ldr	r3, [r5, #0]
 8009928:	b103      	cbz	r3, 800992c <_kill_r+0x1c>
 800992a:	6023      	str	r3, [r4, #0]
 800992c:	bd38      	pop	{r3, r4, r5, pc}
 800992e:	bf00      	nop
 8009930:	20000a0c 	.word	0x20000a0c

08009934 <_getpid_r>:
 8009934:	f7f8 b906 	b.w	8001b44 <_getpid>

08009938 <__swhatbuf_r>:
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	460c      	mov	r4, r1
 800993c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009940:	2900      	cmp	r1, #0
 8009942:	b096      	sub	sp, #88	@ 0x58
 8009944:	4615      	mov	r5, r2
 8009946:	461e      	mov	r6, r3
 8009948:	da0d      	bge.n	8009966 <__swhatbuf_r+0x2e>
 800994a:	89a3      	ldrh	r3, [r4, #12]
 800994c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009950:	f04f 0100 	mov.w	r1, #0
 8009954:	bf14      	ite	ne
 8009956:	2340      	movne	r3, #64	@ 0x40
 8009958:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800995c:	2000      	movs	r0, #0
 800995e:	6031      	str	r1, [r6, #0]
 8009960:	602b      	str	r3, [r5, #0]
 8009962:	b016      	add	sp, #88	@ 0x58
 8009964:	bd70      	pop	{r4, r5, r6, pc}
 8009966:	466a      	mov	r2, sp
 8009968:	f000 f848 	bl	80099fc <_fstat_r>
 800996c:	2800      	cmp	r0, #0
 800996e:	dbec      	blt.n	800994a <__swhatbuf_r+0x12>
 8009970:	9901      	ldr	r1, [sp, #4]
 8009972:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009976:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800997a:	4259      	negs	r1, r3
 800997c:	4159      	adcs	r1, r3
 800997e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009982:	e7eb      	b.n	800995c <__swhatbuf_r+0x24>

08009984 <__smakebuf_r>:
 8009984:	898b      	ldrh	r3, [r1, #12]
 8009986:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009988:	079d      	lsls	r5, r3, #30
 800998a:	4606      	mov	r6, r0
 800998c:	460c      	mov	r4, r1
 800998e:	d507      	bpl.n	80099a0 <__smakebuf_r+0x1c>
 8009990:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009994:	6023      	str	r3, [r4, #0]
 8009996:	6123      	str	r3, [r4, #16]
 8009998:	2301      	movs	r3, #1
 800999a:	6163      	str	r3, [r4, #20]
 800999c:	b003      	add	sp, #12
 800999e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099a0:	ab01      	add	r3, sp, #4
 80099a2:	466a      	mov	r2, sp
 80099a4:	f7ff ffc8 	bl	8009938 <__swhatbuf_r>
 80099a8:	9f00      	ldr	r7, [sp, #0]
 80099aa:	4605      	mov	r5, r0
 80099ac:	4639      	mov	r1, r7
 80099ae:	4630      	mov	r0, r6
 80099b0:	f7fe feee 	bl	8008790 <_malloc_r>
 80099b4:	b948      	cbnz	r0, 80099ca <__smakebuf_r+0x46>
 80099b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ba:	059a      	lsls	r2, r3, #22
 80099bc:	d4ee      	bmi.n	800999c <__smakebuf_r+0x18>
 80099be:	f023 0303 	bic.w	r3, r3, #3
 80099c2:	f043 0302 	orr.w	r3, r3, #2
 80099c6:	81a3      	strh	r3, [r4, #12]
 80099c8:	e7e2      	b.n	8009990 <__smakebuf_r+0xc>
 80099ca:	89a3      	ldrh	r3, [r4, #12]
 80099cc:	6020      	str	r0, [r4, #0]
 80099ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099d2:	81a3      	strh	r3, [r4, #12]
 80099d4:	9b01      	ldr	r3, [sp, #4]
 80099d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099da:	b15b      	cbz	r3, 80099f4 <__smakebuf_r+0x70>
 80099dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099e0:	4630      	mov	r0, r6
 80099e2:	f000 f81d 	bl	8009a20 <_isatty_r>
 80099e6:	b128      	cbz	r0, 80099f4 <__smakebuf_r+0x70>
 80099e8:	89a3      	ldrh	r3, [r4, #12]
 80099ea:	f023 0303 	bic.w	r3, r3, #3
 80099ee:	f043 0301 	orr.w	r3, r3, #1
 80099f2:	81a3      	strh	r3, [r4, #12]
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	431d      	orrs	r5, r3
 80099f8:	81a5      	strh	r5, [r4, #12]
 80099fa:	e7cf      	b.n	800999c <__smakebuf_r+0x18>

080099fc <_fstat_r>:
 80099fc:	b538      	push	{r3, r4, r5, lr}
 80099fe:	4d07      	ldr	r5, [pc, #28]	@ (8009a1c <_fstat_r+0x20>)
 8009a00:	2300      	movs	r3, #0
 8009a02:	4604      	mov	r4, r0
 8009a04:	4608      	mov	r0, r1
 8009a06:	4611      	mov	r1, r2
 8009a08:	602b      	str	r3, [r5, #0]
 8009a0a:	f7f8 f903 	bl	8001c14 <_fstat>
 8009a0e:	1c43      	adds	r3, r0, #1
 8009a10:	d102      	bne.n	8009a18 <_fstat_r+0x1c>
 8009a12:	682b      	ldr	r3, [r5, #0]
 8009a14:	b103      	cbz	r3, 8009a18 <_fstat_r+0x1c>
 8009a16:	6023      	str	r3, [r4, #0]
 8009a18:	bd38      	pop	{r3, r4, r5, pc}
 8009a1a:	bf00      	nop
 8009a1c:	20000a0c 	.word	0x20000a0c

08009a20 <_isatty_r>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	4d06      	ldr	r5, [pc, #24]	@ (8009a3c <_isatty_r+0x1c>)
 8009a24:	2300      	movs	r3, #0
 8009a26:	4604      	mov	r4, r0
 8009a28:	4608      	mov	r0, r1
 8009a2a:	602b      	str	r3, [r5, #0]
 8009a2c:	f7f8 f902 	bl	8001c34 <_isatty>
 8009a30:	1c43      	adds	r3, r0, #1
 8009a32:	d102      	bne.n	8009a3a <_isatty_r+0x1a>
 8009a34:	682b      	ldr	r3, [r5, #0]
 8009a36:	b103      	cbz	r3, 8009a3a <_isatty_r+0x1a>
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	bd38      	pop	{r3, r4, r5, pc}
 8009a3c:	20000a0c 	.word	0x20000a0c

08009a40 <_init>:
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	bf00      	nop
 8009a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a46:	bc08      	pop	{r3}
 8009a48:	469e      	mov	lr, r3
 8009a4a:	4770      	bx	lr

08009a4c <_fini>:
 8009a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4e:	bf00      	nop
 8009a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a52:	bc08      	pop	{r3}
 8009a54:	469e      	mov	lr, r3
 8009a56:	4770      	bx	lr
